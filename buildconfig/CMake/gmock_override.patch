:100644 100644 44055c9... 0000000... M	include/gmock/gmock-matchers.h
:100644 100644 2dd733b... 0000000... M	include/gmock/gmock-spec-builders.h
:100644 100644 50ec728... 0000000... M	src/gmock-cardinalities.cc
:100644 100644 fb53080... 0000000... M	src/gmock-internal-utils.cc

diff --git a/include/gmock/gmock-matchers.h b/include/gmock/gmock-matchers.h
index 44055c9..7421ff7 100644
--- a/include/gmock/gmock-matchers.h
+++ b/include/gmock/gmock-matchers.h
@@ -888,14 +888,14 @@ class AnythingMatcher {
      public: \
       explicit Impl(const Rhs& rhs) : rhs_(rhs) {} \
       virtual bool MatchAndExplain(\
-          Lhs lhs, MatchResultListener* /* listener */) const { \
+          Lhs lhs, MatchResultListener* /* listener */) const override { \
         return lhs op rhs_; \
       } \
-      virtual void DescribeTo(::std::ostream* os) const { \
+      virtual void DescribeTo(::std::ostream* os) const override { \
         *os << relation  " "; \
         UniversalPrint(rhs_, os); \
       } \
-      virtual void DescribeNegationTo(::std::ostream* os) const { \
+      virtual void DescribeNegationTo(::std::ostream* os) const override { \
         *os << negated_relation  " "; \
         UniversalPrint(rhs_, os); \
       } \
diff --git a/include/gmock/gmock-spec-builders.h b/include/gmock/gmock-spec-builders.h
index 2dd733b..db39a83 100644
--- a/include/gmock/gmock-spec-builders.h
+++ b/include/gmock/gmock-spec-builders.h
@@ -1370,11 +1370,9 @@ class ActionResultHolder : public UntypedActionResultHolderBase {
 template <>
 class ActionResultHolder<void> : public UntypedActionResultHolderBase {
  public:
-  explicit ActionResultHolder() {}
-
   void GetValueAndDelete() const { delete this; }
 
-  virtual void PrintAsActionResult(::std::ostream* /* os */) const {}
+  virtual void PrintAsActionResult(::std::ostream* /* os */) const override {}
 
   // Performs the given mock function's default action and returns NULL;
   template <typename F>
@@ -1383,7 +1381,7 @@ class ActionResultHolder<void> : public UntypedActionResultHolderBase {
       const typename Function<F>::ArgumentTuple& args,
       const string& call_description) {
     func_mocker->PerformDefaultAction(args, call_description);
-    return new ActionResultHolder();
+    return NULL;
   }
 
   // Performs the given action and returns NULL.
@@ -1392,7 +1390,7 @@ class ActionResultHolder<void> : public UntypedActionResultHolderBase {
       const Action<F>& action,
       const typename Function<F>::ArgumentTuple& args) {
     action.Perform(args);
-    return new ActionResultHolder();
+    return NULL;
   }
 };
 
diff --git a/src/gmock-cardinalities.cc b/src/gmock-cardinalities.cc
index 50ec728..529502f 100644
--- a/src/gmock-cardinalities.cc
+++ b/src/gmock-cardinalities.cc
@@ -71,18 +71,18 @@ class BetweenCardinalityImpl : public CardinalityInterface {
 
   // Conservative estimate on the lower/upper bound of the number of
   // calls allowed.
-  virtual int ConservativeLowerBound() const { return min_; }
-  virtual int ConservativeUpperBound() const { return max_; }
+  virtual int ConservativeLowerBound() const override { return min_; }
+  virtual int ConservativeUpperBound() const override { return max_; }
 
-  virtual bool IsSatisfiedByCallCount(int call_count) const {
+  virtual bool IsSatisfiedByCallCount(int call_count) const override {
     return min_ <= call_count && call_count <= max_;
   }
 
-  virtual bool IsSaturatedByCallCount(int call_count) const {
+  virtual bool IsSaturatedByCallCount(int call_count) const override {
     return call_count >= max_;
   }
 
-  virtual void DescribeTo(::std::ostream* os) const;
+  virtual void DescribeTo(::std::ostream* os) const override;
 
  private:
   const int min_;
diff --git a/src/gmock-internal-utils.cc b/src/gmock-internal-utils.cc
index fb53080..e6e26ee 100644
--- a/src/gmock-internal-utils.cc
+++ b/src/gmock-internal-utils.cc
@@ -76,7 +76,7 @@ GTEST_API_ string ConvertIdentifierNameToWords(const char* id_name) {
 class GoogleTestFailureReporter : public FailureReporterInterface {
  public:
   virtual void ReportFailure(FailureType type, const char* file, int line,
-                             const string& message) {
+                             const string& message) override {
     AssertHelper(type == kFatal ?
                  TestPartResult::kFatalFailure :
                  TestPartResult::kNonFatalFailure,
