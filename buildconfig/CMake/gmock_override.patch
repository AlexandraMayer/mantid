:100644 100644 7e9708e... 0000000... M	include/gmock/gmock-actions.h
:100644 100644 44055c9... 0000000... M	include/gmock/gmock-matchers.h
:100644 100644 2dd733b... 0000000... M	include/gmock/gmock-spec-builders.h
:100644 100644 50ec728... 0000000... M	src/gmock-cardinalities.cc
:100644 100644 fb53080... 0000000... M	src/gmock-internal-utils.cc

diff --git a/include/gmock/gmock-actions.h b/include/gmock/gmock-actions.h
index 7e9708e..cb199ef 100644
--- a/include/gmock/gmock-actions.h
+++ b/include/gmock/gmock-actions.h
@@ -492,7 +492,7 @@ class ReturnAction {
     explicit Impl(R value)
         : value_(::testing::internal::ImplicitCast_<Result>(value)) {}
 
-    virtual Result Perform(const ArgumentTuple&) { return value_; }
+    virtual Result Perform(const ArgumentTuple&) override { return value_; }
 
    private:
     GTEST_COMPILE_ASSERT_(!internal::is_reference<Result>::value,
diff --git a/include/gmock/gmock-matchers.h b/include/gmock/gmock-matchers.h
index 44055c9..519a9a3 100644
--- a/include/gmock/gmock-matchers.h
+++ b/include/gmock/gmock-matchers.h
@@ -425,15 +425,15 @@ class PolymorphicMatcher {
    public:
     explicit MonomorphicImpl(const Impl& impl) : impl_(impl) {}
 
-    virtual void DescribeTo(::std::ostream* os) const {
+    virtual void DescribeTo(::std::ostream* os) const override {
       impl_.DescribeTo(os);
     }
 
-    virtual void DescribeNegationTo(::std::ostream* os) const {
+    virtual void DescribeNegationTo(::std::ostream* os) const override {
       impl_.DescribeNegationTo(os);
     }
 
-    virtual bool MatchAndExplain(T x, MatchResultListener* listener) const {
+    virtual bool MatchAndExplain(T x, MatchResultListener* listener) const override {
       return impl_.MatchAndExplain(x, listener);
     }
 
@@ -548,15 +548,15 @@ class MatcherCastImpl<T, Matcher<U> > {
         : source_matcher_(source_matcher) {}
 
     // We delegate the matching logic to the source matcher.
-    virtual bool MatchAndExplain(T x, MatchResultListener* listener) const {
+    virtual bool MatchAndExplain(T x, MatchResultListener* listener) const override {
       return source_matcher_.MatchAndExplain(static_cast<U>(x), listener);
     }
 
-    virtual void DescribeTo(::std::ostream* os) const {
+    virtual void DescribeTo(::std::ostream* os) const override {
       source_matcher_.DescribeTo(os);
     }
 
-    virtual void DescribeNegationTo(::std::ostream* os) const {
+    virtual void DescribeNegationTo(::std::ostream* os) const override {
       source_matcher_.DescribeNegationTo(os);
     }
 
@@ -840,9 +840,9 @@ template <typename T>
 class AnyMatcherImpl : public MatcherInterface<T> {
  public:
   virtual bool MatchAndExplain(
-      T /* x */, MatchResultListener* /* listener */) const { return true; }
-  virtual void DescribeTo(::std::ostream* os) const { *os << "is anything"; }
-  virtual void DescribeNegationTo(::std::ostream* os) const {
+      T /* x */, MatchResultListener* /* listener */) const override { return true; }
+  virtual void DescribeTo(::std::ostream* os) const override { *os << "is anything"; }
+  virtual void DescribeNegationTo(::std::ostream* os) const override {
     // This is mostly for completeness' safe, as it's not very useful
     // to write Not(A<bool>()).  However we cannot completely rule out
     // such a possibility, and it doesn't hurt to be prepared.
@@ -888,14 +888,14 @@ class AnythingMatcher {
      public: \
       explicit Impl(const Rhs& rhs) : rhs_(rhs) {} \
       virtual bool MatchAndExplain(\
-          Lhs lhs, MatchResultListener* /* listener */) const { \
+          Lhs lhs, MatchResultListener* /* listener */) const override { \
         return lhs op rhs_; \
       } \
-      virtual void DescribeTo(::std::ostream* os) const { \
+      virtual void DescribeTo(::std::ostream* os) const override { \
         *os << relation  " "; \
         UniversalPrint(rhs_, os); \
       } \
-      virtual void DescribeNegationTo(::std::ostream* os) const { \
+      virtual void DescribeNegationTo(::std::ostream* os) const override { \
         *os << negated_relation  " "; \
         UniversalPrint(rhs_, os); \
       } \
diff --git a/include/gmock/gmock-spec-builders.h b/include/gmock/gmock-spec-builders.h
index 2dd733b..a212af8 100644
--- a/include/gmock/gmock-spec-builders.h
+++ b/include/gmock/gmock-spec-builders.h
@@ -1059,7 +1059,7 @@ class TypedExpectation : public ExpectationBase {
 
   // If this mock method has an extra matcher (i.e. .With(matcher)),
   // describes it to the ostream.
-  virtual void MaybeDescribeExtraMatcherTo(::std::ostream* os) {
+  virtual void MaybeDescribeExtraMatcherTo(::std::ostream* os) override {
     if (extra_matcher_specified_) {
       *os << "    Expected args: ";
       extra_matcher_.DescribeTo(os);
@@ -1073,7 +1073,7 @@ class TypedExpectation : public ExpectationBase {
 
   // Returns an Expectation object that references and co-owns this
   // expectation.
-  virtual Expectation GetHandle() {
+  virtual Expectation GetHandle() override {
     return owner_->GetHandleOf(this);
   }
 
@@ -1333,7 +1333,7 @@ class ActionResultHolder : public UntypedActionResultHolderBase {
   }
 
   // Prints the held value as an action's result to os.
-  virtual void PrintAsActionResult(::std::ostream* os) const {
+  virtual void PrintAsActionResult(::std::ostream* os) const override {
     *os << "\n          Returns: ";
     // T may be a reference type, so we don't use UniversalPrint().
     UniversalPrinter<T>::Print(value_, os);
@@ -1370,11 +1370,9 @@ class ActionResultHolder : public UntypedActionResultHolderBase {
 template <>
 class ActionResultHolder<void> : public UntypedActionResultHolderBase {
  public:
-  explicit ActionResultHolder() {}
-
   void GetValueAndDelete() const { delete this; }
 
-  virtual void PrintAsActionResult(::std::ostream* /* os */) const {}
+  virtual void PrintAsActionResult(::std::ostream* /* os */) const override {}
 
   // Performs the given mock function's default action and returns NULL;
   template <typename F>
@@ -1383,7 +1381,7 @@ class ActionResultHolder<void> : public UntypedActionResultHolderBase {
       const typename Function<F>::ArgumentTuple& args,
       const string& call_description) {
     func_mocker->PerformDefaultAction(args, call_description);
-    return new ActionResultHolder();
+    return NULL;
   }
 
   // Performs the given action and returns NULL.
@@ -1392,7 +1390,7 @@ class ActionResultHolder<void> : public UntypedActionResultHolderBase {
       const Action<F>& action,
       const typename Function<F>::ArgumentTuple& args) {
     action.Perform(args);
-    return new ActionResultHolder();
+    return NULL;
   }
 };
 
diff --git a/src/gmock-cardinalities.cc b/src/gmock-cardinalities.cc
index 50ec728..529502f 100644
--- a/src/gmock-cardinalities.cc
+++ b/src/gmock-cardinalities.cc
@@ -71,18 +71,18 @@ class BetweenCardinalityImpl : public CardinalityInterface {
 
   // Conservative estimate on the lower/upper bound of the number of
   // calls allowed.
-  virtual int ConservativeLowerBound() const { return min_; }
-  virtual int ConservativeUpperBound() const { return max_; }
+  virtual int ConservativeLowerBound() const override { return min_; }
+  virtual int ConservativeUpperBound() const override { return max_; }
 
-  virtual bool IsSatisfiedByCallCount(int call_count) const {
+  virtual bool IsSatisfiedByCallCount(int call_count) const override {
     return min_ <= call_count && call_count <= max_;
   }
 
-  virtual bool IsSaturatedByCallCount(int call_count) const {
+  virtual bool IsSaturatedByCallCount(int call_count) const override {
     return call_count >= max_;
   }
 
-  virtual void DescribeTo(::std::ostream* os) const;
+  virtual void DescribeTo(::std::ostream* os) const override;
 
  private:
   const int min_;
diff --git a/src/gmock-internal-utils.cc b/src/gmock-internal-utils.cc
index fb53080..e6e26ee 100644
--- a/src/gmock-internal-utils.cc
+++ b/src/gmock-internal-utils.cc
@@ -76,7 +76,7 @@ GTEST_API_ string ConvertIdentifierNameToWords(const char* id_name) {
 class GoogleTestFailureReporter : public FailureReporterInterface {
  public:
   virtual void ReportFailure(FailureType type, const char* file, int line,
-                             const string& message) {
+                             const string& message) override {
     AssertHelper(type == kFatal ?
                  TestPartResult::kFatalFailure :
                  TestPartResult::kNonFatalFailure,
