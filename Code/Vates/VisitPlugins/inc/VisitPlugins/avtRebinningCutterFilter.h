/*****************************************************************************
 *
 * Copyright (c) 2000 - 2010, Lawrence Livermore National Security, LLC
 * Produced at the Lawrence Livermore National Laboratory
 * LLNL-CODE-442911
 * All rights reserved.
 *
 * This file is  part of VisIt. For  details, see https://visit.llnl.gov/.  The
 * full copyright notice is contained in the file COPYRIGHT located at the root
 * of the VisIt distribution or at http://www.llnl.gov/visit/copyright.html.
 *
 * Redistribution  and  use  in  source  and  binary  forms,  with  or  without
 * modification, are permitted provided that the following conditions are met:
 *
 *  - Redistributions of  source code must  retain the above  copyright notice,
 *    this list of conditions and the disclaimer below.
 *  - Redistributions in binary form must reproduce the above copyright notice,
 *    this  list of  conditions  and  the  disclaimer (as noted below)  in  the
 *    documentation and/or other materials provided with the distribution.
 *  - Neither the name of  the LLNS/LLNL nor the names of  its contributors may
 *    be used to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT  HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR  IMPLIED WARRANTIES, INCLUDING,  BUT NOT  LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND  FITNESS FOR A PARTICULAR  PURPOSE
 * ARE  DISCLAIMED. IN  NO EVENT  SHALL LAWRENCE  LIVERMORE NATIONAL  SECURITY,
 * LLC, THE  U.S.  DEPARTMENT OF  ENERGY  OR  CONTRIBUTORS BE  LIABLE  FOR  ANY
 * DIRECT,  INDIRECT,   INCIDENTAL,   SPECIAL,   EXEMPLARY,  OR   CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT  LIMITED TO, PROCUREMENT OF  SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF  USE, DATA, OR PROFITS; OR  BUSINESS INTERRUPTION) HOWEVER
 * CAUSED  AND  ON  ANY  THEORY  OF  LIABILITY,  WHETHER  IN  CONTRACT,  STRICT
 * LIABILITY, OR TORT  (INCLUDING NEGLIGENCE OR OTHERWISE)  ARISING IN ANY  WAY
 * OUT OF THE  USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
 * DAMAGE.
 *
 *****************************************************************************/

// ************************************************************************* //
//  File: avtRebinningCutterFilter.h
// ************************************************************************* //

#ifndef AVT_RebinningCutter_FILTER_H
#define AVT_RebinningCutter_FILTER_H

#include <vtkUnstructuredGrid.h>
#include <vtkPlane.h>
#include <vtkDataSet.h>
#include <avtPluginDataTreeIterator.h>
#include <RebinningCutterAttributes.h>
#include <vtkVisItClipper.h>

#include <MantidAPI/ImplicitFunction.h>
#include <MantidVisitPresenters/RebinningCutterPresenter.h>
class vtkDataSet;

// ****************************************************************************
//  Class: avtRebinningCutterFilter
//
//  Purpose:
//      A plugin operator for RebinningCutter.
//
//  Programmer: spu92482 -- generated by xml2avt
//  Creation:   Fri Sep 24 18:04:29 PST 2010
//
// ****************************************************************************


class ClipperAdapter : public Mantid::VATES::Clipper
{
private:
  vtkVisItClipper* m_clipper;
public:
  ClipperAdapter(vtkVisItClipper* pClipper) : m_clipper(pClipper)
  {
  }
  void SetInput(::vtkDataSet* in_ds)
  {
    m_clipper->SetInput(in_ds);
  }
  void SetClipFunction(vtkImplicitFunction* func)
  {
    m_clipper->SetClipFunction(func);
  }
  void SetInsideOut(bool insideout)
  {
    m_clipper->SetInsideOut(insideout);
  }
  void SetRemoveWholeCells(bool removeWholeCells)
  {
    m_clipper->SetRemoveWholeCells(removeWholeCells);
  }
  void SetOutput(vtkUnstructuredGrid* out_ds)
  {
    m_clipper->SetOutput(out_ds);
  }
  void Update()
  {
    m_clipper->Update();
  }
  void Delete()
  {
    delete this;
  }
  ~ClipperAdapter()
  {
    m_clipper->Delete();
  }

};

class avtRebinningCutterFilter: public avtPluginDataTreeIterator
{

public:
  avtRebinningCutterFilter();
  virtual ~avtRebinningCutterFilter();
  void SetUp();
  static avtFilter *Create();
    const virtual char *GetType(void)
    {
        return "avtRebinningCutterFilter";
    }

    const virtual char *GetDescription(void)
    {
        return "Rebinning Cutter";
    }

    virtual void SetAtts(const AttributeGroup*);
    virtual bool Equivalent(const AttributeGroup*);

protected:
    RebinningCutterAttributes atts;
    virtual vtkDataSet *ExecuteData(vtkDataSet*, int, std::string);
};

#endif
