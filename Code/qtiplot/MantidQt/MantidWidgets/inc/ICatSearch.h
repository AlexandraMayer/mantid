
#ifndef MANTIDWIDGETS_ICATSEARCH_H_
#define MANTIDWIDGETS_ICATSEARCH_H_

//----------------------
// Includes
//----------------------
//#include "MantidQtMantidWidgets/ui_ICatSearch.h"
#include "MantidQtMantidWidgets/ui_ICatSearch.h"
#include "MantidQtMantidWidgets/MantidWidget.h"
#include "MantidAPI/ITableWorkspace.h"
#include "MantidQtMantidWidgets/ICatInvestigation.h"
#include "WidgetDllOption.h"

#include<QObject>
#include<QEvent>

namespace MantidQt
{
namespace MantidWidgets
{
class  EXPORT_OPT_MANTIDQT_MANTIDWIDGETS ICatSearch : public QWidget
{
  Q_OBJECT

public:
  /// Default Constructor
  ICatSearch(QWidget *parent = 0);
  /// This mthod creates a ICatSearch widget
  QWidget* createSearchWidget();

   /// Name of the interface
  static std::string name() { return "ICatSearch"; }

signals:
  void error(const QString&);

private:
  /// Initialize the layout
  virtual void initLayout();
  ///populating the instrumentbox 
  void populateInstrumentBox();
  /// execute list instruments algorithm
  Mantid::API::ITableWorkspace_sptr  executeListInstruments();
  ///get start and end run numbers
  void getRunValues(double& startRun,double& endRun);
   /// get the user selected instrument
  void getSelectedInstrument(QString& instrName);
  /// execute the algorithm
  Mantid::API::ITableWorkspace_sptr  executeSearchByRunNumber(double &startRun,double &endRun,bool bCase,std::string& instrName);

   /// setting tool tips for all elements
  void setToolTips();
  /// this method populates the search result widget.
  void updatesearchResults(Mantid::API::ITableWorkspace_sptr & ws_sptr );
  /// save settings to registry
  void saveSettings();
  /// read settings from registry
  void readSettings();

  void closeEvent(QCloseEvent* event);

  void setparentWidget(QWidget*);
  //bool eventFilter(QObject *obj, QEvent *event);
  QWidget* getParentWidget();

  //if  casesensitive check box selected 
  bool isCaseSensitiveSearch();

private slots:
	///handler for search button
	void onSearch();
	///handler for cancel
	void onCancel();
	///
	void investigationSelected(QTableWidgetItem *);
 
private:
  ///The form generated by Qt Designer
  Ui::ICatSearch m_uiForm;

 // Uii::ICatSearch1 m_uiform1;
   
  MantidQt::MantidWidgets::ICatInvestigation* m_invstWidget;
 // QWidget* m_invstWidget;
  QWidget* m_applicationWindow;


};

}
}

#endif //MANTIDQTCUSTOMINTERFACES_ICATSEARCH_H_
