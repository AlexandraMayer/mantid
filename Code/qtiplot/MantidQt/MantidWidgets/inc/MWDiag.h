#ifndef MANTIDQTCUSTOMINTERFACES_MWDIAG_H_
#define MANTIDQTCUSTOMINTERFACES_MWDIAG_H_

#include "MantidQtMantidWidgets/ui_MWDiag.h"
#include "MantidQtMantidWidgets/DiagResults.h"
#include "MantidQtMantidWidgets/MantidWidget.h"
#include "WidgetDllOption.h"
#include <QSettings>
#include <QStringList>
#include "boost/shared_ptr.hpp"

namespace MantidQt
{
  namespace MantidWidgets
  {
    // forward declaration //??STEVES?? remove the need for these?
	class whiteBeam1;
	class whiteBeam2;
	class backTest;
    
	class EXPORT_OPT_MANTIDQT_MANTIDWIDGETS MWDiag : public MantidWidget
    {
      Q_OBJECT

    public:
      /// there has to be a default constructor but you can call it with a pointer to the thing that will take ownership of it
      MWDiag(QWidget *parent = NULL, QString prevSettingsGr = "CustomWidgets/Diag");
	  QString run(const QString &outWS = "", const bool saveSettings = true);
	  signals:
	    void runAsPythonScript(const QString&);
    private:
      /// The form generated by Qt Designer
      Ui::MWDiag m_designWidg;
	  /// check if ==NULL before use, set to point to the results dialog box is deleted when it's closed!
      DiagResults *m_dispDialog;
	  /// the name group of the group where the settings that we want to use are stored
	  QString m_pastSettings;
	  /// stores if the contents of the first white beam vanadium box have been filled in by the user or not, if not the contents are open to auto-fillin
	  bool m_WBVChanged;
	  /// true if either of the TOF windows have been changed by the user, otherwise false
	  bool m_TOFChanged;
	  /// name of the white beam vanadium file that was last passed through the updateWBV() signal or empty if no value was passed
	  QString m_WBVAutoVal;
	  /// time of flight value for the start of the background window that was set through the update??? or -1 if no value was sent through
	  double m_sTOFAutoVal;
	  /// time of flight value for the end of the background window that was set through the update??? or -1 if no value was sent through
	  double m_eTOFAutoVal;
      /// the name of the output workspace that contains many of the results from these tests
	  QString m_outputWS;
	  /// a coma separated list of run files that will be loaded to do the background test
	  QString m_monoFiles;
      /// the values on the form the last time it was SUCCESSFULLY run accessed through this object
	  QSettings m_prevSets;

	  void raiseDialog();
      void notifyDialog(const DiagResults::TestSummary &display);
	  void closeDialog();

	  // move the following to the widget
	  QString openFileDialog(const bool save, const QStringList &exts);

	  void loadDefaults();
	  void saveDefaults();
	  void setupToolTips();
      void connectSignals(const QWidget * const parentInterface);
	  void setUpValidators();
	  QString possibleSecondTest(boost::shared_ptr<whiteBeam2> &whiteBeamComp);
	  QString possibleThirdTest(boost::shared_ptr<backTest> &backCheck);
      DiagResults::TestSummary singleWhiteBeamTest(whiteBeam1 &python);
	  DiagResults::TestSummary whiteBeamCompTest(const DiagResults::TestSummary firstTest, boost::shared_ptr<whiteBeam2> &python);
	  DiagResults::TestSummary backGroundTest(const DiagResults::TestSummary &firstTest, const DiagResults::TestSummary &secondTest, boost::shared_ptr<backTest>& thisTest);
	private slots:
	  void browseClicked(const QString &buttonDis);
	  void updateWBV(const QString &WBVSuggestion);
	  void updateTOFs(const double &start, const double &end);
	  void specifyRuns(const QString &);
	  void WBVUpd();
	  void TOFUpd();
	  void noDispDialog() {m_dispDialog = NULL;}
	};
  }
}

#endif //MANTIDQTCUSTOMINTERFACES_MWDIAG_H_
