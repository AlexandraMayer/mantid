#ifndef MANTIDWIDGETS_ICATINVESTIGATION_H_
#define MANTIDWIDGETS_ICATINVESTIGATION_H_

//----------------------
// Includes
//----------------------
#include "MantidQtMantidWidgets/ui_ICatInvestigation.h"
#include "MantidQtMantidWidgets/MantidWidget.h"
#include "MantidAPI/ITableWorkspace.h"
#include "WidgetDllOption.h"
#include<QObject>
#include<QEvent>

namespace MantidQt
{
namespace MantidWidgets
{
class EXPORT_OPT_MANTIDQT_MANTIDWIDGETS ICatInvestigation : public QWidget
{
  Q_OBJECT

public:
  /// Constructor
   ICatInvestigation(long long investId,const QString &qRbNumber,const QString &qTitle,const QString & qInstrument,QWidget *parent = 0);
signals:
   ///this signal prints error messge to log window
   void error(const QString&);
   /// loadraw asynchronous execution.
   void loadRawAsynch(const QString&,const QString&);
   /// loadnexus asynchronous execution
   void loadNexusAsynch(const QString&,const QString&);

private:
  /// Initialize the layout
  virtual void initLayout();
  /// Populate the investigation tree widget
  void populateInvestigationTreeWidget();
  /// execute getdatafIles algorithm
  Mantid::API::ITableWorkspace_sptr executeGetdataFiles();

  /// executes getdatasets algorithm
   Mantid::API::ITableWorkspace_sptr executeGetdataSets();
 
  /// Poulates the data files tree widget 
  void populateinvestigationWidget(Mantid::API::ITableWorkspace_sptr & ws_sptr);

  /// executes the downlaod file algorithm
   bool executeDownloadDataFile(const QString& fileName,QString& fileLoc);
   
   /// get the selected file name
	void getSelctedFileName(QString& fileName );

	/// checks the file is of raw extn
	bool isRawFile(const QString& fileName);
	/// checks the file is of  nxs extn
	bool isNexusFile(const QString& fileName);

	/// executes loadRaw algorithm
	bool executeLoadRaw(const QString& fileName,const QString& wsName);

	/// executes loadRaw algorithm
	bool executeLoadNexus(const QString& fileName,const QString& wsName);

	//if the loading is controlled
	bool isLoadingControlled();

	/// execute the algorithm
	bool execute(const QString& algName,const int& version,const QString& filepath,const QString& wsName);

	/// This method sets the isis archive location 
	void setisisarchiveFileLocation(const QString& fileLoc);


  private slots:
	  /// investigation Clicked
	void investigationClicked(QTreeWidgetItem *, int);
	///cancel button clicked
	void onCancel();
	/// Download button clicked
	void onDownload();
    /// tree widget item named defaults clicked
	void investigationWidgetItemExpanded(QTreeWidgetItem* item);
    /// table item selected 
	void tableItemSelected(QTableWidgetItem* item);
	/// load button clicked
	void onLoad();
	

  //bool eventFilter(QObject *obj, QEvent *event);

private:
  //The form generated by Qt Designer
  Ui::ICatInvestigation m_uiForm;

   ///investigation id
  long long m_invstId;
  /// RbNumber
  QString m_RbNumber;
  /// Title
  QString m_Title;
  /// Instrument
  QString m_Instrument;
  /// data files workspace 
  Mantid::API::ITableWorkspace_sptr m_datafilesws_sptr;
  /// shared pointer to datasets workspace
  Mantid::API::ITableWorkspace_sptr m_datasetsws_sptr;
  /// isis archive location of the string
  QString m_archiveLoc;

};

}
}

#endif //MANTIDQTCUSTOMINTERFACES_ICATINVESTIGATION_H_
