#ifndef MANTIDQTCUSTOMINTERFACES_CONVERTTOENERGY_H_
#define MANTIDQTCUSTOMINTERFACES_CONVERTTOENERGY_H_

//----------------------
// Includes
//----------------------
#include "MantidQtCustomInterfaces/ui_ConvertToEnergy.h"
#include "MantidQtAPI/UserSubWindow.h"


namespace MantidQt
{
namespace CustomInterfaces
{
  class Homer;
  class Indirect;

class ConvertToEnergy : public MantidQt::API::UserSubWindow
{
  Q_OBJECT

public: // public constants, ennumerations and types
  enum DeltaEMode { Direct, InDirect, Undefined};

public: // public constructor, destructor and functions
  /// Default Constructor
  ConvertToEnergy(QWidget *parent = 0);
  /// Interface name
  static std::string name() { return "ConvertToEnergy"; }
  /// Aliases for this interface
  static std::set<std::string> aliases()
  { 
    std::set<std::string> aliasList;
    aliasList.insert("Homer");
    return aliasList;
  }

protected: // protected functions (and slots)

protected slots:
  virtual void setIDFValues(const QString & prefix);
  virtual void helpClicked();
  virtual void runClicked();

private: // private functions (and slots)
  /// Initialize the layout
  virtual void initLayout();
  virtual void initLocalPython();
  /// setup Instrument Selection QComboBox 's
  void setupCbInst();
  void getStartingInstrument();
  void instrumentSelectChanged(const QString& prefix);
  /// Find path to instrument's _Definition.xml file (and check there is a parameter file).
  QString getIDFPath(const QString& prefix);
  /// Find the DeltaEMode (Direct or Indirect) of the instrument.
  DeltaEMode instrumentDeltaEMode(const QString& defFile);
  /// Change the user interface to show the relevant sections for the instrument type.
  void changeInterface(DeltaEMode desired);
private slots:
  void userSelectInstrument(const QString& prefix);

protected: // member variables
  /// The .ui form generated by Qt Designer
  Ui::ConvertToEnergy m_uiForm;

private: // member variables
  /// Direct Instruments interface object
  Homer *m_directInstruments;
  /// Indirect Instruments interface object
  Indirect *m_indirectInstruments;
  /// Instrument the interface is currently set for.
  QString m_curInterfaceSetup;
  /// "DeltaE-mode" of the current instrument.
  DeltaEMode m_curEmodeType;

};

}
}

#endif //MANTIDQTCUSTOMINTERFACES_CONVERTTOENERGY_H_
