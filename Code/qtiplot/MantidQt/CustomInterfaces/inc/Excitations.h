#ifndef MANTIDQTCUSTOMINTERFACES_EXCITATIONS_H_
#define MANTIDQTCUSTOMINTERFACES_EXCITATIONS_H_

#include "MantidQtCustomInterfaces/ui_Excitations.h"
#include "MantidQtCustomInterfaces/deltaECalc.h"
#include "MantidQtMantidWidgets/pythonCalc.h"
#include "MantidQtMantidWidgets/MWDiag.h"
#include "MantidKernel/PropertyWithValue.h"
#include "MantidQtAPI/UserSubWindow.h"
#include "MantidAPI/IAlgorithm.h"
#include <QString>
#include <QStringList>
#include <QHash>

namespace MantidQt
{
namespace CustomInterfaces
{
class Excitations : public MantidQt::API::UserSubWindow
{
  Q_OBJECT

public:
  /// there has to be a default constructor but you can call it with a pointer to the thing that will take ownership of it
  Excitations(QWidget *parent = 0);
  //??STEVES?? check which of the following may be private, can the slot be turned into a signal?
  signals:
    void MWDiag_updateWBV(const QString&);
  public slots:
	void updateWBV();

private:
  /// number of extensions for input files allowed
  static const int numInputExts= 4;
  /// a list of the extensions for input files allowed
  static const std::string inputExts[numInputExts];
  /// The form generated by Qt Designer
  Ui::Excitations m_uiForm;
  /// a pointer to the widget with the user controls for finding bad detectors
  MantidWidgets::MWDiag *m_diagPage;
  // structures to hold the values entered by the use
  /// Pointers to instances of all the algorithms used. From these the properties are taken and used for validation
  std::vector<Mantid::API::IAlgorithm_sptr> m_algorDummies;
  /// caches the value of the 
  bool m_saveChanged;
  deltaECalc::FileInput *m_inFiles;
  /// we set this to true if python is running to say that we shouldn't start running more python
  bool m_busy;

    /// Initialize the layout
  virtual void initLayout();

  /// enable the run button if the results dialog has been closed and the python has stopped
  void pythonIsRunning(bool running = true);
  QString defaultName();
  std::string insertNumber(const std::string &filename, const int number);

  void setUpPage1();
  void setUpPage2();
  void setUpPage3();

private slots:
  ///run the algorithms that can be run with the data that users supplied
  void run();
  //get rid of this one, no?
  void browseClicked(const QString &buttonDis);
  void addRunFile();
  /// open the wiki page for this interface in their browser
  void helpClicked();
  void disenableAbsolute();
  void disenableDiag();
  void updateSaveName();
  void saveNameUpd();
  void normalise(const QString &newText);

protected:
  void saveInput();
};
}
}

#endif //MANTIDQTCUSTOMINTERFACES_EXCITATIONS_H_