#ifndef MANTIDQTCUSTOMINTERFACES_HOMER_H_
#define MANTIDQTCUSTOMINTERFACES_HOMER_H_

#include "MantidQtCustomInterfaces/ui_Homer.h"
#include "MantidQtCustomInterfaces/deltaECalc.h"
#include "MantidQtCustomInterfaces/Background.h"
#include "MantidQtMantidWidgets/pythonCalc.h"
#include "MantidQtMantidWidgets/MWRunFiles.h"
#include "MantidQtMantidWidgets/MWDiag.h"
#include "MantidKernel/PropertyWithValue.h"
#include "MantidQtAPI/UserSubWindow.h"
#include "MantidAPI/IAlgorithm.h"
#include <QString>
#include <QHash>
#include <QSettings>

namespace MantidQt
{
namespace CustomInterfaces
{
class Homer : public MantidQt::API::UserSubWindow
{
  Q_OBJECT

public:
  /// there has to be a default constructor but you can call it with a pointer to the thing that will take ownership of it
  Homer(QWidget *parent=NULL);

private:
  /// The form generated by Qt Designer
  Ui::Homer m_uiForm;
  /// points to the parent of this interface
  QWidget * const m_mantidplot;
  /// a pointer to the run file list widget
  MantidWidgets::MWRunFiles *m_runFilesWid;
  /// points to the file list widget that contains the White Beam Vanadium run
  MantidWidgets::MWRunFile *m_WBVWid;
  /// a pointer to the widget with the user controls for finding bad detectors
  MantidWidgets::MWDiag *m_diagPage;
  /// saves if the user specified their own name for the SPE output file
  bool m_saveChanged;
  /// A list of labels to use as validation markers
  QHash<const QWidget * const, QLabel *> m_validators;
  /// the values on the form the last time it was SUCCESSFULLY run accessed through this object
  QSettings m_prev;

  /// Initialize the layout
  virtual void initLayout();

  /// enable the run button if the results dialog has been closed and the python has stopped
  void pythonIsRunning(bool running = true);
  QString defaultName();
  std::string insertNumber(const std::string &filename, const int number);

  // set up the default values, signals and slots, tooltips, etc.
  QString setUpInstru();
  void setUpPage1();
  void page1FileWidgs();
  void page1setUpNormCom();
  QString removeStrMonitor(const QString &check);
  void page1Defaults();
  void page1Validators();
  void page1Tooltips();
  void setupValidator(QLabel *star);
  QLabel* newStar(const QGroupBox * const UI, int valRow, int valCol);
  void hideValidators();
  
  void setUpPage2();
  void setUpPage3();
  
  void enableSecondBox(bool toEnable);
  void setSettingsGroup(const QString &instrument);
  bool runScripts();
  void checkNoErrors(const deltaECalc &unitsConv);
  void saveSettings();
  QString openFileDia(const bool save, const QStringList &exts);
  signals:
    // these signals send data to the find bad detectors (diag) widget
    void MWDiag_updateWBV(const QString &);
	void MWDiag_updateTOFs(const double &, const double &);
	void MWDiag_sendRuns(const std::vector<std::string> &);
  private slots:
    ///run the algorithms that can be run with the data that users supplied
    void runClicked();
    //get rid of this one, no?
    void browseClicked(const QString buttonDis);
    /// open the wiki page for this interface in their browser
    void helpClicked();
    void disenableAbsolute();
    void disenableDiag();
    void runFilesChanged();
    void updateSaveName();
    void saveNameUpd();
    void updateWBV();
    void setupNormBoxes(const QString &newText);
    void bgRemoveClick();
    void bgRemoveReadSets();
    void instrSelectionChanged(const QString& prefix);
};
}
}

#endif // MANTIDQTCUSTOMINTERFACES_HOMER_H_