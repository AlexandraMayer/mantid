#ifndef MANTIDQTCUSTOMINTERFACES_SANSRUNWINDOW_H_
#define MANTIDQTCUSTOMINTERFACES_SANSRUNWINDOW_H_

//----------------------
// Includes
//----------------------
#include "MantidQtCustomInterfaces/ui_SANSRunWindow.h"
#include "MantidQtAPI/UserSubWindow.h"

#include <QMap>
#include <QHash>

#include "Poco/NObserver.h"

#include "MantidAPI/AnalysisDataService.h"

namespace Mantid
{
  namespace Kernel
  {
    class Logger;
  }
}

//---------------------------
// Qt Forward Declarations
//---------------------------
class QLineEdit;
class QSignalMapper;

namespace MantidQt
{
namespace CustomInterfaces
{
//-----------------------------
// Forward declaration
//-----------------------------


class SANSRunWindow : public MantidQt::API::UserSubWindow
{
  Q_OBJECT

public:
  /// Default Constructor
  SANSRunWindow(QWidget *parent = 0);
  /// Destructor
  ~SANSRunWindow();

signals:
  ///Indicate the state of the loaded data.
  void dataReadyToProcess(bool state);

private:
  /// Initialize the layout
  virtual void initLayout();

  /**@name Utility functions */
  //@{
  ///Read previous settings
  void readSettings();
  ///Save settings
  void saveSettings();
  /// Read the Python template that will perform the data reduction
  bool readPyReductionTemplate();
  /// Read the Python template that allows a view of the current mask
  bool readPyViewMaskTemplate();
  /// Load the user file specified in the text field
  bool loadUserFile();
  /// Construct the reduction code from the Python script template
  QString constructReductionCode();
  /// Read a limit line from the user file
  void readLimits(const QString & com_line);
  /// Get the component distances
  void componentDistances(const QString & wsname, double & lms, double & lsda, double & lsdb, double & lmm);
  /// Enable/disable user interaction
  void setProcessingState(bool running, int type);
  ///Check for workspace name in the AnalysisDataService
  bool workspaceExists(const QString & ws_name) const;
  ///Construct a QStringList of the currently loaded workspaces
  QStringList currentWorkspaceList() const;
  ///Is the user file loaded
  bool isUserFileLoaded() const;
  ///Does the raw file exist
  QString getRawFilePath(const QString & data_dir, const QString & run_no, const QString & ext) const;
  /// Create a mask string
  QString createMaskString() const;
  /// Setup the geometry details tab
  void setupGeometryDetails();
  /// Load the data by running the required Mantid algorithm
  int runLoadData(const QString & work_dir, const QString & run_no, const QString & ext, const QString & workspace);
  /// Parse a log information
  QHash<QString, double> loadDetectorLogs(const QString & work_dir, const QString & run_no);
  /// Handle a delete notification from Mantid
  void handleMantidDeleteWorkspace(Mantid::API::WorkspaceDeleteNotification_ptr p_dnf);
  // Format a double in a string with a specfied colour, format and precision
  QString formatDouble(double value, char format, int precision, const QString & colour);
  //@}

private slots:
  /// Select the data directory
  void selectDataDir();

  /// Select the user file
  void selectUserFile();

  /// Receive a load button click
  void handleLoadButtonClick();

  /// Reduce button clicked
  void handleReduceButtonClick(const QString & type);

  /// Plot button has been clicked
  void handlePlotButtonClick();

  /// Find centre button click handler
  void handleRunFindCentre();

  /// A ComboBox option change
  void handleStepComboChange(int new_index);

  /// Called when the show mask button has been clicked
  void handleShowMaskButtonClick();

  /// Handle a box being edited
  void runBoxEdited();

  ///Handle the change in instrument 
  void handleInstrumentChange(int);

  /// Handle a tab change
  void handleTabChange(int);

private:
  /// The form generated by Qt Designer
  Ui::SANSRunWindow m_uiForm;

  /// The data directory (as an absolute path)
  QString m_data_dir;

  /// The instrument definition directory
  QString m_ins_defdir;

  /// The last directory that was viewed
  QString m_last_dir;

  /// Is the user file loaded
  bool m_cfg_loaded;
  
  /// A map for quickly retrieving the different line edits
  QMap<int, QLineEdit*> m_run_no_boxes;

  /// A hash for quickly retrieving the different label fields
  QHash<int, QLabel*> m_period_lbls;

  /// A list of the full workspace names
  QHash<int, QString> m_workspace_names;

  /// The template to perform the LOQ data reduction
  QString m_pycode_loqreduce;

  // The template to view the current mask
  QString m_pycode_viewmask;

  // A signal mapper to pick up various button clicks
  QSignalMapper *m_reducemapper;

  // A flag to mark that a data reload is necessary
  bool m_run_changed;

  // An observer for a delete notification from Mantid
  Poco::NObserver<SANSRunWindow, Mantid::API::WorkspaceDeleteNotification> m_delete_observer;

  // A store of the log values for the sample run
  QHash<QString, double> m_logvalues;

  // A store of the mask file correction values for the sample run
  QHash<QString, double> m_maskcorrections;

  // A boolean indicating if scipy is installed
  bool m_havescipy;

  // A boolean indicating whether to show the scipy warning dialog
  bool m_scipy_warning;

  //A reference to a logger
  static Mantid::Kernel::Logger & g_log;
};

}
}

#endif //MANTIDQTCUSTOMINTERFACES_SANSRUNWINDOW_H_
