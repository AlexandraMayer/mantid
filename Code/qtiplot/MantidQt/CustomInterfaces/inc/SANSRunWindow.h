#ifndef MANTIDQTCUSTOMINTERFACES_SANSRUNWINDOW_H_
#define MANTIDQTCUSTOMINTERFACES_SANSRUNWINDOW_H_

//----------------------
// Includes
//----------------------
#include "MantidQtCustomInterfaces/ui_SANSRunWindow.h"
#include "MantidQtAPI/UserSubWindow.h"

#include <QMap>
#include <QHash>

//---------------------------
// Qt Forward Declarations
//---------------------------
class QLineEdit;

namespace MantidQt
{
namespace CustomInterfaces
{
//-----------------------------
// Forward declaration
//-----------------------------


class SANSRunWindow : public MantidQt::API::UserSubWindow
{
  Q_OBJECT

public:
  /// Default Constructor
  SANSRunWindow(QWidget *parent = 0);
  /// Destructor
  ~SANSRunWindow();

signals:
  ///Indicate the state of the loaded data.
  void dataReadyToProcess(bool state);

private:
  /// Initialize the layout
  virtual void initLayout();

  /**@name Utility functions */
  //@{
  ///Read previous settings
  void readSettings();

  ///Save settings
  void saveSettings();

  /// Read the Python template that will perform the data reduction
  bool readPyReductionTemplate();

  /// Read the Python template that allows a view of the current mask
  bool readPyViewMaskTemplate();
  
  /// Load the user file specified in the text field
  bool loadUserFile();

  /// Read a limit line from the user file
  void readLimits(const QString & com_line);
  
  /// Enable/disable user interaction
  void setProcessingState(bool running);
  
  ///Check for workspace name in the AnalysisDataService
  bool workspaceExists(const QString & ws_name) const;

  ///Is the user file loaded
  bool isUserFileLoaded() const;

  ///Does the raw file exist
  QString getRawFilePath(const QString & data_dir, const QString & prefix, const QString & run_no) const;

  /// Create a mask string
  QString createMaskString() const;
  //@}

  /**@name Python code utility commands */
  //@{
  /// Construct a LoadRaw Python command
  QString writeLoadRawCmd(const QString & filename, const QString & workspace, const QString & spec_min = QString(), 
			  const QString & spec_max = QString(), const QString & spec_list = QString(), 
			  const QString & cache_opt = QString());
  //@}
			   
private slots:
  /// Select the data directory
  void selectDataDir();

  /// Select the user file
  void selectUserFile();

  /// Receive a load button click
  void handleLoadButtonClick();

  /// Reduce button clicked
  void handleReduceButtonClick();

  /// Plot button has been clicked
  void handlePlotButtonClick();

  /// A ComboBox option change
  void handleStepComboChange(int new_index);

  /// Called when the show mask button has been clicked
  void handleShowMaskButtonClick();

private:
  /// The form generated by Qt Designer
  Ui::SANSRunWindow m_uiForm;

  /// The data directory (as an absolute path)
  QString m_data_dir;

  /// The instrument definition directory
  QString m_ins_defdir;

  /// The last directory that was viewed
  QString m_last_dir;

  /// Is the user file loaded
  bool m_cfg_loaded;
  
  /// A map for quickly retrieving the different line edits
  QMap<int, QLineEdit*> m_run_no_boxes;

  /// A hash for quickly retrieving the different label fields
  QHash<int, QLabel*> m_period_lbls;

  /// The template to perform the LOQ data reduction
  QString m_pycode_loqreduce;

  // The template to view the current mask
  QString m_pycode_viewmask;
};

}
}

#endif //MANTIDQTCUSTOMINTERFACES_SANSRUNWINDOW_H_
