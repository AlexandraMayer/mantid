#ifndef MANTIDQTCUSTOMINTERFACES_INDIRECTANALYSIS_H_
#define MANTIDQTCUSTOMINTERFACES_INDIRECTANALYSIS_H_

//----------------------
// Includes
//----------------------
#include "MantidQtCustomInterfaces/ui_indirectAnalysis.h"
#include "MantidQtAPI/UserSubWindow.h"

#include <QIntValidator>
#include <QDoubleValidator>

namespace MantidQt
{
  namespace CustomInterfaces
  {
    class indirectAnalysis : public MantidQt::API::UserSubWindow
    {
      Q_OBJECT

    public:
      /// The name of the interface as registered into the factory
      static std::string name() { return "indirectAnalysis"; }

    public:
      /// Default Constructor
      indirectAnalysis(QWidget *parent = 0);

    private:
      /// Initialize the layout
      virtual void initLayout();
      /// init python-dependent sections
      virtual void initLocalPython();

      bool validateFury();
      bool validateElwin();
      bool validateSlice();
      bool validateMsd();
      bool validateAbsorption();

      void clearSettings();

      private slots:
        void instrumentChanged(int index);
        void analyserSelected(int index);
        void reflectionSelected(int index);

        void furyRun();

        void elwinRun();

        void sliceRun();

        void msdRun();

        void absorptionRun();
        void absorptionShape(int index);

    private:
      //The form generated by Qt Designer
      Ui::indirectAnalysis m_uiForm;
      QString m_dataDir;

      QIntValidator *m_valInt;
      QDoubleValidator *m_valDbl;
    };
  }
}
#endif //MANTIDQTCUSTOMINTERFACES_INDIRECTANALYSIS_H_