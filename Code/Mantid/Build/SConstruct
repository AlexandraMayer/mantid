#For Framework

import os
import platform
import sys

from socket import gethostname

#get libraries and the library directories
libDirList = ['../', '.']
libList = ['python' + sys.version[0:3]]
cflags = []
dirList = []
cppPaths = []

dirpath=os.listdir("../")
while(len(dirpath)):
	try:
		item=dirpath.pop(0)
		for file in os.listdir("../"+item):
			fullPath="../"+item+"/"+file
			if (item!='Geometry'):
				if (file=="inc"):
					cppPaths.append(fullPath)
				elif (file=="src"):
					dirList.append(item)
					print "PATH == ",item
				elif (os.path.isdir(fullPath) and (not file.endswith('svn'))
				and (not file.endswith('test'))):
					dirpath.append(fullPath[3:])	
	except:
		pass

if os.name == 'nt':
	# assume this is Windows
	libDirList.append('../../Third_Party/lib/win32/')
	libDir = '../../Third_Party/lib/win32/'
	cflags = ['-W3','/EHsc', '/MTd', '/ZI', '/TP', '/DWIN32', '/D_DEBUG', '/D_WINDOWS', '/DPOCO_DLL', '/DWINVER=0x0500']
	
	for file in os.listdir(libDir):
		if file.endswith('.dll'):
			libList.append(file.replace('.dll',''))
	
else:
	#so this must be posix
	boost_path = ''
	poco_path = ''

	#Get paths
	f=open('Scons_Linux.conf', 'r')
	
	for ln in f:
		if ln.startswith('BOOST_ROOT'):
			boost_path=ln[11:].strip('\n')
			print 'Boost root = ' + boost_path
		elif ln.startswith('POCO_ROOT'):
			poco_path=ln[10:].strip('\n')
			print 'Poco root = ' + poco_path
	
	f.close()
	
	cflags = ['-Wall', '-fPIC']
	cppPaths.append('/usr/include/python' + sys.version[0:3])
	cppPaths.append(poco_path + 'Foundation/include')
	cppPaths.append(poco_path + 'Util/include')

#GET LIST OF CPPS
codeFolder = '/src'
listCpps = []
pathToRoot = '../'

for fname in dirList:
	print "dir:",fname 
	if os.path.isdir(pathToRoot + fname):
		if fname != '.svn' and fname != 'LinuxBuildScripts' and fname != 'Build' and fname != 'Geometry':
			#does folder contain /src?
			if os.path.exists(pathToRoot + fname + codeFolder):
				files = os.listdir(pathToRoot + fname + codeFolder)
				for file in files:
					if file.endswith('.cpp'):
						listCpps.append(pathToRoot + fname + codeFolder + '/' +  file)
			
			
		

# set header include paths
env = Environment(CPPPATH=cppPaths)
env.Append( CCFLAGS = cflags)

#BUILD CODE
env.SharedLibrary('Mantid', listCpps, LIBS=[ ], LIBPATH=[ ], RPATH=libDirList)

