#For Framework

import os
import platform
import sys

from socket import gethostname

#get libraries and the library directories
libDirList = ['../', '.']
libList = ['python' + sys.version[0:3]]
print libList
cflags = []

cppPaths = ['../../Third_Party/include/']
dirpath=os.listdir("..")
for item in dirpath:
        try:
            for file in os.listdir("../"+item):
                if (file=="inc" or file=="auxinc"):
                    cppPaths.append("../"+item+"/"+file)
        except:
            pass
        

if os.name == 'nt':
	# assume this is Windows
	libDirList.append('../../Third_Party/lib/win32/')
	libDir = '../../Third_Party/lib/win32/'
	cflags = ['-W3','/EHsc', '/MTd', '/ZI', '/TP', '/DWIN32', '/D_DEBUG', '/D_WINDOWS', '/DPOCO_DLL', '/DWINVER=0x0500']
	
	for file in os.listdir(libDir):
		if file.endswith('.dll'):
			libList.append(file.replace('.dll',''))
	
else:
	#so this must be posix
	#libDirList.append('/usr/lib/gcc/i386-redhat-linux/3.4.6/')
	#libDirList.append('/usr/lib/gcc-lib/i386-redhat-linux/3.2.3/')
	cflags = ['-Wall', '-fPIC']
	cppPaths.append('/usr/include/python' + sys.version[0:3])
	
	#libDir =''
	
	if platform.architecture()[0].startswith('64bit'):
		libDirList.append('../../Third_Party/lib/linux64/')
		libDir = '../../Third_Party/lib/linux64/'
		
	else:
		libDirList.append('../../Third_Party/lib/linux32/')
		libDir = '../../Third_Party/lib/linux32/'
	
	for file in os.listdir(libDir):
		if file.endswith('.so'):
			libList.append(file.replace('.so','')[3:])



#GET LIST OF CPPS
codeFolder = '/src'
listCpps = []
pathToRoot = '../'

#get list of directories in trunk
dirList = os.listdir(pathToRoot)

for fname in dirList:
	if os.path.isdir(pathToRoot + fname):
		if fname != '.svn' and fname != 'LinuxBuildScripts' and fname != 'Build' and fname!='Geometry':
			#does folder contain /src?
			if os.path.exists(pathToRoot + fname + codeFolder):
				files = os.listdir(pathToRoot + fname + codeFolder)
				for file in files:
					if file.endswith('.cpp'):
						listCpps.append(pathToRoot + fname + codeFolder + '/' +  file)
			
			
		

# set header include paths
env = Environment(CPPPATH=cppPaths)
env.Append( CCFLAGS = cflags)

#BUILD CODE
env.SharedLibrary('Mantid', listCpps, LIBS=libList, LIBPATH=libDirList, RPATH=libDirList)
