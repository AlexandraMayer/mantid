#For Tests

import os
import platform
import sys

from socket import gethostname

libDirList = []

libList = ['Mantid', 'Get', 'g2c', 'python' + sys.version[0:3]]
cflags = []
cppPaths=[]

#get include paths for our code
cppPaths = []

dirpath=os.listdir("../../")
while(len(dirpath)):
	try:
		item=dirpath.pop(0)
		for file in os.listdir("../../"+item):
			fullPath="../../"+item+"/"+file
			if (file=="inc"):
					cppPaths.append(fullPath)
	except:
		pass

if os.name == 'nt':
	# assume this is Windows
	libDirList.append('../../../Third_Party/lib/win32/')
	cflags = ['-W3','/EHsc', '/MTd', '/ZI', '/TP', '/DWIN32', '/D_DEBUG', '/D_WINDOWS', '/DPOCO_DLL', '/DWINVER=0x0500']
else:

	boost_path = ''
	poco_path = ''

	#Get paths
	f=open('../Scons_Linux.conf', 'r')
	
	for ln in f:
		if ln.startswith('BOOST_ROOT'):
			boost_path=ln[11:].strip('\n')
			print 'Boost root = ' + boost_path
		elif ln.startswith('POCO_ROOT'):
			poco_path=ln[10:].strip('\n')
			print 'Poco root = ' + poco_path
			
		
	f.close()
	
	if platform.architecture()[0].startswith('64bit'):
		libDirList.append(boost_path + 'lib')
		libDirList.append(poco_path + 'lib/Linux/i686/')
		libDirList.append(os.path.abspath('../../../Third_Party/lib/linux64/'))
		libDirList.append(os.path.abspath('../'))
		libDirList.append('/usr/lib/gcc/i386-redhat-linux/3.4.6/')
	
	elif platform.architecture()[0].startswith('32bit'):
		libDirList.append(boost_path + 'lib')
		libDirList.append(poco_path + 'lib/Linux/i686/')
		libDirList.append(os.path.abspath('../../../Third_Party/lib/linux32/'))
		libDirList.append(os.path.abspath('../'))
		libDirList.append('/usr/lib/gcc/i386-redhat-linux/3.4.6/')

	cppPaths.append('/usr/include/python' + sys.version[0:sys.version.find(' ')])
	cppPaths.append(poco_path +'Foundation/include/Poco/')
	cppPaths.append(boost_path)
		
	libList.append('boost_filesystem-gcc41')
	libList.append('PocoUtil')
	libList.append('PocoFoundation')
	libList.append('PocoXML')
	libList.append('boost_python-gcc41')
	libList.append('boost_regex-gcc41')
	
	print libDirList


#GET LIST OF TESTS
path = '../../'
testfolder = '/test'

testsToRun = []

#get list of directories in trunk
dirList = os.listdir(path)

for fname in dirList:
	if os.path.isdir(path + fname):
		if fname != '.svn' and fname != 'LinuxBuildScripts' and fname != 'Build'  and fname != 'Geometry':
			#does folder contain /test?
			if os.path.exists(path + fname + testfolder):
				files = os.listdir(path + fname + testfolder)
				for file in files:
					if file.endswith('.h'):
						testsToRun.append('../' + fname + testfolder + '/' +  file + '\n')	

f=open('../TestsToRun', 'w')
f.writelines(testsToRun)
f.close()

#BUILD
normPath = []

for dir in libDirList:
	normPath.append(os.path.abspath(dir))

env=Environment(CPPPATH=cppPaths)
env.Append( CCFLAGS = cflags)

f=open('../TestsToRun', 'r')

for test in f:
	doth = '../' + test.strip() 
	temp= test.split('/')
	dotcpp = temp[-1].strip().rstrip('.h') + '.cpp'
	os.popen('cxxtestgen.pl --error-printer -o ' + dotcpp + ' ' + doth)
	env.Program(dotcpp, LIBS=libList, LIBPATH=libDirList)





