#For Tests

import os
import platform
import sys

def procHeaderPath(ln,keyname,out):
  ## Strips the header components if in existance and returns:
  ## Yes this is ugly repetition in a loop.
  if ln.startswith(keyname):
    out=ln[len(keyname)+1:].strip('\n')
    if out[-1]!='/':
      out+='/'
  return out

def procHeader(ln,keyname,out):
  ## Strips the header components if in existance and returns:
  ## Yes this is ugly repetition in a loop.
  if ln.startswith(keyname):
    out=ln[len(keyname)+1:].strip('\n')
  return out

from socket import gethostname
  
cflags = []
cppPaths=[]
libDirList = []

#get include paths for our code
cppPaths = []

dirpath=os.listdir("../../")
while(len(dirpath)):
  try:
    item=dirpath.pop(0)
    for file in os.listdir("../../"+item):
	fullPath="../../"+item+"/"+file
	if (file=="inc"):
		cppPaths.append(fullPath)
  except:
    pass


libList = ['Mantid']

if os.name == 'nt':
  # assume this is Windows
  libList.append(['Get', 'g2c', 'python' + sys.version[0:3] ])	
  libDirList.append('../../../Third_Party/lib/win32/')
  cflags = ['-W3','/EHsc', '/MTd', '/ZI', '/TP', '/DWIN32', '/D_DEBUG', '/D_WINDOWS', '/DPOCO_DLL', '/DWINVER=0x0500']

else:

  boost_path = ''
  poco_path = ''
  boost_append=''
  fortran_type=''
  third_party=''

  #Get paths
  f=open('../Scons_Linux.conf', 'r')

  for ln in f:
    boost_path=procHeaderPath(ln,'BOOST_ROOT',boost_path)
    poco_path=procHeaderPath(ln,'POCO_ROOT',poco_path)
    boost_append=procHeader(ln,'BOOST_APPEND',boost_append)
    fortran_type=procHeader(ln,'FORTRAN',fortran_type)
    third_party=procHeader(ln,'THIRD',third_party)
    
  print "POCO_ROOT: ",poco_path
  print "BOOST_ROOT: ",boost_path
  print "BOOST_APPEND: ",boost_append
  print third_party
  
  f.close()

  if (len(third_party)):
    libDirList.append(os.path.abspath(third_party))
  libDirList.append(os.path.abspath('../'))
  libDirList.append(boost_path)
  libDirList.append(poco_path + 'lib/Linux/i686/')

  cppPaths.append('/usr/include/python' + sys.version[0:sys.version.find(' ')])
  cppPaths.append(poco_path +'Foundation/include/Poco/')
  cppPaths.append(boost_path)

  libList = ['Mantid', 'python' + sys.version[0:3]]


  libList.append('PocoUtil')
  libList.append('PocoFoundation')
  libList.append('PocoXML')
  libList.append('boost_python'+boost_append)
  libList.append('boost_filesystem'+boost_append)
  libList.append('boost_regex'+boost_append)

  if (fortran_type=='gfortran'):
    libList.append('gfortran')
    libList.append('gfortranbegin')
  else:
    libDirList.append('/usr/lib/gcc/i386-redhat-linux/3.4.6/')
    libDirList.append('/usr/lib/gcc/i686-pc-linux-gnu/3.4.6/')
    libList.append('Get')
    libList.append('g2c')


  print libDirList


#GET LIST OF TESTS
path = '../../'
testfolder = '/test'

testsToRun = []

#get list of directories in trunk
dirList = os.listdir(path)

for fname in dirList:
  if os.path.isdir(path + fname):
    if fname != '.svn' and fname != 'LinuxBuildScripts' and fname != 'Build'  and fname != 'Geometry':
      #does folder contain /test?
      if os.path.exists(path + fname + testfolder):
        files = os.listdir(path + fname + testfolder)
        for file in files:
          if file.endswith('.h'):
            testsToRun.append('../' + fname + testfolder + '/' +  file + '\n')	

f=open('../TestsToRun', 'w')
f.writelines(testsToRun)
f.close()

#BUILD
normPath = []

for dir in libDirList:
  normPath.append(os.path.abspath(dir))

env=Environment(CPPPATH=cppPaths)
env.Append( CCFLAGS = cflags)

f=open('../TestsToRun', 'r')

for test in f:
  doth = '../' + test.strip() 
  temp= test.split('/')
  dotcpp = temp[-1].strip().rstrip('.h') + '.cpp'
  os.popen('cxxtestgen.pl --error-printer -o ' + dotcpp + ' ' + doth)
  env.Program(dotcpp, LIBS=libList, LIBPATH=libDirList, RPATH=libDirList)





