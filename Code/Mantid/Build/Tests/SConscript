#For Tests

import os
import platform
import sys

import MantidBuild

Import('env')

libList = env['MYLIBLIST']
libDirList = env['MYLIBDIRLIST']
cppPath = env['CPPPATH']
myenv = env.Clone()
myenv.Append(CPPDEFINES=[('IN_MANTID_TESTS',1)])
myenv.Append(LIBS=libList)
myenv.Append(LIBPATH=libDirList+['../../Bin/Shared'])
myenv.Append(CPPPATH=cppPath + ['../../../Third_Party/src/cxxtest'])

#GET LIST OF TESTS
path = '../../'
testfolder = '/test'

testsToRun = []

#get list of directories in trunk
dirList = os.listdir(path)

#Find Cxxtestgen
cxxtestgen = 'python ../../../Third_Party/src/cxxtest/cxxtestgen.py'

for fname in dirList:
  # Disable tests that are to do with multi-dimensional objects/algorithms until something useful is there
  if fname.startswith('MD'):
    continue
  if os.path.isdir(path + fname):
      #does folder contain /test?
      fullpath=path + fname + testfolder
      if os.path.exists(fullpath) and len(os.listdir(fullpath)) > 0:
        #generate the test cpp file
        os.popen(cxxtestgen + ' --runner=MantidPrinter -o ' + fname + '.cpp '+ path + fname + testfolder +'/*.h')
        #If there are not tests then there will be no cpp file created
        if os.path.exists(fname + ".cpp"):
          testsToRun.append(fname)

#BUILD the tests
if platform.system() == 'Darwin':
	myenv.Append(LIBS='python' + sys.version[0:3])
for test in testsToRun:
  temp= test.split('/')
  myenv.Append(CPPPATH='#/'+test+'/inc')
  myenv.Append(LIBS='Mantid'+test)
  dotcpp = test + '.cpp'
  dotpdb = test + '.pdb'
  myenv.Program([dotcpp], PDB=dotpdb)

