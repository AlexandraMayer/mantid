#For Tests

import os
import platform
import sys

import MantidBuild

Import('env')
#shared_list = env['SHARED_LIST']
#static_list = env['STATIC_LIST']

libList = env['MYLIBLIST']
libDirList = env['MYLIBDIRLIST']
myenv = env.Clone()
myenv.Append(CPPDEFINES=[('IN_MANTID_TESTS',1)])
myenv.Append(LIBS=libList)
myenv.Append(LIBPATH=libDirList+['../../Bin/Shared'])

#GET LIST OF TESTS
path = '../../'
testfolder = '/test'

testsToRun = []

#get list of directories in trunk
dirList = os.listdir(path)

for fname in dirList:
  if os.path.isdir(path + fname):
    if fname != '.svn' and fname != 'LinuxBuildScripts' and fname != 'Build':
      #does folder contain /test?
      if os.path.exists(path + fname + testfolder):
        files = os.listdir(path + fname + testfolder)
        for file in files:
          if file.endswith('.h'):
              testsToRun.append('../' + fname + testfolder + '/' +  file + '\n')	

f=open('../TestsToRun', 'w')
f.writelines(testsToRun)
f.close()

#BUILD

f=open('../TestsToRun', 'r')

for test in f:
  doth = '../' + test.strip() 
  temp= test.split('/')
  dotcpp = temp[-1].strip().rstrip('.h') + '.cpp'
  dotpdb = temp[-1].strip().rstrip('.h') + '.pdb'
  os.popen('cxxtestgen.py --error-printer -o ' + dotcpp + ' ' + doth)
  if os.name == 'nt':
	myenv.Program([dotcpp],LIBS=env['MYLIBLIST'], LIBPATH=env['MYLIBDIRLIST'], PDB=dotpdb)
  else:
	myenv.Program([dotcpp])

f.close()
