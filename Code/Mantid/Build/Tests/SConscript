import os
import platform

from socket import gethostname

currPath = os.getcwd() + '/'

libDirList = [currPath + '../']
libList = ['Mantid', 'Get', 'g2c']

if os.name == 'nt':
	# assume this is nt
	libDirList.append(currPath + '../../../Third_Party/lib/win32/')
else:
	#so this must be posix
	libDirList.append('/usr/lib/gcc/i386-redhat-linux/3.4.6/')
	libDirList.append('/usr/lib/gcc-lib/i386-redhat-linux/3.2.3/')
	
	libDir =''
	
	if platform.architecture()[0].startswith('64bit'):
		libDirList.append(currPath + '../../../Third_Party/lib/linux64/')
		libDir = currPath + '../../../Third_Party/lib/linux64/'
		
	else:
		libDirList.append(currPath + '../../../Third_Party/lib/linux32/')
		libDir = currPath + '../../../Third_Party/lib/linux32/'
	
	for file in os.listdir(libDir):
		if file.endswith('.so'):
			libList.append(file.rstrip('.so').lstrip('lib'))

#GET LIST OF TESTS
path = '../../'
testfolder = '/test'

testsToRun = []

#get list of directories in trunk
dirList = os.listdir(path)

for fname in dirList:
	if os.path.isdir(path + fname):
		if fname != '.svn' and fname != 'LinuxBuildScripts' and fname != 'Build':
			#does folder contain /test?
			if os.path.exists(path + fname + testfolder):
				files = os.listdir(path + fname + testfolder)
				for file in files:
					if file.endswith('.h'):
						testsToRun.append('../' + fname + testfolder + '/' +  file + '\n')
			
			
		

f=open('../TestsToRun', 'w')
f.writelines(testsToRun)
f.close()

#BUILD
normPath = []

for dir in libDirList:
	normPath.append(os.path.abspath(dir))

env=Environment()
env.Append( CCFLAGS = '-Wall')

f=open('../TestsToRun', 'r')


print normPath

for test in f:
	doth = '../' + test.strip() 
	temp= test.split('/')
	dotcpp = temp[-1].strip().rstrip('.h') + '.cpp'
	os.popen('cxxtestgen.pl --error-printer -o ' + dotcpp + ' ' + doth)
	env.Program(dotcpp, LIBS=libList, LIBPATH=normPath, RPATH=normPath)
