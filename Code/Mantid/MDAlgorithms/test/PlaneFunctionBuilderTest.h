#ifndef PLANE_FUNCTION_BUILDER_TEST_H_
#define PLANE_FUNCTION_BUILDER_TEST_H_

#include <cxxtest/TestSuite.h>
#include <vector>
#include <memory>
#include "PlaneFunctionBuilder.h"
#include "NormalParameter.h"
#include "OriginParameter.h"
#include "InvalidParameter.h"

class PlaneFunctionBuilderTest : public CxxTest::TestSuite
{
public:

    void testCreate()
    {
        using namespace Mantid::MDAlgorithms;
        using namespace Mantid::API;

        PlaneFunctionBuilder builder;
        builder.addOriginParameter(OriginParameter(1, 2, 3));
        builder.addNormalParameter(NormalParameter(4, 5, 6));
        std::auto_ptr<ImplicitFunction> impFunc = builder.create();
        PlaneImplicitFunction * planeFunc = dynamic_cast<PlaneImplicitFunction*>(impFunc.get());

        TSM_ASSERT("The function generated by the builder is not a plane function type.", NULL != planeFunc);
        TSM_ASSERT_EQUALS("Origin x value not passed/built in correctly.", 1, planeFunc->getOriginX());
        TSM_ASSERT_EQUALS("Origin y value not passed/built in correctly.", 2, planeFunc->getOriginY());
        TSM_ASSERT_EQUALS("Origin z value not passed/built in correctly.", 3, planeFunc->getOriginZ());
        TSM_ASSERT_EQUALS("Normal x value not passed/built in correctly.", 4, planeFunc->getNormalX());
        TSM_ASSERT_EQUALS("Normal y value not passed/built in correctly.", 5, planeFunc->getNormalY());
        TSM_ASSERT_EQUALS("Normal z value not passed/built in correctly.", 6, planeFunc->getNormalZ());
    }

    void testCreateWithoutNormalThrows()
    {
        using namespace Mantid::MDAlgorithms;

        PlaneFunctionBuilder builder;
        builder.addOriginParameter(OriginParameter(0, 0, 0));
        TSM_ASSERT_THROWS("Should have thrown invalid_argument exception as normal parameter is missing.",  builder.create(), std::invalid_argument );
    }

    void testCreateWithoutOriginThrows()
    {
        using namespace Mantid::MDAlgorithms;

        PlaneFunctionBuilder builder;
        builder.addNormalParameter(NormalParameter(0, 0, 0));
        TSM_ASSERT_THROWS("Should have thrown invalid_argument exception as origin parameter is missing.",  builder.create(), std::invalid_argument );
    }

    //If the origin parameter is provided more than once, the latest values should be adopted.
    void testOverwriteOrigin()
    {
        using namespace Mantid::MDAlgorithms;
        using namespace Mantid::API;

        PlaneFunctionBuilder builder;

        builder.addOriginParameter(OriginParameter(1, 2, 3));
		//Overwrite origin
        builder.addOriginParameter(OriginParameter(4, 5, 6));
        builder.addNormalParameter(NormalParameter(0, 0, 0));
        std::auto_ptr<ImplicitFunction> impFunc = builder.create();
        PlaneImplicitFunction * planeFunc = dynamic_cast<PlaneImplicitFunction*>(impFunc.get());

        TSM_ASSERT_EQUALS("Origin x value not overwritten with newer value.", 4, planeFunc->getOriginX());
        TSM_ASSERT_EQUALS("Origin y value not overwritten with newer value.", 5, planeFunc->getOriginY());
        TSM_ASSERT_EQUALS("Origin z value not overwritten with newer value.", 6, planeFunc->getOriginZ());
    }

    //If the normal parameter is provided more than once, the latest values should be adopted.
    void testOverwiteNormal()
    {
        using namespace Mantid::MDAlgorithms;
        using namespace Mantid::API;

        PlaneFunctionBuilder builder;

        builder.addNormalParameter(NormalParameter(1, 2, 3));
		//Overwrite normal
        builder.addNormalParameter(NormalParameter(4, 5, 6));

        builder.addOriginParameter(OriginParameter(0, 0, 0));
        std::auto_ptr<ImplicitFunction> impFunc = builder.create();
        PlaneImplicitFunction * planeFunc = dynamic_cast<PlaneImplicitFunction*>(impFunc.get());

        TSM_ASSERT("The function generated by the builder is not a plane function type.", NULL != planeFunc);
        TSM_ASSERT_EQUALS("Normal x value not passed/built in correctly.", 4, planeFunc->getNormalX());
        TSM_ASSERT_EQUALS("Normal y value not passed/built in correctly.", 5, planeFunc->getNormalY());
        TSM_ASSERT_EQUALS("Normal z value not passed/built in correctly.", 6, planeFunc->getNormalZ());
    }	
};

#endif