#ifndef PLANE_FUNCTION_BUILDER_TEST_H_
#define PLANE_FUNCTION_BUILDER_TEST_H_

#include <cxxtest/TestSuite.h>
#include <vector>
#include <memory>
#include "PlaneFunctionBuilder.h"
#include "NormalParameter.h"
#include "OriginParameter.h"
#include "InvalidParameter.h"

class PlaneFunctionBuilderTest: public CxxTest::TestSuite
{
public:

  void testCreate()
  {
    using namespace Mantid::MDAlgorithms;
    using namespace Mantid::API;

    PlaneFunctionBuilder builder;
    OriginParameter o(1, 2, 3);
    NormalParameter n(4, 5, 6);
    builder.addOriginParameter(o);
    builder.addNormalParameter(n);
    std::auto_ptr<ImplicitFunction> impFunc = builder.create();
    PlaneImplicitFunction * planeFunc = dynamic_cast<PlaneImplicitFunction*> (impFunc.get());

    TSM_ASSERT("The function generated by the builder is not a plane function type.", NULL != planeFunc);
    TSM_ASSERT_EQUALS("Origin x value not passed/built in correctly.", 1, planeFunc->getOriginX());
    TSM_ASSERT_EQUALS("Origin y value not passed/built in correctly.", 2, planeFunc->getOriginY());
    TSM_ASSERT_EQUALS("Origin z value not passed/built in correctly.", 3, planeFunc->getOriginZ());
    TSM_ASSERT_EQUALS("Normal x value not passed/built in correctly.", 4, planeFunc->getNormalX());
    TSM_ASSERT_EQUALS("Normal y value not passed/built in correctly.", 5, planeFunc->getNormalY());
    TSM_ASSERT_EQUALS("Normal z value not passed/built in correctly.", 6, planeFunc->getNormalZ());
  }

  void testCreateWithoutNormalThrows()
  {
    using namespace Mantid::MDAlgorithms;

    PlaneFunctionBuilder builder;
    OriginParameter origin(0, 0, 0);
    builder.addOriginParameter(origin);
    TSM_ASSERT_THROWS("Should have thrown invalid_argument exception as normal parameter is missing.",
        builder.create(), std::invalid_argument);
  }

  void testCreateWithoutOriginThrows()
  {
    using namespace Mantid::MDAlgorithms;

    PlaneFunctionBuilder builder;
    NormalParameter normal(4, 5, 6);
    builder.addNormalParameter(normal);
    TSM_ASSERT_THROWS("Should have thrown invalid_argument exception as origin parameter is missing.",
        builder.create(), std::invalid_argument);
  }

  //If the origin parameter is provided more than once, the latest values should be adopted.
  void testOverwriteOrigin()
  {
    using namespace Mantid::MDAlgorithms;
    using namespace Mantid::API;

    PlaneFunctionBuilder builder;

    OriginParameter origin1(1, 2, 3);
    OriginParameter origin2(4, 5, 6);
    NormalParameter normal(0, 0, 0);
    builder.addOriginParameter(origin1);
    //Overwrite origin
    builder.addOriginParameter(origin2);
    builder.addNormalParameter(normal);
    std::auto_ptr<ImplicitFunction> impFunc = builder.create();
    PlaneImplicitFunction * planeFunc = dynamic_cast<PlaneImplicitFunction*> (impFunc.get());

    TSM_ASSERT_EQUALS("Origin x value not overwritten with newer value.", 4, planeFunc->getOriginX());
    TSM_ASSERT_EQUALS("Origin y value not overwritten with newer value.", 5, planeFunc->getOriginY());
    TSM_ASSERT_EQUALS("Origin z value not overwritten with newer value.", 6, planeFunc->getOriginZ());
  }

  //If the normal parameter is provided more than once, the latest values should be adopted.
  void testOverwiteNormal()
  {
    using namespace Mantid::MDAlgorithms;
    using namespace Mantid::API;

    PlaneFunctionBuilder builder;

    OriginParameter origin(1, 2, 3);
    NormalParameter normal1(1, 2, 3);
    NormalParameter normal2(4, 5, 6);
    builder.addNormalParameter(normal1);
    //Overwrite normal
    builder.addNormalParameter(normal2);
    builder.addOriginParameter(origin);
    std::auto_ptr<ImplicitFunction> impFunc = builder.create();
    PlaneImplicitFunction * planeFunc = dynamic_cast<PlaneImplicitFunction*> (impFunc.get());

    TSM_ASSERT("The function generated by the builder is not a plane function type.", NULL != planeFunc);
    TSM_ASSERT_EQUALS("Normal x value not passed/built in correctly.", 4, planeFunc->getNormalX());
    TSM_ASSERT_EQUALS("Normal y value not passed/built in correctly.", 5, planeFunc->getNormalY());
    TSM_ASSERT_EQUALS("Normal z value not passed/built in correctly.", 6, planeFunc->getNormalZ());
  }
};

#endif
