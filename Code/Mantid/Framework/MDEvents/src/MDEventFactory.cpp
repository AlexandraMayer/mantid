/* Auto-generated by '/home/8oz/Code/Mantid/Code/Mantid/Framework/MDEvents/src/generate_mdevent_declarations.py' 
 *     on 2011-02-25 10:55:31.519573
 *
 * DO NOT EDIT!
 */ 
 
#include <boost/shared_ptr.hpp>
#include <MantidMDEvents/MDEventFactory.h>
#include <MantidMDEvents/IMDEventWorkspace.h>
#include <MantidMDEvents/MDEventWorkspace.h>
 
#include "MantidMDEvents/MDBox.h"
#include "MantidMDEvents/MDEventWorkspace.h"
#include "MantidMDEvents/MDGridBox.h"
#include "MantidMDEvents/MDEvent.h"
#include "MantidMDEvents/IMDBox.h"

// We need to include the .cpp files so that the declarations are picked up correctly. Weird, I know. 
// See http://www.parashift.com/c++-faq-lite/templates.html#faq-35.13 
#include "MDBox.cpp"
#include "MDEventWorkspace.cpp"
#include "MDGridBox.cpp"


namespace Mantid
{
namespace MDEvents
{
// Instantiations for MDEvent
template DLLExport class MDEvent<1>;
template DLLExport class MDEvent<2>;
template DLLExport class MDEvent<3>;
template DLLExport class MDEvent<4>;
template DLLExport class MDEvent<5>;
template DLLExport class MDEvent<6>;
template DLLExport class MDEvent<7>;
template DLLExport class MDEvent<8>;
template DLLExport class MDEvent<9>;


// Instantiations for MDBox
template DLLExport class MDBox<MDEvent<1>, 1>;
template DLLExport class MDBox<MDEvent<2>, 2>;
template DLLExport class MDBox<MDEvent<3>, 3>;
template DLLExport class MDBox<MDEvent<4>, 4>;
template DLLExport class MDBox<MDEvent<5>, 5>;
template DLLExport class MDBox<MDEvent<6>, 6>;
template DLLExport class MDBox<MDEvent<7>, 7>;
template DLLExport class MDBox<MDEvent<8>, 8>;
template DLLExport class MDBox<MDEvent<9>, 9>;


// Instantiations for IMDBox
template DLLExport class IMDBox<MDEvent<1>, 1>;
template DLLExport class IMDBox<MDEvent<2>, 2>;
template DLLExport class IMDBox<MDEvent<3>, 3>;
template DLLExport class IMDBox<MDEvent<4>, 4>;
template DLLExport class IMDBox<MDEvent<5>, 5>;
template DLLExport class IMDBox<MDEvent<6>, 6>;
template DLLExport class IMDBox<MDEvent<7>, 7>;
template DLLExport class IMDBox<MDEvent<8>, 8>;
template DLLExport class IMDBox<MDEvent<9>, 9>;


// Instantiations for MDGridBox
template DLLExport class MDGridBox<MDEvent<1>, 1>;
template DLLExport class MDGridBox<MDEvent<2>, 2>;
template DLLExport class MDGridBox<MDEvent<3>, 3>;
template DLLExport class MDGridBox<MDEvent<4>, 4>;
template DLLExport class MDGridBox<MDEvent<5>, 5>;
template DLLExport class MDGridBox<MDEvent<6>, 6>;
template DLLExport class MDGridBox<MDEvent<7>, 7>;
template DLLExport class MDGridBox<MDEvent<8>, 8>;
template DLLExport class MDGridBox<MDEvent<9>, 9>;


// Instantiations for MDEventWorkspace
template DLLExport class MDEventWorkspace<MDEvent<1>, 1>;
template DLLExport class MDEventWorkspace<MDEvent<2>, 2>;
template DLLExport class MDEventWorkspace<MDEvent<3>, 3>;
template DLLExport class MDEventWorkspace<MDEvent<4>, 4>;
template DLLExport class MDEventWorkspace<MDEvent<5>, 5>;
template DLLExport class MDEventWorkspace<MDEvent<6>, 6>;
template DLLExport class MDEventWorkspace<MDEvent<7>, 7>;
template DLLExport class MDEventWorkspace<MDEvent<8>, 8>;
template DLLExport class MDEventWorkspace<MDEvent<9>, 9>;


/// Typedef for a MDEventWorkspace shared_ptr with 1 dimension 
typedef MDEventWorkspace<MDEvent<1>, 1>::sptr MDEventWorkspace1;
/// Typedef for a MDEventWorkspace shared_ptr with 2 dimensions 
typedef MDEventWorkspace<MDEvent<2>, 2>::sptr MDEventWorkspace2;
/// Typedef for a MDEventWorkspace shared_ptr with 3 dimensions 
typedef MDEventWorkspace<MDEvent<3>, 3>::sptr MDEventWorkspace3;
/// Typedef for a MDEventWorkspace shared_ptr with 4 dimensions 
typedef MDEventWorkspace<MDEvent<4>, 4>::sptr MDEventWorkspace4;
/// Typedef for a MDEventWorkspace shared_ptr with 5 dimensions 
typedef MDEventWorkspace<MDEvent<5>, 5>::sptr MDEventWorkspace5;
/// Typedef for a MDEventWorkspace shared_ptr with 6 dimensions 
typedef MDEventWorkspace<MDEvent<6>, 6>::sptr MDEventWorkspace6;
/// Typedef for a MDEventWorkspace shared_ptr with 7 dimensions 
typedef MDEventWorkspace<MDEvent<7>, 7>::sptr MDEventWorkspace7;
/// Typedef for a MDEventWorkspace shared_ptr with 8 dimensions 
typedef MDEventWorkspace<MDEvent<8>, 8>::sptr MDEventWorkspace8;
/// Typedef for a MDEventWorkspace shared_ptr with 9 dimensions 
typedef MDEventWorkspace<MDEvent<9>, 9>::sptr MDEventWorkspace9;




/** Create a MDEventWorkspace of the given type
@param nd :: number of dimensions
@param eventType :: string describing the event type (currently ignored) 
*/
IMDEventWorkspace_sptr MDEventFactory::CreateMDEventWorkspace(size_t nd, std::string eventType)
{
  switch(nd)
  {
  case (1):
    return boost::shared_ptr<MDEventWorkspace<MDEvent<1>,1> >(new MDEventWorkspace<MDEvent<1>,1>);
  case (2):
    return boost::shared_ptr<MDEventWorkspace<MDEvent<2>,2> >(new MDEventWorkspace<MDEvent<2>,2>);
  case (3):
    return boost::shared_ptr<MDEventWorkspace<MDEvent<3>,3> >(new MDEventWorkspace<MDEvent<3>,3>);
  case (4):
    return boost::shared_ptr<MDEventWorkspace<MDEvent<4>,4> >(new MDEventWorkspace<MDEvent<4>,4>);
  case (5):
    return boost::shared_ptr<MDEventWorkspace<MDEvent<5>,5> >(new MDEventWorkspace<MDEvent<5>,5>);
  case (6):
    return boost::shared_ptr<MDEventWorkspace<MDEvent<6>,6> >(new MDEventWorkspace<MDEvent<6>,6>);
  case (7):
    return boost::shared_ptr<MDEventWorkspace<MDEvent<7>,7> >(new MDEventWorkspace<MDEvent<7>,7>);
  case (8):
    return boost::shared_ptr<MDEventWorkspace<MDEvent<8>,8> >(new MDEventWorkspace<MDEvent<8>,8>);
  case (9):
    return boost::shared_ptr<MDEventWorkspace<MDEvent<9>,9> >(new MDEventWorkspace<MDEvent<9>,9>);
  default:
    throw std::invalid_argument("Invalid number of dimensions passed to CreateMDEventWorkspace.");
  }
}
/* 
#define CALL_MDEVENT_FUNCTION(funcname, workspace) \ 
{ \ 
MDEventWorkspace<MDEvent<1>, 1>::sptr MDEW1 = boost::dynamic_pointer_cast<MDEventWorkspace<MDEvent<1>, 1> >(workspace); \
if (MDEW1) funcname<MDEvent<1>, 1>(MDEW1); \ 
MDEventWorkspace<MDEvent<2>, 2>::sptr MDEW2 = boost::dynamic_pointer_cast<MDEventWorkspace<MDEvent<2>, 2> >(workspace); \
if (MDEW2) funcname<MDEvent<2>, 2>(MDEW2); \ 
MDEventWorkspace<MDEvent<3>, 3>::sptr MDEW3 = boost::dynamic_pointer_cast<MDEventWorkspace<MDEvent<3>, 3> >(workspace); \
if (MDEW3) funcname<MDEvent<3>, 3>(MDEW3); \ 
MDEventWorkspace<MDEvent<4>, 4>::sptr MDEW4 = boost::dynamic_pointer_cast<MDEventWorkspace<MDEvent<4>, 4> >(workspace); \
if (MDEW4) funcname<MDEvent<4>, 4>(MDEW4); \ 
MDEventWorkspace<MDEvent<5>, 5>::sptr MDEW5 = boost::dynamic_pointer_cast<MDEventWorkspace<MDEvent<5>, 5> >(workspace); \
if (MDEW5) funcname<MDEvent<5>, 5>(MDEW5); \ 
MDEventWorkspace<MDEvent<6>, 6>::sptr MDEW6 = boost::dynamic_pointer_cast<MDEventWorkspace<MDEvent<6>, 6> >(workspace); \
if (MDEW6) funcname<MDEvent<6>, 6>(MDEW6); \ 
MDEventWorkspace<MDEvent<7>, 7>::sptr MDEW7 = boost::dynamic_pointer_cast<MDEventWorkspace<MDEvent<7>, 7> >(workspace); \
if (MDEW7) funcname<MDEvent<7>, 7>(MDEW7); \ 
MDEventWorkspace<MDEvent<8>, 8>::sptr MDEW8 = boost::dynamic_pointer_cast<MDEventWorkspace<MDEvent<8>, 8> >(workspace); \
if (MDEW8) funcname<MDEvent<8>, 8>(MDEW8); \ 
MDEventWorkspace<MDEvent<9>, 9>::sptr MDEW9 = boost::dynamic_pointer_cast<MDEventWorkspace<MDEvent<9>, 9> >(workspace); \
if (MDEW9) funcname<MDEvent<9>, 9>(MDEW9); \ 
} 
*/ 

} // namespace Mantid
} // namespace MDEvents 

/* THIS FILE WAS AUTO-GENERATED BY /home/8oz/Code/Mantid/Code/Mantid/Framework/MDEvents/src/generate_mdevent_declarations.py - DO NOT EDIT! */ 
