#For MantidPythonAPI

import os
import sys
import MantidBuild

#GET LIST OF CPPS
codeFolder = os.path.abspath('./src')
listCpps = MantidBuild.getCPPFiles(codeFolder)

#Import environment
Import('env')
myenv = env.Clone()
myenv.Append(CPPDEFINES=[('IN_MANTID_PYTHON_API',1)])
# linux/mac
if os.name == 'posix':
   libraries = myenv['MYLIBLIST']
   # This avoids segfaulting on some systems when using Mantid in a standalone interpreter
   # It must be linked before lGL
   mylibraries = ['stdc++'] + libraries
   myenv['MYLIBLIST'] = mylibraries
   myenv.Append(MYLIBLIST='python' + sys.version[0:3])
   myenv.Replace(SHLIBSUFFIX='.so')
   myenv.Append(MYLIBLIST='boost_python' + myenv['BOOST_APPEND'])
# windows
else:
   myenv.Replace(SHLIBSUFFIX='.pyd')
listSharedObjects = MantidBuild.getSharedObjects(listCpps, myenv)

# Numpy bindings
try:
    print "Checking for numpy...",
    from numpy import get_include as get_numpy_include
    print 'yes'
except ImportError:
    print "no"
    Exit(-1)

myenv.Append(CPPPATH=[get_numpy_include()])
    
#BUILD CODE
shared = myenv.SharedLibrary('lib/MantidPythonAPI', listCpps, LIBS=myenv['MYLIBLIST'], LIBPATH=myenv['MYLIBDIRLIST'], PDB='lib/MantidPythonAPI.pdb')
retval = { 'shared': shared, 'sharedobjs' : listSharedObjects, 'libs': [ 'MantidPythonAPI' ] }
Return('retval')
