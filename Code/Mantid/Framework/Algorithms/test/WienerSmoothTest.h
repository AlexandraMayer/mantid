#ifndef MANTID_ALGORITHMS_WIENERSMOOTHTEST_H_
#define MANTID_ALGORITHMS_WIENERSMOOTHTEST_H_

#include <cxxtest/TestSuite.h>

#include "MantidAlgorithms/WienerSmooth.h"
#include "MantidAPI/WorkspaceFactory.h"

using Mantid::Algorithms::WienerSmooth;
using namespace Mantid::API;

class WienerSmoothTest : public CxxTest::TestSuite
{
public:
  // This pair of boilerplate methods prevent the suite being created statically
  // This means the constructor isn't called when running other tests
  static WienerSmoothTest *createSuite() { return new WienerSmoothTest(); }
  static void destroySuite( WienerSmoothTest *suite ) { delete suite; }


  void test_Init()
  {
    WienerSmooth alg;
    TS_ASSERT_THROWS_NOTHING( alg.initialize() )
    TS_ASSERT( alg.isInitialized() )
  }
  
  void test_exec()
  {

    double x[] = {2.27988, 2.5079, 2.73593, 2.96398, 3.19203, 3.4201, 3.64818, 3.87627, 4.10439, 4.33251, 4.56066, 4.78882, 5.017, 5.2452, 5.47342, 5.70167, 5.92994, 6.15823, 6.38654, 6.61488, 6.84325, 7.07164, 7.30006, 7.52851, 7.75699, 7.9855, 8.21405, 8.44262, 8.67123, 8.89988, 9.12856, 9.35727, 9.58603, 9.81482, 10.0437, 10.2725, 10.5014, 10.7304, 10.9594, 11.1884, 11.4175, 11.6466, 11.8758, 12.1051, 12.3343, 12.5637, 12.793, 13.0225, 13.2519, 13.4815, 13.7111, 13.9407, 14.1704, 14.4001, 14.63, 14.8598, 15.0898, 15.3198, 15.5498, 15.7799, 16.0101, 16.2404, 16.4707, 16.7011, 16.9315, 17.162, 17.3926, 17.6233, 17.854, 18.0848, 18.3157, 18.5467, 18.7777, 19.0088, 19.24, 19.4712, 19.7026, 19.934, 20.1655, 20.3971, 20.6288, 20.8605, 21.0924, 21.3243, 21.5563, 21.7885, 22.0207, 22.2529, 22.4853, 22.7178, 22.9504, 23.1831, 23.4158, 23.6487, 23.8817, 24.1147, 24.3479, 24.5812, 24.8145, 25.048, 25.2816, 25.5153, 25.7491, 25.983, 26.217, 26.4511, 26.6854, 26.9197, 27.1542, 27.3888, 27.6235, 27.8583, 28.0932, 28.3283, 28.5635, 28.7988, 29.0342, 29.2698, 29.5054, 29.7413, 29.9772, 30.2133, 30.4495, 30.6858, 30.9223, 31.1589, 31.3956, 31.6325, 31.8695, 32.1066, 32.3439, 32.5814, 32.8189, 33.0567, 33.2945, 33.5326, 33.7707, 34.009, 34.2475, 34.4861, 34.7249, 34.9639, 35.2029, 35.4422, 35.6816, 35.9212, 36.1609, 36.4008, 36.6409, 36.8811, 37.1215, 37.3621, 37.6028, 37.8437, 38.0848, 38.326, 38.5675, 38.8091, 39.0509, 39.2929, 39.535, 39.7774, 40.0199, 40.2626, 40.5055, 40.7486, 40.9919, 41.2353, 41.479, 41.7229, 41.9669, 42.2112, 42.4557, 42.7003, 42.9452, 43.1903, 43.4356, 43.6811, 43.9268, 44.1727, 44.4188, 44.6652, 44.9118, 45.1585, 45.4056, 45.6528, 45.9002, 46.1479, 46.3958, 46.644, 46.8923, 47.141, 47.3898, 47.6389, 47.8882, 48.1378, 48.3876, 48.6376, 48.8879, 49.1384, 49.3892, 49.6403, 49.8916, 50.1431, 50.395, 50.647, 50.8994, 51.152, 51.4048, 51.658, 51.9114, 52.1651, 52.419, 52.6733, 52.9278, 53.1826, 53.4377, 53.693, 53.9487, 54.2046, 54.4609, 54.7174, 54.9743, 55.2314, 55.4888, 55.7466, 56.0046, 56.263, 56.5216, 56.7806, 57.0399, 57.2995, 57.5595, 57.8197, 58.0803, 58.3412, 58.6025, 58.8641, 59.126, 59.3883, 59.6509};
    double y[] = {0.1189, 0.14286, 0.15511, 0.20033, 0.24087, 0.2996, 0.3667, 0.45925, 0.54581, 0.64787, 0.72139, 0.75917, 0.7592, 0.70437, 0.66543, 0.61568, 0.57946, 0.56725, 0.54555, 0.54935, 0.55913, 0.57079, 0.59763, 0.62659, 0.65637, 0.70992, 0.76924, 0.84962, 0.90275, 0.96503, 1.0212, 1.04499, 1.02727, 0.98586, 0.94215, 0.89535, 0.85004, 0.82062, 0.77311, 0.75757, 0.72619, 0.70849, 0.68867, 0.68672, 0.68862, 0.69738, 0.68253, 0.66519, 0.68893, 0.69585, 0.7261, 0.76552, 0.82647, 0.91327, 0.9998, 1.12527, 1.22703, 1.37864, 1.50838, 1.64859, 1.7446, 1.82841, 1.82272, 1.81786, 1.7517, 1.64564, 1.53517, 1.43061, 1.30539, 1.20773, 1.13472, 1.05424, 0.97878, 0.89599, 0.85828, 0.79429, 0.73088, 0.70002, 0.67398, 0.65064, 0.59312, 0.61832, 0.60326, 0.59493, 0.61048, 0.62192, 0.65194, 0.67122, 0.68651, 0.72684, 0.75618, 0.78981, 0.84201, 0.89634, 0.91493, 0.94592, 0.99613, 1.02684, 1.0639, 1.09255, 1.13058, 1.14893, 1.1503, 1.18634, 1.18879, 1.20033, 1.20279, 1.20045, 1.18814, 1.17842, 1.16808, 1.15407, 1.12928, 1.11879, 1.1023, 1.07958, 1.05638, 1.0462, 1.04083, 1.03085, 1.03033, 1.02903, 1.02619, 1.02792, 1.03886, 1.04313, 1.05231, 1.04534, 1.06358, 1.05425, 1.05435, 1.0434, 1.02563, 1.01394, 0.98787, 0.96556, 0.94457, 0.9051, 0.88604, 0.86141, 0.84185, 0.84891, 0.83551, 0.81485, 0.84004, 0.83454, 0.8117, 0.83888, 0.84998, 0.874, 0.87528, 0.88786, 0.92081, 0.93851, 0.95443, 0.97785, 0.99923, 1.02937, 1.04029, 1.05765, 1.07661, 1.08395, 1.09994, 1.11099, 1.12797, 1.13621, 1.14869, 1.15218, 1.15627, 1.15252, 1.1553, 1.14769, 1.13809, 1.11836, 1.116, 1.1029, 1.08102, 1.06264, 1.04897, 1.02698, 1.00413, 0.98735, 0.97338, 0.9704, 0.96175, 0.93567, 0.93158, 0.92161, 0.91366, 0.91242, 0.91492, 0.91012, 0.91363, 0.91386, 0.91193, 0.92262, 0.92101, 0.92347, 0.92783, 0.92892, 0.93323, 0.9285, 0.94434, 0.94073, 0.95938, 0.95013, 0.9697, 0.96185, 0.97768, 0.99063, 1.00007, 1.00453, 1.01804, 1.02646, 1.02738, 1.03621, 1.04134, 1.06078, 1.06342, 1.06341, 1.0653, 1.0678, 1.06715, 1.07105, 1.0638, 1.06224, 1.06376, 1.06679, 1.06187, 1.06411, 1.05411, 1.04652, 1.04076, 1.03172, 1.0255, 1.02284, 1.01324, 1.00444, 1.00077, 0.99847, 0.98269};

    size_t ndata = sizeof(x);

    auto dataWS = WorkspaceFactory::Instance().create("Workspace2D", 1,ndata,ndata);
    auto &X = dataWS->dataX(0);
    auto &Y = dataWS->dataY(0);
    X.assign( x, x + ndata );
    Y.assign( y, y + ndata );

    // Name of the output workspace.
    std::string outWSName("WienerSmoothTest_OutputWS");
  
    WienerSmooth alg;
    TS_ASSERT_THROWS_NOTHING( alg.initialize() )
    TS_ASSERT( alg.isInitialized() )
    TS_ASSERT_THROWS_NOTHING( alg.setPropertyValue("REPLACE_PROPERTY_NAME_HERE!!!!", "value") );
    TS_ASSERT_THROWS_NOTHING( alg.setPropertyValue("OutputWorkspace", outWSName) );
    TS_ASSERT_THROWS_NOTHING( alg.execute(); );
    TS_ASSERT( alg.isExecuted() );
    
    // Retrieve the workspace from data service. TODO: Change to your desired type
    Workspace_sptr ws;
    TS_ASSERT_THROWS_NOTHING( ws = AnalysisDataService::Instance().retrieveWS<Workspace>(outWSName) );
    TS_ASSERT(ws);
    if (!ws) return;
    
    // TODO: Check the results
    
    // Remove workspace from the data service.
    AnalysisDataService::Instance().remove(outWSName);
  }
  
  void test_Something()
  {
    TSM_ASSERT( "You forgot to write a test!", 0);
  }


};


#endif /* MANTID_ALGORITHMS_WIENERSMOOTHTEST_H_ */