#ifndef MANTID_MDALGORITHMS_BoxImplicitFunctionTEST_H_
#define MANTID_MDALGORITHMS_BoxImplicitFunctionTEST_H_

#include "MantidKernel/System.h"
#include "MantidKernel/Timer.h"
#include "MantidMDAlgorithms/BoxImplicitFunction.h"
#include <boost/scoped_ptr.hpp>
#include <cxxtest/TestSuite.h>
#include <iomanip>
#include <iostream>

using namespace Mantid;
using namespace Mantid::MDAlgorithms;
using namespace Mantid::API;

//=====================================================================================
// Functional Tests
//=====================================================================================
class Box3DImplicitFunctionTest : public CxxTest::TestSuite
{
public:

  //Helper method to construct a valid vanilla box implicit function.
  BoxImplicitFunction* constructBoxImplicitFunction()
  {
    OriginParameter origin(1, 2, 3); //Non-orthogonal normal used so that getters can be properly verified
    WidthParameter width(5);
    HeightParameter height(4);
    DepthParameter depth(6);
    return new BoxImplicitFunction(width, height, depth, origin);
  }

  void testBoxImplicitFunctionConstruction(void)
  {
    boost::scoped_ptr<BoxImplicitFunction> box(constructBoxImplicitFunction());

    TSM_ASSERT_EQUALS("Upper x component not wired-up correctly", 3.5, box->getUpperX());
    TSM_ASSERT_EQUALS("Lower x component not wired-up correctly", -1.5, box->getLowerX());
    TSM_ASSERT_EQUALS("Upper y component not wired-up correctly", 4, box->getUpperY());
    TSM_ASSERT_EQUALS("Lower y component not wired-up correctly", 0, box->getLowerY());
    TSM_ASSERT_EQUALS("Upper z component not wired-up correctly", 6, box->getUpperZ());
    TSM_ASSERT_EQUALS("Lower z component not wired-up correctly", 0, box->getLowerZ());
  }

  bool do_test(boost::scoped_ptr<BoxImplicitFunction> & box, double x, double y, double z)
  {
    Mantid::coord_t coords[3] = {x,y,z};
    return box->isPointContained(coords);
  }

  void testEvaluateSeveralPoints()
  {
    boost::scoped_ptr<BoxImplicitFunction> box(constructBoxImplicitFunction());
    TSM_ASSERT("The point should have been found to be inside the region bounded by the box.", do_test(box, 0.5,0.5,0.5));
    TSM_ASSERT("The point should not have been found to be inside the region bounded by the box.", !do_test(box, 10,0,0));
    TSM_ASSERT("The point should not have been found to be inside the region bounded by the box.", !do_test(box, -10,0,0));
    TSM_ASSERT("The point should not have been found to be inside the region bounded by the box.", !do_test(box, 0,-10,0));
    TSM_ASSERT("The point should not have been found to be inside the region bounded by the box.", !do_test(box, 0,10,0));
    TSM_ASSERT("The point should not have been found to be inside the region bounded by the box.", !do_test(box, 0,0,-10));
    TSM_ASSERT("The point should not have been found to be inside the region bounded by the box.", !do_test(box, 0,0,10));
  }

  void testToXML()
  {
    boost::scoped_ptr<BoxImplicitFunction> box(constructBoxImplicitFunction());
    //string comparison on generated xml.
    TSM_ASSERT_EQUALS("The xml generated by this function did not match the expected schema.", "<Function><Type>BoxImplicitFunction</Type><ParameterList><Parameter><Type>WidthParameter</Type><Value>5.0000</Value></Parameter><Parameter><Type>HeightParameter</Type><Value>4.0000</Value></Parameter><Parameter><Type>DepthParameter</Type><Value>6.0000</Value></Parameter><Parameter><Type>OriginParameter</Type><Value>1.0000, 2.0000, 3.0000</Value></Parameter></ParameterList></Function>", box->toXMLString());
  }

  void testEqual()
  {
    OriginParameter o(4, 5, 6);
    WidthParameter width(1);
    HeightParameter height(2);
    DepthParameter depth(3);
    BoxImplicitFunction A(width, height, depth, o);
    BoxImplicitFunction B(width, height, depth, o);
    TSM_ASSERT_EQUALS("These two objects should be considered equal.", A, B);
  }

  void testNotEqual()
  {
    OriginParameter originA(4, 5, 6);
    OriginParameter originB(4, 5, 2); //differs
    WidthParameter widthA(1);
    WidthParameter widthB(2); //differs
    HeightParameter heightA(2);
    HeightParameter heightB(3); //differs
    DepthParameter depthA(3);
    DepthParameter depthB(4); //differs
    BoxImplicitFunction A(widthA, heightA, depthA, originA); //base-line to compare to.
    BoxImplicitFunction B(widthB, heightA, depthA, originA);
    BoxImplicitFunction C(widthA, heightB, depthA, originA);
    BoxImplicitFunction D(widthA, heightA, depthB, originA);
    BoxImplicitFunction E(widthA, heightA, depthA, originB);

    TSM_ASSERT_DIFFERS("These two objects should NOT be considered equal.", A, B);
    TSM_ASSERT_DIFFERS("These two objects should NOT be considered equal.", A, C);
    TSM_ASSERT_DIFFERS("These two objects should NOT be considered equal.", A, D);
    TSM_ASSERT_DIFFERS("These two objects should NOT be considered equal.", A, E);
  }


};


#endif /* MANTID_MDALGORITHMS_BoxImplicitFunctionTEST_H_ */

