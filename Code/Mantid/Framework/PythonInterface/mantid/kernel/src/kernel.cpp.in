/*****************************************************************************************/
/********** PLEASE NOTE! THIS FILE WAS AUTO-GENERATED FROM CMAKE.  ***********************/
/********** Source = kernel.cpp.in *******************************************************/
/*****************************************************************************************/
#include <boost/python/module.hpp>
#include <boost/python/docstring_options.hpp>
#include <boost/python/def.hpp>

#include "MantidPythonInterface/kernel/SingleValueTypeHandler.h"
#include "MantidPythonInterface/kernel/SequenceTypeHandler.h"
#include "MantidPythonInterface/kernel/NumpyTypeHandler.h"
#include "MantidKernel/MantidVersion.h"

// See http://docs.scipy.org/doc/numpy/reference/c-api.array.html#PY_ARRAY_UNIQUE_SYMBOL
#define PY_ARRAY_UNIQUE_SYMBOL KERNEL_ARRAY_API
#include <numpy/arrayobject.h>
#include <boost/python/numeric.hpp>

using namespace Mantid::PythonInterface;
using TypeRegistry::SingleValueTypeHandler;
using TypeRegistry::SequenceTypeHandler;
using boost::python::def;

// Forward declare
@EXPORT_DECLARE@

BOOST_PYTHON_MODULE(_kernel)
{
  // Doc string options - User defined, python arguments, C++ call signatures
  boost::python::docstring_options docstrings(true, true, false);
  // Import numpy
  _import_array();
  boost::python::numeric::array::set_module_and_type("numpy", "ndarray");
  
  def("version_str", &Mantid::Kernel::MantidVersion::version, 
      "Returns the Mantid version string in the form \"major.minor.patch\"");
  
  // Map builtin type objects to appropriate handler classes for properties
  TypeRegistry::registerHandler(&PyInt_Type, new SingleValueTypeHandler<int>());
  TypeRegistry::registerHandler(&PyBool_Type, new SingleValueTypeHandler<bool>());
  TypeRegistry::registerHandler(&PyFloat_Type, new SingleValueTypeHandler<double>());
  TypeRegistry::registerHandler(&PyString_Type, new SingleValueTypeHandler<std::string>());
  TypeRegistry::registerHandler(&PyList_Type, new SequenceTypeHandler());
  TypeRegistry::registerHandler(&PyTuple_Type, new SequenceTypeHandler());
  TypeRegistry::registerHandler(&PyArray_Type, new TypeRegistry::NumpyTypeHandler()); // Numpy array
  

@EXPORT_FUNCTIONS@
}
