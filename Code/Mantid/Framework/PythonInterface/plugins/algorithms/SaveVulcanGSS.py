import mantid.simpleapi as api
from mantid.api import *
from mantid.kernel import *
import mantid.simpleapi as api
from mantid.api import AnalysisDataService

class SaveVulcanGSS(PythonAlgorithm):
    """ Save GSS file for VULCAN
    """
    def category(self):
        """
        """
        return "Diffraction;Utility"

    def name(self):
        """
        """
        return "SaveVulcanGSS"

    def summary(self):
        """ Return summary
        """
        return "Load file generated by Fullprof."

    def PyInit(self):
        """ Declare properties
        """        
        self.declareProperty(MatrixWorkspaceProperty("InputWorkspace", "", Direction.Input), 
                "Focussed diffraction workspace to be exported to GSAS file. ")

        self.declareProperty(FileProperty("BinFilename","", FileAction.Load, ['.dat']),
                "Name of a data file containing the bin boundaries in Log(TOF). ")

        self.declareProperty(MatrixWorkspaceProperty("OutputWorkspace", "", Direction.Output), 
                "Name of rebinned matrix workspace. ")

        self.declareProperty(FileProperty("GSSFilename","", FileAction.Save, ['.gda']),
                "Name of the output GSAS file. ")

        return
 
    def PyExec(self):
        """ Main Execution Body
        """
        # Properties
        inputwsname = self.getPropertyValue("InputWorkspace")
        logtoffilename = self.getPropertyValue("BinFilename")
        outgssfilename = self.getPropertyValue("GSSFilename")

        # Check properties
        inputws = AnalysisDataService.retrieve(inputwsname)
        if inputws is None:
            raise NotImplementedError("Inputworkspace does not exist.")
        if inputws.getAxis(0).getUnit().unitID() != "TOF":
            raise NotImplementedError("InputWorkspace must be in unit as TOF.")
        if inputws.isHistogramData() is False:
            raise NotImplementedError("InputWorkspace must be histogram, but not point data.")

        # Load reference bin file
        vec_refT = self._loadRefLogBinFile(logtoffilename)

        gsaws = self._rebinVdrive(inputws, vec_refT)

        outputws = self._saveGSAS(gsaws, outgssfilename)

        # Set property
        self.setProperty("OutputWorkspace", outputws)

        return


    def _loadRefLogBinFile(self, logbinfilename):
        """ Create a vector of bin in TOF value
        Arguments:
         - logbinfilename : name of file containing log_10(TOF) bins
        """
        import math

        bfile = open(logbinfilename, "r")
        lines = bfile.readlines()
        bfile.close()

        vecX = []
        for line in lines:
            line = line.strip()
            if len(line) == 0:
                continue
            if line[0] == "#":
                continue

            terms = line.split()
            for it in xrange(len(terms)):
                x = float(terms[it])
                vecX.append(x)
            # ENDFOR
        # ENDFOR

        vecPow10X = []
        for i in xrange(len(vecX)):
            p10x = math.pow(10, vecX[i])
            vecPow10X.append(p10x)

        return vecPow10X

    
    def _rebinVdrive(self, inputws, vec_refT):
        """ Rebin to match VULCAN's VDRIVE-generated GSAS file
        Arguments:
         - inputws : focussed workspace
         - vec_refT: list of TOF bins
        """
        # Create a complicated bin parameter 
        params = []
        for ibin in xrange(len(vec_refT)-1):
            x0 = vec_refT[ibin]
            xf = vec_refT[ibin+1]
            dx = xf-x0
            params.append(x0)
            params.append(dx)

        # last bin
        x0 = vec_refT[-1]
        xf = 2*dx + x0 
        params.extend([x0, 2*dx, xf])

        # Rebin
        focws = api.Rebin(InputWorkspace=inputws, Params=params, PreserveEvents=False)

        # Map to a new workspace with 'vdrive-bin', which is the integer value of log bins
        numhist = focws.getNumberHistograms()
        newvecx = []
        newvecy = []
        newvece = []
        for iws in xrange(numhist):
            vecx = focws.readX(iws)
            vecy = focws.readY(iws)
            vece = focws.readE(iws)
            for i in xrange( len(vecx)-1 ):
                newvecx.append(int(vecx[i]*10)/10.)
                newvecy.append(vecy[i])
                newvece.append(vece[i])
            # ENDFOR (i)
        # ENDFOR (iws)
        gsaws = api.CreateWorkspace(DataX=newvecx, DataY=newvecy, DataE=newvece, NSpec=numhist, 
                UnitX="TOF")

        return gsaws


    def _saveGSAS(self, gsaws, gdafilename):
        """ Save file
        """
        # Convert from PointData to Histogram
        gsaws = api.ConvertToHistogram(InputWorkspace=gsaws)

        # Save 
        api.SaveGSS(InputWorkspace=gsaws, Filename=gdafilename, SplitFiles=False, Append=False, 
                Format="SLOG", MultiplyByBinWidth=False, ExtendedHeader=False, UseSpectrumNumberAsBankID=True)

        return gsaws



# Register algorithm with Mantid
AlgorithmFactory.subscribe(SaveVulcanGSS)
