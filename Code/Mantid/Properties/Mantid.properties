# File: Mantid Properties
# Purpose: This file contains the basic configuration for Mantid.
# WARNING: This file is not intended to be edited by users.
#          If you wish to override any setting in this file
#          Simply copy the entry into the Mantid.User.Properties file
#          and set the value you desire there.  Any settings in the user.properties
#          file will override those set in this file.
#
#          This File will be overwritten with each new version of Mantid, however
#          we will never alter your user.properties file so settings there are safe.

# A semi-colon separated list of supported facilities
supported.facilities = ISIS;SNS

# Set a default facility
default.facility = ISIS

# Set a default instrument
default.instrument = 

# Set of PyQt interfaces to add to the Interfaces menu, separated by a space
mantidqt.python_interfaces = HFIR_Reduction.py

# Where to find mantid plugin libraries
plugins.directory = .

# Where to find Mantid Qt plugin libraries
mantidqt.plugins.directory = .

# Where to load instrument definition files from
instrumentDefinition.directory = ../../../Test/Instrument

# Where to load parameter definition files from
parameterDefinition.directory = ../../../Test/Instrument

# Location of Python scripts that are required for certain aspects of Mantid to function
# correctly, i.e. customized interfaces
#
# WARNING: Altering this value will almost certainly break Mantid functionality
#
requiredpythonscript.directories = ../PythonAPI/scripts/Crystallography;../PythonAPI/scripts/Disordered Materials;../PythonAPI/scripts/Engineering;../PythonAPI/scripts/Excitations;../PythonAPI/scripts/Large Scale Structures;../PythonAPI/scripts/Molecular Spectroscopy;\
../PythonAPI/scripts/Muons;../PythonAPI/scripts/Neutrinos;../PythonAPI/scripts/SANS

# Additional directory for Python scripts. This is added to the Python path by the
# Python API (DEPRECATED: Use pythonscripts.directories)
# Note that this is NOT recursive
pythonscripts.directory = ../PythonAPI/scripts

# Additional directories for Python scripts. These are added to the Python path by the
# Python API.
# Note that they are NOT recursive
pythonscripts.directories = ../PythonAPI/scripts

# The locations of Python algorithms that are to be loaded at startup
pythonalgorithms.directories = ../PythonAPI/PythonAlgorithms

# A semi-colon(;) separated list of directories to use to search for data
# Use forward slash / for all paths
datasearch.directories = 

# Setting this to On enables searching the facilitie's archive automatically
datasearch.searcharchive = Off

# A default directory to use for saving files
# Use forward slash / for all paths
defaultsave.directory = 

# ICat downlaod directory
icatDownload.directory = ../../../Test/Data/ICatDownload

# The Number of algorithms properties to retain im memory for refence in scripts.
algorithms.retained = 50

# ManagedWorkspace.LowerMemoryLimit sets the memory limit to trigger the use of 
# a ManagedWorkspace. A ManagedWorkspace will be used for a workspace requiring greater amount of memory 
# than defined by LowerMemoryLimit. LowerMemoryLimit is a precentage of the physical memory available for
# the process. On Linux it is the free physical memory, on Windows it is the smaller of the free physical memory
# and the available virtual memory. The default value for LowerMemoryLimit is 40%. Setting the limit too high
# may lead to unrecoverable bad allocations. If this happens the advice is to close Mantid and relaunch it 
# with a smaller LowerMemoryLimit.
# 
ManagedWorkspace.LowerMemoryLimit = 80
# Setting this to 1 will disable managed workspaces completely - use with care!
ManagedWorkspace.AlwaysInMemory = 0
ManagedWorkspace.DataBlockSize = 4000
ManagedWorkspace.FilePath = ../temp
CompressedWorkspace.DoNotUse = 1

# Defines the area (in FWHM) on both sides of the peak centre within which peaks are calculated. 
# Outside this area peak functions return zero.
curvefitting.peakRadius = 5


#Uncommenting the line below will enable algorithm chain re-running whenever a
#workspace is replaced. Uncommenting and setting it to 0 will also turn it off 
#enabling this is currently discouraged as it could cause race conditions with python scripts
#AlgorithmChaining.SwitchedOn = 1

# logging configuration
# root level message filter (drop to debug for more messages)
logging.loggers.root.level = information
# splitting the messages to many logging channels
logging.loggers.root.channel.class = SplitterChannel
logging.loggers.root.channel.channel1 = consoleChannel
logging.loggers.root.channel.channel2 = fileFilterChannel
logging.loggers.root.channel.channel3 = signalChannel
# output to the console - primarily for console based apps
logging.channels.consoleChannel.class = ConsoleChannel
logging.channels.consoleChannel.formatter = f1
# specfic filter for the file channel raising the level to warning (drop to debug for debugging)
logging.channels.fileFilterChannel.class= FilterChannel
logging.channels.fileFilterChannel.channel= fileChannel
logging.channels.fileFilterChannel.level= warning
# output to a file (For error capturing and debugging)
logging.channels.fileChannel.class = FileChannel
logging.channels.fileChannel.path = ../logs/mantid.log
logging.channels.fileChannel.formatter.class = PatternFormatter
logging.channels.fileChannel.formatter.pattern = %Y-%m-%d %H:%M:%S,%i [%I] %p %s - %t
logging.formatters.f1.class = PatternFormatter
logging.formatters.f1.pattern = %s-[%p] %t
logging.formatters.f1.times = local
logging.channels.fileChannel.formatter.times = local
# SignalChannel - Passes messages to the MantidPlot User interface
logging.channels.signalChannel.class = SignalChannel
