Russell Taylor, 14/01/08: Some notes on the investigations into, and changes made to, triple_iterator to improve performance
============================================================================================================================

Benchmarking test looked at iterating over a 10000x3000 Workspace2D (i.e. 30M enties).
On linuxs1, took 7s to iterate around and read back 1 value on revision 519 (11/12/07) version of triple_iterator.

Changing TripleRef to hold first, second & third as pointers cut this to 4.95s
 - i.e. have TripleRef<double> instead of TripleRef<double&> - don't have to delete & new CPoint in every call to validateIndex()
 
Caching W->size() & W->blocksize() cuts time to 3.99s
 - note that the iterator is now invalidated if the size of the workspace is changed (but that's not unreasonable or unusual)
 
Using triple_iterator<Workspace> instead of triple_iterator<Workspace2D> makes no difference.
Changing CPoint away from being held as a pointer made no difference.

Caching dataBlockIndex and only making the call to dataX/Y/E if needed cuts time to 1.77s

Removing call to W->size() in operator== and using cached wsSize instead takes time down to 1.46s.

Adding blockMin & blockMax to cut the number of index/blocksize division/modulus operations gets us down to 0.73s
 - of this, 0.44s is the iteration itself and the rest the reading back of the value.
