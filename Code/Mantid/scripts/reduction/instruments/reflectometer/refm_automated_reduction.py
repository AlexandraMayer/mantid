"""
"""
import sys
import time
IS_IN_MANTIDPLOT = False
try:
    import mantidplot
    from mantidsimple import *
    IS_IN_MANTIDPLOT = True
except:
    pass

def automation_script(reduction_options, instrument="REF_M", interface_name="REFM"):
    """
    
    
        @param reduction_options: reduction options object (see above)
        @param instrument: name of the instrument
        @param interface_name: name of the instrument as used by the reduction UI
    """
    if interface_name is None:
        interface_name = instrument
    
    reduction_options.data_files = ["runNumber"]
    reduce_script = reduction_options.to_script(True)
    
    content =  "# Script automatically generated by Mantid on %s\n" % time.ctime()
    content += "import sys\n"
    content += "import os\n"
    content += "if (os.environ.has_key(\"MANTIDPATH\")):\n"
    content += "    del os.environ[\"MANTIDPATH\"]\n"
    content += "sys.path.insert(0,'/opt/mantidnightly/bin')\n"
    content += "from MantidFramework import mtd\n"
    content += "mtd.initialize()\n"
    content += "from mantidsimple import *\n\n"
    
    content += "eventFileAbs=sys.argv[1]\n"
    content += "outputDir=sys.argv[2]\n\n"

    content += "eventFile = os.path.split(eventFileAbs)[-1]\n"
    content += "nexusDir = eventFileAbs.replace(eventFile, '')\n"
    content += "runNumber = eventFile.split('_')[2]\n"
    content += "configService = mtd.getSettings()\n"
    content += "dataSearchPath = configService.getDataSearchDirs()\n"
    content += "dataSearchPath.append(nexusDir)\n"
    content += "configService.setDataSearchDirs(dataSearchPath)\n\n"
    
    # Place holder for reduction script
    content += "\n"
    content += "# Place holder for python script\n"
    content += "file_path = os.path.join(outputDir, '%s_'+runNumber+'.py')\n" % instrument
    content += "f=open(file_path,'w')\n"
    content += "f.write(\"runNumber=\%s \% runNumber\\n\")\n"
    content += "f.write(\"\"\"%s\"\"\")\n" % reduce_script
    content += "f.close()\n\n"
    
    # Reduction option to load into Mantid
    xml_str = "<Reduction>\n"
    xml_str += "  <instrument_name>%s</instrument_name>\n" % interface_name 
    xml_str += "  <timestamp>%s</timestamp>\n" % time.ctime()
    xml_str += "  <python_version>%s</python_version>\n" % sys.version
    if IS_IN_MANTIDPLOT:
        xml_str += "  <mantid_version>%s</mantid_version>\n" % mantid_build_version()
    xml_str += reduction_options.to_xml()
    xml_str += "</Reduction>\n"

    content += "xml_str = \"\"\"%s\"\"\"\n" % xml_str
    content += "xml_str = xml_str.replace('runNumber', \"%s\") % runNumber\n\n" 
    
    content += "# Reduction options for loading into Mantid\n"
    content += "file_path = os.path.join(outputDir, '%s_'+runNumber+'.xml')\n" % instrument
    content += "f=open(file_path,'w')\n"
    content += "f.write(xml_str)\n"
    content += "f.close()\n"
    
    content += reduce_script

    content += "\n"
    content += "for item in mtd.keys():\n"
    content += "    if item.startswith('reflectivity_'):\n"
    content += "        file_name = item+'.txt'\n"
    content += "        file_path = os.path.join(outputDir,file_name)\n"
    content += "        SaveAscii(Filename=file_path,\n"
    content += "          InputWorkspace=item,\n" 
    content += "          Separator='Tab',\n"
    content += "          CommentIndicator='# ')\n"

    home_dir = os.path.expanduser('~')
    f = open(os.path.join(home_dir, "reduce_%s.py" % instrument), 'w')
    f.write(content)
    f.close()
    
    return content
    