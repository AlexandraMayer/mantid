#For Framework (Windows)
import os
import platform
import sys
import shutil
from socket import gethostname

# assume this is Windows
print "COMMENCING WINDOWS BUILD!"
env = Environment(ENV=os.environ)

print 'Current path == ',os.getcwd()
cwdpath=os.getcwd()
uppath=os.path.abspath('../')

libDirList = [uppath,cwdpath]
libList = []

#Sort out library paths
boost_path = 'C:/Program Files/boost/boost_1_34_1/'
third_party = os.path.abspath('../Third_Party/')
python_path = 'C:/Python25/'

print "BOOST_ROOT: ",boost_path
print "THIRD_PARTY: ",third_party
print "PYTHON_ROOT: ",python_path

#Third party
libDirList.append(third_party + '/lib/win32/')
libDir = third_party + '/lib/win32/'

for file in os.listdir(libDir):
	if file.endswith('.dll'):
		tmp = file.replace('.dll','')
		if libList.count(tmp) == 0:
			libList.append(tmp)

#python and boost
libDirList.append(python_path + '/libs/')
libDirList.append(boost_path + '/lib/')

#include paths
cppPaths = [boost_path, third_party + '/include/', python_path + '/include/']

#GET INCLUDE PATHS FOR OTHER PARTS OF MANTID
dirpath=os.listdir(uppath)
while(len(dirpath)):
	try:
		item=dirpath.pop(0)
		for file in os.listdir("../"+item):
			fullPath="../"+item+"/"+file
			if (file=="inc"):
				cppPaths.append(os.path.abspath(fullPath))
			elif (os.path.isdir(fullPath) and (not file.endswith('svn'))
			and (not file.endswith('test'))):
				dirpath.append(fullPath[3:])
	except:
		pass
		
#Set compiler flags
cflags = ['-W3','/EHsc', '/MD', '/ZI', '/TP', '/DWIN32', '/D_WINDOWS', '/DPOCO_DLL', '/DWINVER=0x0500']

libDirList.append(os.path.abspath('Algorithms/lib/'))
libDirList.append(os.path.abspath('Kernel/lib/'))
libDirList.append(os.path.abspath('Geometry/lib/'))
libDirList.append(os.path.abspath('API/lib/'))
libDirList.append(os.path.abspath('DataObjects/lib/'))
libDirList.append(os.path.abspath('DataHandling/lib/'))
libDirList.append(os.path.abspath('Services/lib/'))

#Export for SConscripts
env.Append(CCFLAGS=cflags)
env.Append(CPPPATH=cppPaths)
env.Replace(MYLIBLIST=libList)
env.Replace(MYLIBDIRLIST=libDirList)

Export('env')

#Real work begins here
subProjs = []

#This order matters slightly! Kernel-geometry-api in that order
subProjs.append('Kernel')
subProjs.append('Geometry')
subProjs.append('API')
subProjs.append('DataObjects')
subProjs.append('Algorithms')
subProjs.append('DataHandling')
#subProjs.append('Services/SConscript')

print libDirList

shared_libraries = []
static_libraries = []

for subproj in subProjs:
	ret = SConscript(subproj+'/SConscript')
	shared_libraries.insert(0,ret['shared'])
	static_libraries.insert(0,ret['static'])
	tmp = ret['libs'][0]+'.lib'
	if libList.count(tmp) == 0:
		libList.insert(0,tmp)
		env.Replace(MYLIBLIST=libList)

env.Replace(SHARED_LIST=shared_libraries)
env.Replace(STATIC_LIST=static_libraries)
#env.Prepend(MYLIBLIST=lib_list)

# main program
ret = SConscript('Bin/SConscript')

# tests
cxxtestgen = env.WhereIs('cxxtestgen.pl')
if cxxtestgen != None :
	ret = SConscript('Build/Tests/SConscript')
else :
	print 'CXXTESTGEN is not installed - tests will not be built'
