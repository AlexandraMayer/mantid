#For Framework
import os
import platform
import sys
import shutil
import re
import string
from socket import gethostname

import MantidBuild

if ARGUMENTS.get('rpmbuild',0) == 0 :
    rpmBuild = False
else :
    rpmBuild = True

USRLOCALINCLUDE = '/usr/local/include'
USRLOCALLIB = '/usr/local/lib'
USRINCLUDE = '/usr/include'
USRLIB = '%{_usrlibdir}'
MANTIDLIB = '/opt/Mantid/bin'
MANTIDPLUGINS = '/opt/Mantid/plugins'
  
opts = Options('scons_options.py')
opts.Add('debug','Set to 1 to build debug', 0)
opts.Add('matlab','Set to 1 to build matlab API', 0)
opts.Add('gcc44','Set to 1 to build with gcc44 on RHEL5', 0)

env = Environment(ENV=os.environ, options = opts)
Help(opts.GenerateHelpText(env))
debug = ARGUMENTS.get('debug', 0)
matlab = ARGUMENTS.get('matlab', 0)

# on RHEL5 gcc 4.1 is the default
# gcc 4.3 installed under a different name
gcc44 = ARGUMENTS.get('gcc44', 0)
if int(gcc44) :
    env["CC"] = "gcc44"
    env["CXX"] = "g++44"
    env["SHCC"] = "gcc44"
    env["SHCXX"] = "g++44"
    
#get libraries and the library directories
print 'Current path == ',os.getcwd()
cwdpath=os.getcwd()
uppath=os.path.abspath('../')

libList = []
boost_append=''
if not env.GetOption('clean'): # do not re-rerun checking on a "scons -c"
	conf = Configure(env)
	if conf.CheckLib('boost_date_time-gcc41','_ZNK5boost9gregorian10greg_month14as_long_stringEv'):
		boost_append = '-gcc41'
	env = conf.Finish()

libDirList = [uppath,cwdpath ]
cflags = []
dirList = []
cppPaths = []
lpts = []

boost_path = ''
poco_path = ''
third_party = os.path.abspath('../Third_Party/')
opencascade_path = ''
python_path = ''
win64 = ''

#Get paths
if os.name == 'nt': 
	print "* COMMENCING WINDOWS BUILD *"
	boost_path = third_party + '/include/'
	
	python_path = 'C:/Python25/'
	opencascade_path=third_party + '/include/OpenCascade'
	libList.append('PocoUtil')
	libList.append('PocoFoundation')
	libList.append('PocoXML')
	libDirList.append(python_path + '/libs/')
	
	win64=ARGUMENTS.get('win64',0)
	
	if not int(win64):
		libDirList.append(third_party + '/lib/win32/')
	else:
		print "* Building for 64bit Windows *"
		libDirList.append(third_party + '/lib/win64/')
		
	
	libList.append('python25')
	libList.append('libNeXus-0')

	libList.append('gsl')
	libList.append('ws2_32')   # winsock library
	libList.append('muparser') # Muparser used in DataHandling
	libList.append('zlib1')    # used in DataObjects

	cppPaths = [boost_path, third_party + '/include/', python_path + '/include/', opencascade_path, third_party+'/include/muParser', third_party+'/include/zlib123']
	
	#set up scons to embed manifest files
	env['LINKCOM'] = [env['LINKCOM'], 'mt.exe -nologo -manifest ${TARGET}.manifest -outputresource:$TARGET;1']
	env['SHLINKCOM'] = [env['SHLINKCOM'], 'mt.exe -nologo -manifest ${TARGET}.manifest -outputresource:$TARGET;2']

else:

	if not rpmBuild:
		print "* COMMENCING LINUX BUILD *"
		f=open('Build/Scons_Linux.conf', 'r')
		for ln in f:
			boost_path=MantidBuild.procHeaderPath(ln,'BOOST_ROOT',boost_path)
			poco_path=MantidBuild.procHeaderPath(ln,'POCO_ROOT',poco_path)
			python_path=MantidBuild.procHeaderPath(ln,'PYTHON_LIB',python_path)
			#third_party=os.path.abspath(MantidBuild.procHeader(ln,'THIRD',third_party))
		f.close()
	else:
		boost_path=''
		poco_path=''
		third_party=''
		python_path = ''
		boost_append = ''
		
	opencascade_path= '/opt/OpenCASCADE'
	#Find the boost_path and the boost append
	startPath = '/usr/local/include/'
	dirpath=os.listdir(startPath)
	while(len(dirpath)):
		try:
			item=dirpath.pop(0)
			if item.startswith('boost'):
				for file in os.listdir(startPath+item):
					print file
					if file == 'weak_ptr.hpp':
						boost_path = startPath
					elif file.startswith('boost'):
						boost_path =startPath+item				
		except:
			pass

	dirpath=os.listdir('/usr/local/lib/')
	while(len(dirpath)):
		try:
			item=dirpath.pop(0)
			m=re.search("libboost_python(.*).so", item)
			if m != None:
				boost_append=m.group(1)
		except:
			pass	
	
print "POCO_ROOT: ",poco_path
print "BOOST_ROOT: ",boost_path
print "BOOST_APPEND: ",boost_append
print "THIRD_PARTY: ",third_party
print "PYTHON_ROOT: ",python_path

if os.name == 'nt':
	if int(debug) :
		cflags = [ '/W3', '/Od', '/FD', '/EHsc', '/MDd', '/TP',  ]
		cflags.extend(['/D_DEBUG', '/DMS_VISUAL_STUDIO=1', '/DWIN32', '/D_WINDOWS', '/DPOCO_DLL', '/DGSL_DLL', '/DWINVER=0x0500'])
		cflags.extend(['/D_USE_MATH_DEFINES', '/DWNT', '/wd4275', '/wd4996'])
		cflags.extend(['/D_SCL_SECURE_NO_WARNINGS', '/D_CRT_SECURE_NO_WARNINGS', '/D_CRT_SECURE_NO_DEPRECATE', '/D_CRT_NONSTDC_NO_DEPRECATE', '/D_SCL_SECURE_NO_DEPRECATE'])
	else :
		cflags = ['/Ox', '/Oi', '/Ot', '/Oy', '/Ob2', '/GL', '/openmp', '/W3','/EHsc', '/MD', '/TP', '/DMS_VISUAL_STUDIO=1', '/DWIN32', '/D_WINDOWS', '/DPOCO_DLL', '/DGSL_DLL']
		cflags.extend(['/DMS_VISUAL_STUDIO=1', '/DWIN32', '/D_WINDOWS', '/DPOCO_DLL', '/DWINVER=0x0500'])
		cflags.extend(['/D_USE_MATH_DEFINES', '/DWNT', '/wd4275', '/wd4996'])
		cflags.extend(['/D_SCL_SECURE_NO_WARNINGS', '/D_CRT_SECURE_NO_WARNINGS', '/D_CRT_SECURE_NO_DEPRECATE', '/D_CRT_NONSTDC_NO_DEPRECATE', '/D_SCL_SECURE_NO_DEPRECATE'])
		env.Append(LINKFLAGS=['/OPT:REF','/OPT:ICF','/OPT:NOWIN98','/ltcg'])
elif platform.system() == 'Linux':
	if not rpmBuild:
		cppPaths.append(poco_path + 'include')
		cppPaths.append(poco_path +'Util')
		libDirList.append(USRLOCALLIB)
		if os.path.isdir('/usr/local/poco-1.3.1/'+ '/lib/Linux/i686') :
			libDirList.append('/usr/local/poco-1.3.1/' +'/lib/Linux/i686')
		else :
			libDirList.append(poco_path+'/lib')
	else:
		cppPaths.append(USRLOCALINCLUDE + '/Poco/')
		cppPaths.append(USRLOCALINCLUDE+'/Poco/Util')
		
	cppPaths.append(boost_path)
	cppPaths.append(USRINCLUDE)
	cppPaths.append(USRLOCALINCLUDE)
	
	libDirList.append(USRLIB)
elif platform.system() == 'Darwin':
	cppPaths.append(third_party+'/include')
	cppPaths.append(third_party+'/include/muParser')
	libDirList.append(third_party+'/lib/mac')
	
if os.name == 'posix':
	cppPaths.append(USRINCLUDE+ '/python' + sys.version[0:3])
	libList.append('PocoUtil')
	libList.append('PocoFoundation')
	libList.append('PocoXML')
	libList.append('boost_python'+boost_append)
	libList.append('boost_regex'+boost_append)
	libList.append('boost_signals'+boost_append)
	libList.append('boost_date_time'+boost_append)
	libList.append('NeXus')
	libList.append('muparser')
	libList.append('gsl')

	# OpenMP support library which doesn't get linked by default for some reason
	# Add the library if it is available on the system
	conf = Configure(env)
	if conf.CheckLib('gomp'):
	   print 'Found OpenMP runtime library, adding to linker list'
	   libList.append('gomp')
	   cflags.append('-fopenmp')
	conf.Finish()

	cflags.append('-Wall')
	if int(debug) :
	    cflags.append('-O0')
	    cflags.append('-g')
	    lpts.append('-g')
	else :
	    cflags.append('-O3')

	cflags.append(MantidBuild.getConfigFlags('gsl-config --cflags'))
	lpts.append(MantidBuild.getConfigFlags('gsl-config --libs'))
			
print "CPPPATHS: ",cppPaths
print "CFLAGS: ",cflags
#check existence of Header files
conf = Configure(env)
if conf.CheckCXXHeader('unordered_map.h'):
	conf.env.Append('-DHAS_UNORDERED_MAP_H')
env = conf.Finish()

#GET INCLUDE PATHS FOR OTHER PARTS OF MANTID
dirpath=os.listdir(uppath)
while(len(dirpath)):
	try:
		item=dirpath.pop(0)
		if not item.startswith("RPM_Kit"):
			for file in os.listdir("../"+item):
				fullPath="../"+item+"/"+file
				if (file=="inc"):
					cppPaths.insert(0,os.path.abspath(fullPath))
				elif (os.path.isdir(fullPath) and (not file.endswith('svn') )
				and (not file.endswith('test'))):
					dirpath.append(fullPath[3:])
	except:
		pass


#Collect the includes into a single directory
MantidBuild.collectIncludes('.', 'includes')

libDirList.append(os.path.abspath('./Bin/Shared'))

if os.name != 'nt':	
  if rpmBuild :
    lpts.append('-Wl,-rpath,'+MANTIDLIB)
    lpts.append('-Wl,-rpath,'+MANTIDPLUGINS)
  else :
    ##
    ## BIT FOR -Wl,-rpath : This avoids the STUPID STUPID export LD_PATH in run_test 
    ## 
    lpts.append('-Wl,-rpath,./Bin/Shared')
  print 'LINKFLAGS: ',lpts
  env.Append(LINKFLAGS=lpts)

else: 
  if int(win64):
    lpts.append('/MACHINE:X64')
    env.Append(LINKFLAGS=lpts)
    print 'LINKFLAGS: ',lpts

#Disable assert macro.
if int(debug) == 0:
  env.Append(CPPDEFINES='NDEBUG')

#Export for SConscripts
env.Append(CCFLAGS=cflags)
env.Append(CPPPATH=cppPaths)
env.Replace(MYLIBLIST=libList)
env.Replace(MYLIBDIRLIST=libDirList)

Export('env')

#Real work begins here
subProjs = []

#This order matters slightly! Kernel-geometry-api in that order
subProjs.append('Kernel')
subProjs.append('Geometry')
subProjs.append('API')
subProjs.append('DataObjects')
subProjs.append('CurveFitting')
subProjs.append('Algorithms')
subProjs.append('DataHandling')
subProjs.append('Nexus')
subProjs.append('PythonAPI')
subProjs.append('Crystal')

# we want to link libraries in the reverse order we build them
shared_libraries = []
static_libraries = []
shared_objects = []
lib_list = []
orig_libs = env['MYLIBLIST']

f=open('libs.txt', 'w')

for subproj in subProjs:
	ret = SConscript([subproj+'/SConscript'])
	if len(ret) == 0:
	   continue
	env.Install('Bin/Shared', ret['shared'])
	f.write(str( ret['shared'][0]) + '\n')
	shared_libraries.insert(0,ret['shared'])
	shared_objects = shared_objects + ret['sharedobjs']
	lib_list.insert(0,ret['libs'])
	env.Replace(MYLIBLIST=orig_libs + lib_list)

f.close()

env.Replace(SHARED_LIST=shared_libraries)

#
# Correct bug in windows scons - OBJSUFFIX is not substituted for some reason
#
for i in range(len(shared_objects)) :
    shared_objects[i] = string.replace(shared_objects[i], '$OBJSUFFIX', env['OBJSUFFIX'])

# User Algs
ret = SConscript(['UserAlgorithms/SConscript'])
env.Install('Bin/Plugins', ret['shared'])
    
# matlab interface
if int(matlab) :
       ret = SConscript(['MatlabAPI/SConscript'])
       env.Install('Bin/Shared', ret['shared'])

# main program
ret = SConscript(['Main/SConscript'])
env.Install('Bin/Shared', ret['shared'])

skiptest=ARGUMENTS.get('skiptest',0)
if not int(skiptest):
	print 'Building Code and Tests.  Specify "skiptest=1" to skip the tests'
		# tests
	if platform.system() != 'Linux':
		ret = SConscript(['Build/Tests/SConscript'])
	else:
		cxxtestgen = env.WhereIs('cxxtestgen.py')
		if cxxtestgen != None :
			ret = SConscript(['Build/Tests/SConscript'])
		else :
			print 'CXXTESTGEN is not installed - tests will not be built'
else:
	print "Not Building Tests."
