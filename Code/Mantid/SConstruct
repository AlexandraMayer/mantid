#For Framework
import os
import platform
import sys
import shutil
from socket import gethostname

import MantidBuild
  
#get libraries and the library directories
print 'Current path == ',os.getcwd()
cwdpath=os.getcwd()
uppath=os.path.abspath('../')

env = Environment(ENV=os.environ)
#printn 'Configuting for ',env['PLATFORM']
#
boost_append=''
if not env.GetOption('clean'): # do not re-reun checking on a "scons -c"
    conf = Configure(env)
    if conf.CheckLib('boost_filesystem-gcc41', '_ZN5boost10filesystem6nativeERKSs') :
	boost_append = '-gcc41'
    env = conf.Finish()

libDirList = [uppath,cwdpath ]
libList = []
cflags = []
dirList = []

cppPaths = []

if os.name == 'nt':
	SConscript('SConscriptWin')
	
else:
	#so this must be posix
	boost_path = ''
	poco_path = ''
	#	boost_append=''
	fortran_type=''
	third_party=''

	#Get paths
	f=open('Build/Scons_Linux.conf', 'r')
	
	for ln in f:
		boost_path=MantidBuild.procHeaderPath(ln,'BOOST_ROOT',boost_path)
		poco_path=MantidBuild.procHeaderPath(ln,'POCO_ROOT',poco_path)
	#		boost_append=MantidBuild.procHeader(ln,'BOOST_APPEND',boost_append)
		fortran_type=MantidBuild.procHeader(ln,'FORTRAN',fortran_type)
		third_party=os.path.abspath(MantidBuild.procHeader(ln,'THIRD',third_party))

	print "POCO_ROOT: ",poco_path
	print "BOOST_ROOT: ",boost_path
	print "BOOST_APPEND: ",boost_append
	print "THIRD_PARTY: ",third_party

	f.close()

	cppPaths.append('/usr/include/python' + sys.version[0:3])
	cppPaths.append(poco_path +'Foundation/include/')
	cppPaths.append(poco_path +'Util/include/')
	cppPaths.append(boost_path)

	print "CPPPATHS: ",cppPaths

  	libList = ['python' + sys.version[0:3]]

	#  	libList.append('MantidDataObjects')
	#  	libList.append('MantidAPI')
	#  	libList.append('MantidKernel')
	#  	libList.append('MantidDataHandling')
	#  	libList.append('MantidGeometry')

  	libList.append('PocoUtil')
  	libList.append('PocoFoundation')
  	libList.append('PocoXML')
  	libList.append('boost_python'+boost_append)
  	libList.append('boost_filesystem'+boost_append)
  	libList.append('boost_regex'+boost_append)

        if os.path.isdir(poco_path + '/lib/Linux/i686') :
	    libDirList.append(poco_path+'/lib/Linux/i686')
	else :
	    libDirList.append(poco_path+'/lib')

	#GET INCLUDE PATHS FOR OTHER PARTS OF MANTID
	dirpath=os.listdir(uppath)
	while(len(dirpath)):
		try:
			item=dirpath.pop(0)
			for file in os.listdir("../"+item):
				fullPath="../"+item+"/"+file
				if (file=="inc"):
					cppPaths.append(os.path.abspath(fullPath))
				elif (os.path.isdir(fullPath) and (not file.endswith('svn'))
				and (not file.endswith('test'))):
					dirpath.append(fullPath[3:])
		except:
			pass

	#Export for SConscripts
	env.Append(CCFLAGS=cflags)
	env.Append(CPPPATH=cppPaths)
	env.Replace(MYLIBLIST=libList)
	env.Replace(MYLIBDIRLIST=libDirList)

	cflags.append(['-O0','-g'])

	Export('env')

	#Real work begins here
	subProjs = []

	subProjs.append('Kernel')
	subProjs.append('Geometry')
	subProjs.append('DataObjects')
	subProjs.append('DataHandling')
	subProjs.append('Algorithms')
	subProjs.append('API')
	#subProjs.append('Services/SConscript')

	# we want to link libraries in the reverse order we build them
	shared_libraries = []
	static_libraries = []
	lib_list = []
	for subproj in subProjs:
		ret = SConscript(subproj+'/SConscript')
		shared_libraries.insert(0,ret['shared'])
		static_libraries.insert(0,ret['static'])
		lib_list.insert(0,ret['libs'])

	env.Replace(SHARED_LIST=shared_libraries)
	env.Replace(STATIC_LIST=static_libraries)
	env.Prepend(MYLIBLIST=lib_list)

	# main program
	ret = SConscript('Bin/SConscript')
	env.Append(LINKFLAGS=['-g'])

	# main program
	ret = SConscript('Bin/SConscript')

	# tests
	cxxtestgen = env.WhereIs('cxxtestgen.py')
	if cxxtestgen != None :
		ret = SConscript('Build/Tests/SConscript')
	else :
		print 'CXXTESTGEN is not installed - tests will not be built'

