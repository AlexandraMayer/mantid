#For Framework
import os
import platform
import sys
import shutil
import re
import string
from socket import gethostname

import MantidBuild
  
opts = Options('scons_options.py')
opts.Add('mingw','Set to 1 to use MinGW on Windows', 0)
opts.Add('msvc','Set to 1 to use Microsoft Visual Studio Compiler on Windows', 1)
opts.Add('debug','Set to 1 to build debug', 0)

base_env = Environment(ENV=os.environ, options = opts)
mingw_env = Environment(ENV=os.environ, options = opts, tools = [ 'mingw' ])
Help(opts.GenerateHelpText(base_env))
mingw = ARGUMENTS.get('mingw', 0)
msvc = ARGUMENTS.get('msvc', 1)
debug = ARGUMENTS.get('debug', 0)
bigshared = ARGUMENTS.get('bigshared', 0)
if int(msvc) :
	env = base_env
if int(mingw) :
	env = mingw_env
#get libraries and the library directories
print 'Current path == ',os.getcwd()
cwdpath=os.getcwd()
uppath=os.path.abspath('../')

libList = []
boost_append=''
if not env.GetOption('clean'): # do not re-rerun checking on a "scons -c"
	conf = Configure(env)
	if conf.CheckLib('boost_filesystem-gcc41', '_ZN5boost10filesystem6nativeERKSs') :
		boost_append = '-gcc41'
	env = conf.Finish()

libDirList = [uppath,cwdpath ]
cflags = []
dirList = []
cppPaths = []

boost_path = ''
poco_path = ''
fortran_type=''
third_party=''
gts_path = ''
glib_path = ''

#Get paths
if os.name == 'nt': 
	print "* COMMENCING WINDOWS BUILD *"
	third_party = os.path.abspath('../Third_Party/')
#	boost_path = 'C:/Program Files/boost/boost_1_34_1/boost'
	boost_path = third_party + '/include/'
	
	python_path = 'C:/Python25/'

	gts_path = third_party + '/include/gts'
	glib_path = third_party + '/include/gts/glib-2.0'
	libList.append('PocoUtil')
	libList.append('PocoFoundation')
	libList.append('PocoXML')
	libDirList.append(python_path + '/libs/')
	if int(mingw) :
		libDirList.append(third_party + '/lib/win32-MinGW/')
		libList.append('boost_python-mgw34-mt-1_34_1')
		libList.append('boost_filesystem-mgw34-mt-1_34_1')
		libList.append('boost_regex-mgw34-mt-1_34_1')
		libList.append('libpython25')
		libList.append('NeXus')
	else :
		libDirList.append(third_party + '/lib/win32/')
#		libList.append('boost_python-vc80-mt-1_34_1')
#		libList.append('boost_filesystem-vc80-mt-1_34_1')
#		libList.append('boost_regex-vc80-mt-1_34_1')
		libList.append('python25')
		libList.append('libNeXus-0')

	libList.append('gsl')
	libList.append('glib-2.0') #glib required by gts
	libList.append('gts-0.7') #gts
	libList.append('opengl32')#opengl required for rendering
	libList.append('glu32') #glu companion for opengl
	libList.append('ws2_32')   # winsock library

	cppPaths = [boost_path, third_party + '/include/', python_path + '/include/', gts_path, glib_path]
	
	#set up scons to embed manifest files
	env['LINKCOM'] = [env['LINKCOM'], 'mt.exe -nologo -manifest ${TARGET}.manifest -outputresource:$TARGET;1']
	env['SHLINKCOM'] = [env['SHLINKCOM'], 'mt.exe -nologo -manifest ${TARGET}.manifest -outputresource:$TARGET;2']

else:
	print "* COMMENCING LINUX BUILD *"
	f=open('Build/Scons_Linux.conf', 'r')
	for ln in f:
		boost_path=MantidBuild.procHeaderPath(ln,'BOOST_ROOT',boost_path)
		poco_path=MantidBuild.procHeaderPath(ln,'POCO_ROOT',poco_path)
	#		boost_append=MantidBuild.procHeader(ln,'BOOST_APPEND',boost_append)
		fortran_type=MantidBuild.procHeader(ln,'FORTRAN',fortran_type)
		third_party=os.path.abspath(MantidBuild.procHeader(ln,'THIRD',third_party))
	f.close()
	python_path = '/usr/local/python2.5'

print "POCO_ROOT: ",poco_path
print "BOOST_ROOT: ",boost_path
print "BOOST_APPEND: ",boost_append
print "THIRD_PARTY: ",third_party
print "PYTHON_ROOT: ",python_path

if os.name == 'nt':
	if int(mingw) :
		cflags = ['-g', '-O2', '-DPOCO_DLL']
		env.Append(LINKFLAGS=['-g','-Wl,--export-all-symbols'])
	else :
		if int(debug) :
			cflags = [ '/W3', '/Od', '/FD', '/EHsc', '/MDd', '/TP', '/D_DEBUG', '/DMS_VISUAL_STUDIO=1', '/DWIN32', '/D_WINDOWS', '/DPOCO_DLL', '/DWINVER=0x0500', '/D_USE_MATH_DEFINES', '/D_SCL_SECURE_NO_WARNINGS', '/D_CRT_SECURE_NO_WARNINGS', '/D_CRT_SECURE_NO_DEPRECATE', '/D_CRT_NONSTDC_NO_DEPRECATE', '/D_SCL_SECURE_NO_DEPRECATE', '/wd4275', '/wd4996' ]
		else :
			cflags = ['/Ox', '/Ot', '/W3','/EHsc', '/MD', '/TP', '/DMS_VISUAL_STUDIO=1', '/DWIN32', '/D_WINDOWS', '/DPOCO_DLL', '/DGSL_DLL', '/DWINVER=0x0500', '/D_USE_MATH_DEFINES', '/D_SCL_SECURE_NO_WARNINGS', '/D_CRT_SECURE_NO_WARNINGS', '/D_CRT_SECURE_NO_DEPRECATE', '/D_CRT_NONSTDC_NO_DEPRECATE', '/D_SCL_SECURE_NO_DEPRECATE', '/wd4275']
else:
	cppPaths.append('/usr/include/python' + sys.version[0:3])
	cppPaths.append(poco_path + 'include')
	cppPaths.append(poco_path +'Util')
	cppPaths.append(boost_path)

	print "CPPPATHS: ",cppPaths

	libList.append('python' + sys.version[0:3])
	libList.append('PocoUtil')
	libList.append('PocoFoundation')
	libList.append('PocoXML')
	libList.append('boost_python'+boost_append)
	libList.append('boost_filesystem'+boost_append)
	libList.append('boost_regex'+boost_append)
	libList.append('boost_signals'+boost_append)
	libList.append('NeXus')
	libList.append('GL')
	libList.append('GLU')
	

	if os.path.isdir('/usr/local/poco-1.3.1/'+ '/lib/Linux/i686') :
		libDirList.append('/usr/local/poco-1.3.1/' +'/lib/Linux/i686')
	else :
		libDirList.append(poco_path+'/lib')

	if int(debug) :
	    cflags.append(['-g','-O0','-Wall'])
	else :
	    cflags.append(['-g','-O3','-Wall'])

	env.Append(LINKFLAGS=['-g'])
	f=os.popen('gsl-config --cflags')
	flags=re.sub('\n','',f.readline())
	if (len(flags)>1):
		cflags.append([flags])
	f.close()
	f=os.popen('gsl-config --libs')
	flags=re.sub('\n','',f.readline())
	lpts=re.split("\s+",flags)
	lpts.append('-g')
	#check for GTS library
	f=os.popen('gts-config --cflags')
	flags=re.sub('\n','',f.readline())
	if (len(flags)>1):
		cflags.append([flags])
	f.close()
	f=os.popen('gts-config --libs')
	flags=re.sub('\n','',f.readline())
	lpts=re.split("\s+",flags)
	lpts.append('-g')
#check existence of Header files
conf = Configure(env)
if conf.CheckCXXHeader('unordered_map.h'):
	conf.env.Append('-DHAS_UNORDERED_MAP_H')
env = conf.Finish()

#GET INCLUDE PATHS FOR OTHER PARTS OF MANTID
dirpath=os.listdir(uppath)
while(len(dirpath)):
	try:
		item=dirpath.pop(0)
		for file in os.listdir("../"+item):
			fullPath="../"+item+"/"+file
			if (file=="inc"):
				cppPaths.insert(0,os.path.abspath(fullPath))
			elif (os.path.isdir(fullPath) and (not file.endswith('svn'))
			and (not file.endswith('test'))):
				dirpath.append(fullPath[3:])
	except:
		pass


#Collect the includes into a single directory
MantidBuild.collectIncludes('.', 'includes')

libDirList.append(os.path.abspath('./Bin/Shared'))

if os.name != 'nt':	
   ##
   ## BIT FOR -Wl,-rpath : This avoids the STUPID STUPID export LD_PATH in run_test 
   ## 
	newLibList=[]
	for libitem in libDirList:
		if (os.path.isdir(libitem)):
			newLibList.append('-Wl,-rpath,'+libitem)
	lpts.insert(0,newLibList)
	print "LibList ",newLibList
	print "LPTS == ",lpts
	env.Append(LINKFLAGS=lpts)
	
#Export for SConscripts
env.Append(CCFLAGS=cflags)
env.Append(CPPPATH=cppPaths)
env.Replace(MYLIBLIST=libList)
env.Replace(MYLIBDIRLIST=libDirList)

Export('env')

#Real work begins here
subProjs = []

#This order matters slightly! Kernel-geometry-api in that order
subProjs.append('Kernel')
subProjs.append('Geometry')
subProjs.append('API')
subProjs.append('DataObjects')
subProjs.append('Algorithms')
subProjs.append('DataHandling')
subProjs.append('Nexus')
subProjs.append('PythonAPI')
#subProjs.append('Services')

# we want to link libraries in the reverse order we build them
shared_libraries = []
static_libraries = []
shared_objects = []
lib_list = []
orig_libs = env['MYLIBLIST']


for subproj in subProjs:
	ret = SConscript([subproj+'/SConscript'])
	env.Install('Bin/Shared', ret['shared'])
	#env.Install('Bin/Static', ret['static'])
	shared_libraries.insert(0,ret['shared'])
	static_libraries.insert(0,ret['static'])
	shared_objects = shared_objects + ret['sharedobjs']
	lib_list.insert(0,ret['libs'])
	env.Replace(MYLIBLIST=lib_list + orig_libs)

env.Replace(SHARED_LIST=shared_libraries)
#env.Replace(STATIC_LIST=static_libraries)

#
# Correct bug in windows scons - OBJSUFFIX is not substituted for some reason
#
for i in range(len(shared_objects)) :
    shared_objects[i] = string.replace(shared_objects[i], '$OBJSUFFIX', env['OBJSUFFIX'])

#
# one big shared library
#
if int(bigshared) :
    big_shared = env.SharedLibrary('Bin/Shared/Mantid', shared_objects, LIBS=libList, LIBPATH=env['MYLIBDIRLIST'], PDB='Bin/Shared/Mantid.pdb')
    env.Replace(MYLIBLIST=['Mantid'] + orig_libs)
    
#User Algs
ret = SConscript(['UserAlgorithms/SConscript'])
env.Install('Bin/Plugins', ret['shared'])
    
# main program
ret = SConscript(['Main/SConscript'])
env.Install('Bin/Shared', ret['shared'])

skiptest=ARGUMENTS.get('skiptest',0)
if not int(skiptest):
	print 'Building Code and Tests.  Specify "skiptest=1" to skip the tests'
	# tests
	if os.name == 'nt':
		ret = SConscript(['Build/Tests/SConscript'])
	else:
		cxxtestgen = env.WhereIs('cxxtestgen.py')
		if cxxtestgen != None :
			ret = SConscript(['Build/Tests/SConscript'])
		else :
			print 'CXXTESTGEN is not installed - tests will not be built'
else:
	print "Not Building Tests."

