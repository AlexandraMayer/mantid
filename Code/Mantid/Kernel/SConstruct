#For MantidKernel

import os
import platform
import sys

from socket import gethostname

#get libraries and the library directories
libDirList = ['../', '.']
libList = ['python' + sys.version[0:3]]
cflags = []

cppPaths = [os.path.abspath('./inc')]


if os.name == 'nt':
	# assume this is Windows
	libDirList.append('../../Third_Party/lib/win32/')
	libDir = '../../Third_Party/lib/win32/'
	cflags = ['-W3','/EHsc', '/MTd', '/ZI', '/TP', '/DWIN32', '/D_DEBUG', '/D_WINDOWS', '/DPOCO_DLL', '/DWINVER=0x0500']
	
	for file in os.listdir(libDir):
		if file.endswith('.dll'):
			libList.append(file.replace('.dll',''))
	
else:
	#so this must be posix
	boost_path = ''
	poco_path = ''

	#Get paths
	f=open('../Build/Scons_Linux.conf', 'r')
	
	for ln in f:
		if ln.startswith('BOOST_ROOT'):
			boost_path=ln[11:]
			print boost_path
		elif ln.startswith('POCO_ROOT'):
			poco_path=ln[10:]
			print poco_path		
	f.close()
	
	cflags = ['-Wall', '-fPIC']
	cppPaths.append('/usr/include/python' + sys.version[0:3])
	cppPaths.append(poco_path +'Foundation/include')
	cppPaths.append(poco_path +'Util/include')

#GET LIST OF CPPS
codeFolder = os.path.abspath('./src')
listCpps = []
pathToRoot = '../'

print codeFolder
if os.path.exists(codeFolder):
	files = os.listdir(codeFolder)
	for file in files:
		if file.endswith('.cpp'):
			print file
			listCpps.append(codeFolder + '/' +  file)

# set header include paths
env = Environment(CPPPATH=cppPaths)
env.Append( CCFLAGS = cflags)

#BUILD CODE
env.SharedLibrary('lib/MantidKernel', listCpps, LIBS=[ ], LIBPATH=[ ], RPATH=libDirList)
