#For MantidMatlab

import os
import shutil
import re
import MantidBuild

#reject directory names that are not like r2008a
def readVersion(dirName) :      
        dirName = dirName.lower()
        matVersPat = 'r\\d{4}[a-z]+'
        compiledPat = re.compile(matVersPat)
        goodVersion = compiledPat.findall(dirName)
        if goodVersion :
                return goodVersion[0]
        else :
                return 'Error'

#GET LIST OF CPPS
codeFolder = os.path.abspath('./src')
listCpps = MantidBuild.getCPPFiles(codeFolder)
#Import environment
Import('env')
myenv = env.Clone()
myenv.Append(CPPDEFINES=[('IN_MANTID_MATLAB_API',1),('MATLAB_MEX_FILE',1)])

if os.name == 'nt' :
  # get a list of their matlab install directories, should be one directory for each installed version
  MATLABBASE = 'C:/Matlab/'              #demand they have installed in this directory
  allContents = os.listdir(MATLABBASE)
  # we are going  to store version information in a dictionary and link it to the directorys via a key
  keys = []
  versions = {}
  paths = {}
  for dir in allContents :
    if ( readVersion(dir) != 'Error' ) :
	  keys.append(dir.lower())
	  paths[dir.lower()] = dir
	  versions[dir.lower()] = readVersion(dir)
  
  if ( len(keys) < 1 ) :
    print '--Fatal error: couldn\'t find your matlab directory.  Is it in a default locations?----'
  keys.sort()                            #the version numbers go up in alphabetical order, everything is in lower case now
  matlabDir = paths[keys[0]]              #the earliest version is this one at the start of the list, use that
  matlabPath = MATLABBASE + matlabDir
  matlabVersion = versions[keys[0]]
  
  shutil.copy(matlabPath+'/extern/src/mwdebug.c','./src')
  myenv.Append(CPPPATH=[matlabPath+'/extern/include'])
  myenv.Append(MYLIBDIRLIST=[matlabPath+'/extern/lib/win32/microsoft'])
  myenv.Append(MYLIBLIST=['libmex', 'libmx','libmat'])
    
else:
    myenv.Append(CPPPATH=['/usr/local/matlab_2007a/extern/include'])
    myenv.Append(MYLIBDIRLIST=['/usr/local/matlab_2007a/bin/glnxa64'])
    myenv.Append(MYLIBLIST=['mex'])

#now check that the version old versions require us to define something, new versions require that we don't
MWSIZE_PROBLEM_VERSION = 'r2006a'       #in this version, and all versions before, mwSize is not defined in the Matlab headers
versionCompare = [MWSIZE_PROBLEM_VERSION]
versionCompare.append(matlabVersion)  #get ready to compare our versions to those problem ones
versionCompare.sort()                 #is the version higher or lower?
if ( versionCompare[len(versionCompare)-1] == MWSIZE_PROBLEM_VERSION ) : #the version is less than or equal to r2006a
  myenv.Append(CPPDEFINES=[('NEED_MWSIZE_SCONSCRIPT',1)])

listSharedObjects = MantidBuild.getSharedObjects(listCpps, myenv)

#BUILD CODE
shared_sources=listCpps[:]
shared_sources.append('linkoptions.def')
shared_sources.append('src/mwdebug.c')
shared = myenv.SharedLibrary('lib/MantidMatlabAPI', shared_sources, LIBS=myenv['MYLIBLIST'], LIBPATH=myenv['MYLIBDIRLIST'], PDB='lib/MantidMatlabAPI.pdb')
retval = { 'shared': shared, 'sharedobjs' : listSharedObjects, 'libs': [ 'MantidMatlabAPI' ] }
Clean(shared, 'src/mwdebug.c')
Return('retval')
