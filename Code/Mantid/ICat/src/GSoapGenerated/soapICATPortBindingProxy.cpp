/* soapICATPortBindingProxy.cpp
   Generated by gSOAP 2.7.16 from ICATService.h
   Copyright(C) 2000-2010, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#include "MantidIcat/GSoapGenerated/soapICATPortBindingProxy.h"

ICATPortBindingProxy::ICATPortBindingProxy()
{	ICATPortBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

ICATPortBindingProxy::ICATPortBindingProxy(const struct soap &_soap) :soap(_soap)
{ }

ICATPortBindingProxy::ICATPortBindingProxy(soap_mode iomode)
{	ICATPortBindingProxy_init(iomode, iomode);
}

ICATPortBindingProxy::ICATPortBindingProxy(soap_mode imode, soap_mode omode)
{	ICATPortBindingProxy_init(imode, omode);
}

void ICATPortBindingProxy::ICATPortBindingProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"ns3", "admin.client.icat3.uk", NULL, NULL},
	{"ns1", "client.icat3.uk", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	this->namespaces = namespaces;
}

ICATPortBindingProxy::~ICATPortBindingProxy()
{ }

void ICATPortBindingProxy::destroy()
{	soap_destroy(this);
	soap_end(this);
}

void ICATPortBindingProxy::soap_noheader()
{	header = NULL;
}

const SOAP_ENV__Fault *ICATPortBindingProxy::soap_fault()
{	return this->fault;
}

const char *ICATPortBindingProxy::soap_fault_string()
{	return *soap_faultstring(this);
}

const char *ICATPortBindingProxy::soap_fault_detail()
{	return *soap_faultdetail(this);
}

int ICATPortBindingProxy::soap_close_socket()
{	return soap_closesock(this);
}

void ICATPortBindingProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
void ICATPortBindingProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}

char *ICATPortBindingProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

int ICATPortBindingProxy::login(ns1__login *ns1__login_, ns1__loginResponse *ns1__loginResponse_)
{	struct soap *soap = this;
	struct __ns1__login soap_tmp___ns1__login;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__login.ns1__login_ = ns1__login_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__login(soap, &soap_tmp___ns1__login);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__login(soap, &soap_tmp___ns1__login, "-ns1:login", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__login(soap, &soap_tmp___ns1__login, "-ns1:login", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__loginResponse_)
		return soap_closesock(soap);
	ns1__loginResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__loginResponse_->soap_get(soap, "ns1:loginResponse", "ns1:loginResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ICATPortBindingProxy::loginLifetime(ns1__loginLifetime *ns1__loginLifetime_, ns1__loginLifetimeResponse *ns1__loginLifetimeResponse_)
{	struct soap *soap = this;
	struct __ns1__loginLifetime soap_tmp___ns1__loginLifetime;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__loginLifetime.ns1__loginLifetime_ = ns1__loginLifetime_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__loginLifetime(soap, &soap_tmp___ns1__loginLifetime);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__loginLifetime(soap, &soap_tmp___ns1__loginLifetime, "-ns1:loginLifetime", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__loginLifetime(soap, &soap_tmp___ns1__loginLifetime, "-ns1:loginLifetime", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__loginLifetimeResponse_)
		return soap_closesock(soap);
	ns1__loginLifetimeResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__loginLifetimeResponse_->soap_get(soap, "ns1:loginLifetimeResponse", "ns1:loginLifetimeResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ICATPortBindingProxy::addSample(ns1__addSample *ns1__addSample_, ns1__addSampleResponse *ns1__addSampleResponse_)
{	struct soap *soap = this;
	struct __ns1__addSample soap_tmp___ns1__addSample;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__addSample.ns1__addSample_ = ns1__addSample_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__addSample(soap, &soap_tmp___ns1__addSample);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__addSample(soap, &soap_tmp___ns1__addSample, "-ns1:addSample", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__addSample(soap, &soap_tmp___ns1__addSample, "-ns1:addSample", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__addSampleResponse_)
		return soap_closesock(soap);
	ns1__addSampleResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__addSampleResponse_->soap_get(soap, "ns1:addSampleResponse", "ns1:addSampleResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ICATPortBindingProxy::logout(ns1__logout *ns1__logout_, ns1__logoutResponse *ns1__logoutResponse_)
{	struct soap *soap = this;
	struct __ns1__logout soap_tmp___ns1__logout;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__logout.ns1__logout_ = ns1__logout_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__logout(soap, &soap_tmp___ns1__logout);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__logout(soap, &soap_tmp___ns1__logout, "-ns1:logout", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__logout(soap, &soap_tmp___ns1__logout, "-ns1:logout", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__logoutResponse_)
		return soap_closesock(soap);
	ns1__logoutResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__logoutResponse_->soap_get(soap, "ns1:logoutResponse", "ns1:logoutResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ICATPortBindingProxy::addSampleParameter(ns1__addSampleParameter *ns1__addSampleParameter_, ns1__addSampleParameterResponse *ns1__addSampleParameterResponse_)
{	struct soap *soap = this;
	struct __ns1__addSampleParameter soap_tmp___ns1__addSampleParameter;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__addSampleParameter.ns1__addSampleParameter_ = ns1__addSampleParameter_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__addSampleParameter(soap, &soap_tmp___ns1__addSampleParameter);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__addSampleParameter(soap, &soap_tmp___ns1__addSampleParameter, "-ns1:addSampleParameter", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__addSampleParameter(soap, &soap_tmp___ns1__addSampleParameter, "-ns1:addSampleParameter", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__addSampleParameterResponse_)
		return soap_closesock(soap);
	ns1__addSampleParameterResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__addSampleParameterResponse_->soap_get(soap, "ns1:addSampleParameterResponse", "ns1:addSampleParameterResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ICATPortBindingProxy::addPublication(ns1__addPublication *ns1__addPublication_, ns1__addPublicationResponse *ns1__addPublicationResponse_)
{	struct soap *soap = this;
	struct __ns1__addPublication soap_tmp___ns1__addPublication;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__addPublication.ns1__addPublication_ = ns1__addPublication_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__addPublication(soap, &soap_tmp___ns1__addPublication);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__addPublication(soap, &soap_tmp___ns1__addPublication, "-ns1:addPublication", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__addPublication(soap, &soap_tmp___ns1__addPublication, "-ns1:addPublication", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__addPublicationResponse_)
		return soap_closesock(soap);
	ns1__addPublicationResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__addPublicationResponse_->soap_get(soap, "ns1:addPublicationResponse", "ns1:addPublicationResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ICATPortBindingProxy::addKeyword(ns1__addKeyword *ns1__addKeyword_, ns1__addKeywordResponse *ns1__addKeywordResponse_)
{	struct soap *soap = this;
	struct __ns1__addKeyword soap_tmp___ns1__addKeyword;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__addKeyword.ns1__addKeyword_ = ns1__addKeyword_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__addKeyword(soap, &soap_tmp___ns1__addKeyword);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__addKeyword(soap, &soap_tmp___ns1__addKeyword, "-ns1:addKeyword", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__addKeyword(soap, &soap_tmp___ns1__addKeyword, "-ns1:addKeyword", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__addKeywordResponse_)
		return soap_closesock(soap);
	ns1__addKeywordResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__addKeywordResponse_->soap_get(soap, "ns1:addKeywordResponse", "ns1:addKeywordResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ICATPortBindingProxy::addInvestigator(ns1__addInvestigator *ns1__addInvestigator_, ns1__addInvestigatorResponse *ns1__addInvestigatorResponse_)
{	struct soap *soap = this;
	struct __ns1__addInvestigator soap_tmp___ns1__addInvestigator;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__addInvestigator.ns1__addInvestigator_ = ns1__addInvestigator_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__addInvestigator(soap, &soap_tmp___ns1__addInvestigator);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__addInvestigator(soap, &soap_tmp___ns1__addInvestigator, "-ns1:addInvestigator", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__addInvestigator(soap, &soap_tmp___ns1__addInvestigator, "-ns1:addInvestigator", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__addInvestigatorResponse_)
		return soap_closesock(soap);
	ns1__addInvestigatorResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__addInvestigatorResponse_->soap_get(soap, "ns1:addInvestigatorResponse", "ns1:addInvestigatorResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ICATPortBindingProxy::getInvestigation(ns1__getInvestigation *ns1__getInvestigation_, ns1__getInvestigationResponse *ns1__getInvestigationResponse_)
{	struct soap *soap = this;
	struct __ns1__getInvestigation soap_tmp___ns1__getInvestigation;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__getInvestigation.ns1__getInvestigation_ = ns1__getInvestigation_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__getInvestigation(soap, &soap_tmp___ns1__getInvestigation);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getInvestigation(soap, &soap_tmp___ns1__getInvestigation, "-ns1:getInvestigation", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getInvestigation(soap, &soap_tmp___ns1__getInvestigation, "-ns1:getInvestigation", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__getInvestigationResponse_)
		return soap_closesock(soap);
	ns1__getInvestigationResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__getInvestigationResponse_->soap_get(soap, "ns1:getInvestigationResponse", "ns1:getInvestigationResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ICATPortBindingProxy::getInvestigationIncludes(ns1__getInvestigationIncludes *ns1__getInvestigationIncludes_, ns1__getInvestigationIncludesResponse *ns1__getInvestigationIncludesResponse_)
{	struct soap *soap = this;
	struct __ns1__getInvestigationIncludes soap_tmp___ns1__getInvestigationIncludes;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__getInvestigationIncludes.ns1__getInvestigationIncludes_ = ns1__getInvestigationIncludes_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__getInvestigationIncludes(soap, &soap_tmp___ns1__getInvestigationIncludes);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getInvestigationIncludes(soap, &soap_tmp___ns1__getInvestigationIncludes, "-ns1:getInvestigationIncludes", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getInvestigationIncludes(soap, &soap_tmp___ns1__getInvestigationIncludes, "-ns1:getInvestigationIncludes", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__getInvestigationIncludesResponse_)
		return soap_closesock(soap);
	ns1__getInvestigationIncludesResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__getInvestigationIncludesResponse_->soap_get(soap, "ns1:getInvestigationIncludesResponse", "ns1:getInvestigationIncludesResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ICATPortBindingProxy::getDataset(ns1__getDataset *ns1__getDataset_, ns1__getDatasetResponse *ns1__getDatasetResponse_)
{	struct soap *soap = this;
	struct __ns1__getDataset soap_tmp___ns1__getDataset;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__getDataset.ns1__getDataset_ = ns1__getDataset_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__getDataset(soap, &soap_tmp___ns1__getDataset);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getDataset(soap, &soap_tmp___ns1__getDataset, "-ns1:getDataset", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getDataset(soap, &soap_tmp___ns1__getDataset, "-ns1:getDataset", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__getDatasetResponse_)
		return soap_closesock(soap);
	ns1__getDatasetResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__getDatasetResponse_->soap_get(soap, "ns1:getDatasetResponse", "ns1:getDatasetResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ICATPortBindingProxy::getDatasetIncludes(ns1__getDatasetIncludes *ns1__getDatasetIncludes_, ns1__getDatasetIncludesResponse *ns1__getDatasetIncludesResponse_)
{	struct soap *soap = this;
	struct __ns1__getDatasetIncludes soap_tmp___ns1__getDatasetIncludes;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__getDatasetIncludes.ns1__getDatasetIncludes_ = ns1__getDatasetIncludes_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__getDatasetIncludes(soap, &soap_tmp___ns1__getDatasetIncludes);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getDatasetIncludes(soap, &soap_tmp___ns1__getDatasetIncludes, "-ns1:getDatasetIncludes", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getDatasetIncludes(soap, &soap_tmp___ns1__getDatasetIncludes, "-ns1:getDatasetIncludes", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__getDatasetIncludesResponse_)
		return soap_closesock(soap);
	ns1__getDatasetIncludesResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__getDatasetIncludesResponse_->soap_get(soap, "ns1:getDatasetIncludesResponse", "ns1:getDatasetIncludesResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ICATPortBindingProxy::getDatafile(ns1__getDatafile *ns1__getDatafile_, ns1__getDatafileResponse *ns1__getDatafileResponse_)
{	struct soap *soap = this;
	struct __ns1__getDatafile soap_tmp___ns1__getDatafile;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__getDatafile.ns1__getDatafile_ = ns1__getDatafile_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__getDatafile(soap, &soap_tmp___ns1__getDatafile);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getDatafile(soap, &soap_tmp___ns1__getDatafile, "-ns1:getDatafile", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getDatafile(soap, &soap_tmp___ns1__getDatafile, "-ns1:getDatafile", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__getDatafileResponse_)
		return soap_closesock(soap);
	ns1__getDatafileResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__getDatafileResponse_->soap_get(soap, "ns1:getDatafileResponse", "ns1:getDatafileResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ICATPortBindingProxy::addDataFileParameter(ns1__addDataFileParameter *ns1__addDataFileParameter_, ns1__addDataFileParameterResponse *ns1__addDataFileParameterResponse_)
{	struct soap *soap = this;
	struct __ns1__addDataFileParameter soap_tmp___ns1__addDataFileParameter;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__addDataFileParameter.ns1__addDataFileParameter_ = ns1__addDataFileParameter_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__addDataFileParameter(soap, &soap_tmp___ns1__addDataFileParameter);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__addDataFileParameter(soap, &soap_tmp___ns1__addDataFileParameter, "-ns1:addDataFileParameter", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__addDataFileParameter(soap, &soap_tmp___ns1__addDataFileParameter, "-ns1:addDataFileParameter", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__addDataFileParameterResponse_)
		return soap_closesock(soap);
	ns1__addDataFileParameterResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__addDataFileParameterResponse_->soap_get(soap, "ns1:addDataFileParameterResponse", "ns1:addDataFileParameterResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ICATPortBindingProxy::getUserDetails(ns1__getUserDetails *ns1__getUserDetails_, ns1__getUserDetailsResponse *ns1__getUserDetailsResponse_)
{	struct soap *soap = this;
	struct __ns1__getUserDetails soap_tmp___ns1__getUserDetails;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__getUserDetails.ns1__getUserDetails_ = ns1__getUserDetails_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__getUserDetails(soap, &soap_tmp___ns1__getUserDetails);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getUserDetails(soap, &soap_tmp___ns1__getUserDetails, "-ns1:getUserDetails", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getUserDetails(soap, &soap_tmp___ns1__getUserDetails, "-ns1:getUserDetails", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__getUserDetailsResponse_)
		return soap_closesock(soap);
	ns1__getUserDetailsResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__getUserDetailsResponse_->soap_get(soap, "ns1:getUserDetailsResponse", "ns1:getUserDetailsResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ICATPortBindingProxy::ingestMetadata(ns1__ingestMetadata *ns1__ingestMetadata_, ns1__ingestMetadataResponse *ns1__ingestMetadataResponse_)
{	struct soap *soap = this;
	struct __ns1__ingestMetadata soap_tmp___ns1__ingestMetadata;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ingestMetadata.ns1__ingestMetadata_ = ns1__ingestMetadata_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__ingestMetadata(soap, &soap_tmp___ns1__ingestMetadata);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ingestMetadata(soap, &soap_tmp___ns1__ingestMetadata, "-ns1:ingestMetadata", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ingestMetadata(soap, &soap_tmp___ns1__ingestMetadata, "-ns1:ingestMetadata", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__ingestMetadataResponse_)
		return soap_closesock(soap);
	ns1__ingestMetadataResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ingestMetadataResponse_->soap_get(soap, "ns1:ingestMetadataResponse", "ns1:ingestMetadataResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ICATPortBindingProxy::getDatafiles(ns1__getDatafiles *ns1__getDatafiles_, ns1__getDatafilesResponse *ns1__getDatafilesResponse_)
{	struct soap *soap = this;
	struct __ns1__getDatafiles soap_tmp___ns1__getDatafiles;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__getDatafiles.ns1__getDatafiles_ = ns1__getDatafiles_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__getDatafiles(soap, &soap_tmp___ns1__getDatafiles);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getDatafiles(soap, &soap_tmp___ns1__getDatafiles, "-ns1:getDatafiles", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getDatafiles(soap, &soap_tmp___ns1__getDatafiles, "-ns1:getDatafiles", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__getDatafilesResponse_)
		return soap_closesock(soap);
	ns1__getDatafilesResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__getDatafilesResponse_->soap_get(soap, "ns1:getDatafilesResponse", "ns1:getDatafilesResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ICATPortBindingProxy::createDataFile(ns1__createDataFile *ns1__createDataFile_, ns1__createDataFileResponse *ns1__createDataFileResponse_)
{	struct soap *soap = this;
	struct __ns1__createDataFile soap_tmp___ns1__createDataFile;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__createDataFile.ns1__createDataFile_ = ns1__createDataFile_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__createDataFile(soap, &soap_tmp___ns1__createDataFile);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__createDataFile(soap, &soap_tmp___ns1__createDataFile, "-ns1:createDataFile", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__createDataFile(soap, &soap_tmp___ns1__createDataFile, "-ns1:createDataFile", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__createDataFileResponse_)
		return soap_closesock(soap);
	ns1__createDataFileResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__createDataFileResponse_->soap_get(soap, "ns1:createDataFileResponse", "ns1:createDataFileResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ICATPortBindingProxy::createDataFiles(ns1__createDataFiles *ns1__createDataFiles_, ns1__createDataFilesResponse *ns1__createDataFilesResponse_)
{	struct soap *soap = this;
	struct __ns1__createDataFiles soap_tmp___ns1__createDataFiles;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__createDataFiles.ns1__createDataFiles_ = ns1__createDataFiles_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__createDataFiles(soap, &soap_tmp___ns1__createDataFiles);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__createDataFiles(soap, &soap_tmp___ns1__createDataFiles, "-ns1:createDataFiles", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__createDataFiles(soap, &soap_tmp___ns1__createDataFiles, "-ns1:createDataFiles", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__createDataFilesResponse_)
		return soap_closesock(soap);
	ns1__createDataFilesResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__createDataFilesResponse_->soap_get(soap, "ns1:createDataFilesResponse", "ns1:createDataFilesResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ICATPortBindingProxy::deleteDataFile(ns1__deleteDataFile *ns1__deleteDataFile_, ns1__deleteDataFileResponse *ns1__deleteDataFileResponse_)
{	struct soap *soap = this;
	struct __ns1__deleteDataFile soap_tmp___ns1__deleteDataFile;
	struct __ns1__deleteDataFileResponse *soap_tmp___ns1__deleteDataFileResponse;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__deleteDataFile.ns1__deleteDataFile_ = ns1__deleteDataFile_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__deleteDataFile(soap, &soap_tmp___ns1__deleteDataFile);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__deleteDataFile(soap, &soap_tmp___ns1__deleteDataFile, "-ns1:deleteDataFile", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__deleteDataFile(soap, &soap_tmp___ns1__deleteDataFile, "-ns1:deleteDataFile", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__deleteDataFileResponse_)
		return soap_closesock(soap);
	ns1__deleteDataFileResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp___ns1__deleteDataFileResponse = soap_get___ns1__deleteDataFileResponse(soap, NULL, "-ns1:deleteDataFileResponse", "ns1:deleteDataFileResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (ns1__deleteDataFileResponse_ && soap_tmp___ns1__deleteDataFileResponse->ns1__deleteDataFileResponse_)
		*ns1__deleteDataFileResponse_ = *soap_tmp___ns1__deleteDataFileResponse->ns1__deleteDataFileResponse_;
	return soap_closesock(soap);
}

int ICATPortBindingProxy::removeDataFile(ns1__removeDataFile *ns1__removeDataFile_, ns1__removeDataFileResponse *ns1__removeDataFileResponse_)
{	struct soap *soap = this;
	struct __ns1__removeDataFile soap_tmp___ns1__removeDataFile;
	struct __ns1__removeDataFileResponse *soap_tmp___ns1__removeDataFileResponse;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__removeDataFile.ns1__removeDataFile_ = ns1__removeDataFile_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__removeDataFile(soap, &soap_tmp___ns1__removeDataFile);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__removeDataFile(soap, &soap_tmp___ns1__removeDataFile, "-ns1:removeDataFile", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__removeDataFile(soap, &soap_tmp___ns1__removeDataFile, "-ns1:removeDataFile", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__removeDataFileResponse_)
		return soap_closesock(soap);
	ns1__removeDataFileResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp___ns1__removeDataFileResponse = soap_get___ns1__removeDataFileResponse(soap, NULL, "-ns1:removeDataFileResponse", "ns1:removeDataFileResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (ns1__removeDataFileResponse_ && soap_tmp___ns1__removeDataFileResponse->ns1__removeDataFileResponse_)
		*ns1__removeDataFileResponse_ = *soap_tmp___ns1__removeDataFileResponse->ns1__removeDataFileResponse_;
	return soap_closesock(soap);
}

int ICATPortBindingProxy::modifyDataFile(ns1__modifyDataFile *ns1__modifyDataFile_, ns1__modifyDataFileResponse *ns1__modifyDataFileResponse_)
{	struct soap *soap = this;
	struct __ns1__modifyDataFile soap_tmp___ns1__modifyDataFile;
	struct __ns1__modifyDataFileResponse *soap_tmp___ns1__modifyDataFileResponse;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__modifyDataFile.ns1__modifyDataFile_ = ns1__modifyDataFile_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__modifyDataFile(soap, &soap_tmp___ns1__modifyDataFile);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__modifyDataFile(soap, &soap_tmp___ns1__modifyDataFile, "-ns1:modifyDataFile", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__modifyDataFile(soap, &soap_tmp___ns1__modifyDataFile, "-ns1:modifyDataFile", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__modifyDataFileResponse_)
		return soap_closesock(soap);
	ns1__modifyDataFileResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp___ns1__modifyDataFileResponse = soap_get___ns1__modifyDataFileResponse(soap, NULL, "-ns1:modifyDataFileResponse", "ns1:modifyDataFileResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (ns1__modifyDataFileResponse_ && soap_tmp___ns1__modifyDataFileResponse->ns1__modifyDataFileResponse_)
		*ns1__modifyDataFileResponse_ = *soap_tmp___ns1__modifyDataFileResponse->ns1__modifyDataFileResponse_;
	return soap_closesock(soap);
}

int ICATPortBindingProxy::addDataFileParameters(ns1__addDataFileParameters *ns1__addDataFileParameters_, ns1__addDataFileParametersResponse *ns1__addDataFileParametersResponse_)
{	struct soap *soap = this;
	struct __ns1__addDataFileParameters soap_tmp___ns1__addDataFileParameters;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__addDataFileParameters.ns1__addDataFileParameters_ = ns1__addDataFileParameters_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__addDataFileParameters(soap, &soap_tmp___ns1__addDataFileParameters);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__addDataFileParameters(soap, &soap_tmp___ns1__addDataFileParameters, "-ns1:addDataFileParameters", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__addDataFileParameters(soap, &soap_tmp___ns1__addDataFileParameters, "-ns1:addDataFileParameters", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__addDataFileParametersResponse_)
		return soap_closesock(soap);
	ns1__addDataFileParametersResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__addDataFileParametersResponse_->soap_get(soap, "ns1:addDataFileParametersResponse", "ns1:addDataFileParametersResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ICATPortBindingProxy::modifyDataFileParameter(ns1__modifyDataFileParameter *ns1__modifyDataFileParameter_, ns1__modifyDataFileParameterResponse *ns1__modifyDataFileParameterResponse_)
{	struct soap *soap = this;
	struct __ns1__modifyDataFileParameter soap_tmp___ns1__modifyDataFileParameter;
	struct __ns1__modifyDataFileParameterResponse *soap_tmp___ns1__modifyDataFileParameterResponse;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__modifyDataFileParameter.ns1__modifyDataFileParameter_ = ns1__modifyDataFileParameter_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__modifyDataFileParameter(soap, &soap_tmp___ns1__modifyDataFileParameter);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__modifyDataFileParameter(soap, &soap_tmp___ns1__modifyDataFileParameter, "-ns1:modifyDataFileParameter", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__modifyDataFileParameter(soap, &soap_tmp___ns1__modifyDataFileParameter, "-ns1:modifyDataFileParameter", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__modifyDataFileParameterResponse_)
		return soap_closesock(soap);
	ns1__modifyDataFileParameterResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp___ns1__modifyDataFileParameterResponse = soap_get___ns1__modifyDataFileParameterResponse(soap, NULL, "-ns1:modifyDataFileParameterResponse", "ns1:modifyDataFileParameterResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (ns1__modifyDataFileParameterResponse_ && soap_tmp___ns1__modifyDataFileParameterResponse->ns1__modifyDataFileParameterResponse_)
		*ns1__modifyDataFileParameterResponse_ = *soap_tmp___ns1__modifyDataFileParameterResponse->ns1__modifyDataFileParameterResponse_;
	return soap_closesock(soap);
}

int ICATPortBindingProxy::removeDataFileParameter(ns1__removeDataFileParameter *ns1__removeDataFileParameter_, ns1__removeDataFileParameterResponse *ns1__removeDataFileParameterResponse_)
{	struct soap *soap = this;
	struct __ns1__removeDataFileParameter soap_tmp___ns1__removeDataFileParameter;
	struct __ns1__removeDataFileParameterResponse *soap_tmp___ns1__removeDataFileParameterResponse;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__removeDataFileParameter.ns1__removeDataFileParameter_ = ns1__removeDataFileParameter_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__removeDataFileParameter(soap, &soap_tmp___ns1__removeDataFileParameter);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__removeDataFileParameter(soap, &soap_tmp___ns1__removeDataFileParameter, "-ns1:removeDataFileParameter", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__removeDataFileParameter(soap, &soap_tmp___ns1__removeDataFileParameter, "-ns1:removeDataFileParameter", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__removeDataFileParameterResponse_)
		return soap_closesock(soap);
	ns1__removeDataFileParameterResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp___ns1__removeDataFileParameterResponse = soap_get___ns1__removeDataFileParameterResponse(soap, NULL, "-ns1:removeDataFileParameterResponse", "ns1:removeDataFileParameterResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (ns1__removeDataFileParameterResponse_ && soap_tmp___ns1__removeDataFileParameterResponse->ns1__removeDataFileParameterResponse_)
		*ns1__removeDataFileParameterResponse_ = *soap_tmp___ns1__removeDataFileParameterResponse->ns1__removeDataFileParameterResponse_;
	return soap_closesock(soap);
}

int ICATPortBindingProxy::deleteDataFileParameter(ns1__deleteDataFileParameter *ns1__deleteDataFileParameter_, ns1__deleteDataFileParameterResponse *ns1__deleteDataFileParameterResponse_)
{	struct soap *soap = this;
	struct __ns1__deleteDataFileParameter soap_tmp___ns1__deleteDataFileParameter;
	struct __ns1__deleteDataFileParameterResponse *soap_tmp___ns1__deleteDataFileParameterResponse;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__deleteDataFileParameter.ns1__deleteDataFileParameter_ = ns1__deleteDataFileParameter_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__deleteDataFileParameter(soap, &soap_tmp___ns1__deleteDataFileParameter);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__deleteDataFileParameter(soap, &soap_tmp___ns1__deleteDataFileParameter, "-ns1:deleteDataFileParameter", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__deleteDataFileParameter(soap, &soap_tmp___ns1__deleteDataFileParameter, "-ns1:deleteDataFileParameter", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__deleteDataFileParameterResponse_)
		return soap_closesock(soap);
	ns1__deleteDataFileParameterResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp___ns1__deleteDataFileParameterResponse = soap_get___ns1__deleteDataFileParameterResponse(soap, NULL, "-ns1:deleteDataFileParameterResponse", "ns1:deleteDataFileParameterResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (ns1__deleteDataFileParameterResponse_ && soap_tmp___ns1__deleteDataFileParameterResponse->ns1__deleteDataFileParameterResponse_)
		*ns1__deleteDataFileParameterResponse_ = *soap_tmp___ns1__deleteDataFileParameterResponse->ns1__deleteDataFileParameterResponse_;
	return soap_closesock(soap);
}

int ICATPortBindingProxy::getAuthorisations(ns1__getAuthorisations *ns1__getAuthorisations_, ns1__getAuthorisationsResponse *ns1__getAuthorisationsResponse_)
{	struct soap *soap = this;
	struct __ns1__getAuthorisations soap_tmp___ns1__getAuthorisations;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__getAuthorisations.ns1__getAuthorisations_ = ns1__getAuthorisations_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__getAuthorisations(soap, &soap_tmp___ns1__getAuthorisations);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getAuthorisations(soap, &soap_tmp___ns1__getAuthorisations, "-ns1:getAuthorisations", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getAuthorisations(soap, &soap_tmp___ns1__getAuthorisations, "-ns1:getAuthorisations", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__getAuthorisationsResponse_)
		return soap_closesock(soap);
	ns1__getAuthorisationsResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__getAuthorisationsResponse_->soap_get(soap, "ns1:getAuthorisationsResponse", "ns1:getAuthorisationsResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ICATPortBindingProxy::addAuthorisation(ns1__addAuthorisation *ns1__addAuthorisation_, ns1__addAuthorisationResponse *ns1__addAuthorisationResponse_)
{	struct soap *soap = this;
	struct __ns1__addAuthorisation soap_tmp___ns1__addAuthorisation;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__addAuthorisation.ns1__addAuthorisation_ = ns1__addAuthorisation_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__addAuthorisation(soap, &soap_tmp___ns1__addAuthorisation);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__addAuthorisation(soap, &soap_tmp___ns1__addAuthorisation, "-ns1:addAuthorisation", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__addAuthorisation(soap, &soap_tmp___ns1__addAuthorisation, "-ns1:addAuthorisation", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__addAuthorisationResponse_)
		return soap_closesock(soap);
	ns1__addAuthorisationResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__addAuthorisationResponse_->soap_get(soap, "ns1:addAuthorisationResponse", "ns1:addAuthorisationResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ICATPortBindingProxy::deleteAuthorisation(ns1__deleteAuthorisation *ns1__deleteAuthorisation_, ns1__deleteAuthorisationResponse *ns1__deleteAuthorisationResponse_)
{	struct soap *soap = this;
	struct __ns1__deleteAuthorisation soap_tmp___ns1__deleteAuthorisation;
	struct __ns1__deleteAuthorisationResponse *soap_tmp___ns1__deleteAuthorisationResponse;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__deleteAuthorisation.ns1__deleteAuthorisation_ = ns1__deleteAuthorisation_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__deleteAuthorisation(soap, &soap_tmp___ns1__deleteAuthorisation);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__deleteAuthorisation(soap, &soap_tmp___ns1__deleteAuthorisation, "-ns1:deleteAuthorisation", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__deleteAuthorisation(soap, &soap_tmp___ns1__deleteAuthorisation, "-ns1:deleteAuthorisation", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__deleteAuthorisationResponse_)
		return soap_closesock(soap);
	ns1__deleteAuthorisationResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp___ns1__deleteAuthorisationResponse = soap_get___ns1__deleteAuthorisationResponse(soap, NULL, "-ns1:deleteAuthorisationResponse", "ns1:deleteAuthorisationResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (ns1__deleteAuthorisationResponse_ && soap_tmp___ns1__deleteAuthorisationResponse->ns1__deleteAuthorisationResponse_)
		*ns1__deleteAuthorisationResponse_ = *soap_tmp___ns1__deleteAuthorisationResponse->ns1__deleteAuthorisationResponse_;
	return soap_closesock(soap);
}

int ICATPortBindingProxy::removeAuthorisation(ns1__removeAuthorisation *ns1__removeAuthorisation_, ns1__removeAuthorisationResponse *ns1__removeAuthorisationResponse_)
{	struct soap *soap = this;
	struct __ns1__removeAuthorisation soap_tmp___ns1__removeAuthorisation;
	struct __ns1__removeAuthorisationResponse *soap_tmp___ns1__removeAuthorisationResponse;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__removeAuthorisation.ns1__removeAuthorisation_ = ns1__removeAuthorisation_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__removeAuthorisation(soap, &soap_tmp___ns1__removeAuthorisation);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__removeAuthorisation(soap, &soap_tmp___ns1__removeAuthorisation, "-ns1:removeAuthorisation", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__removeAuthorisation(soap, &soap_tmp___ns1__removeAuthorisation, "-ns1:removeAuthorisation", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__removeAuthorisationResponse_)
		return soap_closesock(soap);
	ns1__removeAuthorisationResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp___ns1__removeAuthorisationResponse = soap_get___ns1__removeAuthorisationResponse(soap, NULL, "-ns1:removeAuthorisationResponse", "ns1:removeAuthorisationResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (ns1__removeAuthorisationResponse_ && soap_tmp___ns1__removeAuthorisationResponse->ns1__removeAuthorisationResponse_)
		*ns1__removeAuthorisationResponse_ = *soap_tmp___ns1__removeAuthorisationResponse->ns1__removeAuthorisationResponse_;
	return soap_closesock(soap);
}

int ICATPortBindingProxy::updateAuthorisation(ns1__updateAuthorisation *ns1__updateAuthorisation_, ns1__updateAuthorisationResponse *ns1__updateAuthorisationResponse_)
{	struct soap *soap = this;
	struct __ns1__updateAuthorisation soap_tmp___ns1__updateAuthorisation;
	struct __ns1__updateAuthorisationResponse *soap_tmp___ns1__updateAuthorisationResponse;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__updateAuthorisation.ns1__updateAuthorisation_ = ns1__updateAuthorisation_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__updateAuthorisation(soap, &soap_tmp___ns1__updateAuthorisation);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__updateAuthorisation(soap, &soap_tmp___ns1__updateAuthorisation, "-ns1:updateAuthorisation", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__updateAuthorisation(soap, &soap_tmp___ns1__updateAuthorisation, "-ns1:updateAuthorisation", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__updateAuthorisationResponse_)
		return soap_closesock(soap);
	ns1__updateAuthorisationResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp___ns1__updateAuthorisationResponse = soap_get___ns1__updateAuthorisationResponse(soap, NULL, "-ns1:updateAuthorisationResponse", "ns1:updateAuthorisationResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (ns1__updateAuthorisationResponse_ && soap_tmp___ns1__updateAuthorisationResponse->ns1__updateAuthorisationResponse_)
		*ns1__updateAuthorisationResponse_ = *soap_tmp___ns1__updateAuthorisationResponse->ns1__updateAuthorisationResponse_;
	return soap_closesock(soap);
}

int ICATPortBindingProxy::getInvestigationsIncludes(ns1__getInvestigationsIncludes *ns1__getInvestigationsIncludes_, ns1__getInvestigationsIncludesResponse *ns1__getInvestigationsIncludesResponse_)
{	struct soap *soap = this;
	struct __ns1__getInvestigationsIncludes soap_tmp___ns1__getInvestigationsIncludes;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__getInvestigationsIncludes.ns1__getInvestigationsIncludes_ = ns1__getInvestigationsIncludes_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__getInvestigationsIncludes(soap, &soap_tmp___ns1__getInvestigationsIncludes);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getInvestigationsIncludes(soap, &soap_tmp___ns1__getInvestigationsIncludes, "-ns1:getInvestigationsIncludes", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getInvestigationsIncludes(soap, &soap_tmp___ns1__getInvestigationsIncludes, "-ns1:getInvestigationsIncludes", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__getInvestigationsIncludesResponse_)
		return soap_closesock(soap);
	ns1__getInvestigationsIncludesResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__getInvestigationsIncludesResponse_->soap_get(soap, "ns1:getInvestigationsIncludesResponse", "ns1:getInvestigationsIncludesResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ICATPortBindingProxy::createInvestigation(ns1__createInvestigation *ns1__createInvestigation_, ns1__createInvestigationResponse *ns1__createInvestigationResponse_)
{	struct soap *soap = this;
	struct __ns1__createInvestigation soap_tmp___ns1__createInvestigation;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__createInvestigation.ns1__createInvestigation_ = ns1__createInvestigation_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__createInvestigation(soap, &soap_tmp___ns1__createInvestigation);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__createInvestigation(soap, &soap_tmp___ns1__createInvestigation, "-ns1:createInvestigation", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__createInvestigation(soap, &soap_tmp___ns1__createInvestigation, "-ns1:createInvestigation", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__createInvestigationResponse_)
		return soap_closesock(soap);
	ns1__createInvestigationResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__createInvestigationResponse_->soap_get(soap, "ns1:createInvestigationResponse", "ns1:createInvestigationResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ICATPortBindingProxy::removeInvestigation(ns1__removeInvestigation *ns1__removeInvestigation_, ns1__removeInvestigationResponse *ns1__removeInvestigationResponse_)
{	struct soap *soap = this;
	struct __ns1__removeInvestigation soap_tmp___ns1__removeInvestigation;
	struct __ns1__removeInvestigationResponse *soap_tmp___ns1__removeInvestigationResponse;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__removeInvestigation.ns1__removeInvestigation_ = ns1__removeInvestigation_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__removeInvestigation(soap, &soap_tmp___ns1__removeInvestigation);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__removeInvestigation(soap, &soap_tmp___ns1__removeInvestigation, "-ns1:removeInvestigation", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__removeInvestigation(soap, &soap_tmp___ns1__removeInvestigation, "-ns1:removeInvestigation", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__removeInvestigationResponse_)
		return soap_closesock(soap);
	ns1__removeInvestigationResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp___ns1__removeInvestigationResponse = soap_get___ns1__removeInvestigationResponse(soap, NULL, "-ns1:removeInvestigationResponse", "ns1:removeInvestigationResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (ns1__removeInvestigationResponse_ && soap_tmp___ns1__removeInvestigationResponse->ns1__removeInvestigationResponse_)
		*ns1__removeInvestigationResponse_ = *soap_tmp___ns1__removeInvestigationResponse->ns1__removeInvestigationResponse_;
	return soap_closesock(soap);
}

int ICATPortBindingProxy::deleteInvestigation(ns1__deleteInvestigation *ns1__deleteInvestigation_, ns1__deleteInvestigationResponse *ns1__deleteInvestigationResponse_)
{	struct soap *soap = this;
	struct __ns1__deleteInvestigation soap_tmp___ns1__deleteInvestigation;
	struct __ns1__deleteInvestigationResponse *soap_tmp___ns1__deleteInvestigationResponse;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__deleteInvestigation.ns1__deleteInvestigation_ = ns1__deleteInvestigation_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__deleteInvestigation(soap, &soap_tmp___ns1__deleteInvestigation);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__deleteInvestigation(soap, &soap_tmp___ns1__deleteInvestigation, "-ns1:deleteInvestigation", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__deleteInvestigation(soap, &soap_tmp___ns1__deleteInvestigation, "-ns1:deleteInvestigation", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__deleteInvestigationResponse_)
		return soap_closesock(soap);
	ns1__deleteInvestigationResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp___ns1__deleteInvestigationResponse = soap_get___ns1__deleteInvestigationResponse(soap, NULL, "-ns1:deleteInvestigationResponse", "ns1:deleteInvestigationResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (ns1__deleteInvestigationResponse_ && soap_tmp___ns1__deleteInvestigationResponse->ns1__deleteInvestigationResponse_)
		*ns1__deleteInvestigationResponse_ = *soap_tmp___ns1__deleteInvestigationResponse->ns1__deleteInvestigationResponse_;
	return soap_closesock(soap);
}

int ICATPortBindingProxy::modifyInvestigation(ns1__modifyInvestigation *ns1__modifyInvestigation_, ns1__modifyInvestigationResponse *ns1__modifyInvestigationResponse_)
{	struct soap *soap = this;
	struct __ns1__modifyInvestigation soap_tmp___ns1__modifyInvestigation;
	struct __ns1__modifyInvestigationResponse *soap_tmp___ns1__modifyInvestigationResponse;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__modifyInvestigation.ns1__modifyInvestigation_ = ns1__modifyInvestigation_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__modifyInvestigation(soap, &soap_tmp___ns1__modifyInvestigation);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__modifyInvestigation(soap, &soap_tmp___ns1__modifyInvestigation, "-ns1:modifyInvestigation", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__modifyInvestigation(soap, &soap_tmp___ns1__modifyInvestigation, "-ns1:modifyInvestigation", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__modifyInvestigationResponse_)
		return soap_closesock(soap);
	ns1__modifyInvestigationResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp___ns1__modifyInvestigationResponse = soap_get___ns1__modifyInvestigationResponse(soap, NULL, "-ns1:modifyInvestigationResponse", "ns1:modifyInvestigationResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (ns1__modifyInvestigationResponse_ && soap_tmp___ns1__modifyInvestigationResponse->ns1__modifyInvestigationResponse_)
		*ns1__modifyInvestigationResponse_ = *soap_tmp___ns1__modifyInvestigationResponse->ns1__modifyInvestigationResponse_;
	return soap_closesock(soap);
}

int ICATPortBindingProxy::removeKeyword(ns1__removeKeyword *ns1__removeKeyword_, ns1__removeKeywordResponse *ns1__removeKeywordResponse_)
{	struct soap *soap = this;
	struct __ns1__removeKeyword soap_tmp___ns1__removeKeyword;
	struct __ns1__removeKeywordResponse *soap_tmp___ns1__removeKeywordResponse;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__removeKeyword.ns1__removeKeyword_ = ns1__removeKeyword_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__removeKeyword(soap, &soap_tmp___ns1__removeKeyword);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__removeKeyword(soap, &soap_tmp___ns1__removeKeyword, "-ns1:removeKeyword", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__removeKeyword(soap, &soap_tmp___ns1__removeKeyword, "-ns1:removeKeyword", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__removeKeywordResponse_)
		return soap_closesock(soap);
	ns1__removeKeywordResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp___ns1__removeKeywordResponse = soap_get___ns1__removeKeywordResponse(soap, NULL, "-ns1:removeKeywordResponse", "ns1:removeKeywordResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (ns1__removeKeywordResponse_ && soap_tmp___ns1__removeKeywordResponse->ns1__removeKeywordResponse_)
		*ns1__removeKeywordResponse_ = *soap_tmp___ns1__removeKeywordResponse->ns1__removeKeywordResponse_;
	return soap_closesock(soap);
}

int ICATPortBindingProxy::deleteKeyword(ns1__deleteKeyword *ns1__deleteKeyword_, ns1__deleteKeywordResponse *ns1__deleteKeywordResponse_)
{	struct soap *soap = this;
	struct __ns1__deleteKeyword soap_tmp___ns1__deleteKeyword;
	struct __ns1__deleteKeywordResponse *soap_tmp___ns1__deleteKeywordResponse;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__deleteKeyword.ns1__deleteKeyword_ = ns1__deleteKeyword_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__deleteKeyword(soap, &soap_tmp___ns1__deleteKeyword);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__deleteKeyword(soap, &soap_tmp___ns1__deleteKeyword, "-ns1:deleteKeyword", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__deleteKeyword(soap, &soap_tmp___ns1__deleteKeyword, "-ns1:deleteKeyword", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__deleteKeywordResponse_)
		return soap_closesock(soap);
	ns1__deleteKeywordResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp___ns1__deleteKeywordResponse = soap_get___ns1__deleteKeywordResponse(soap, NULL, "-ns1:deleteKeywordResponse", "ns1:deleteKeywordResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (ns1__deleteKeywordResponse_ && soap_tmp___ns1__deleteKeywordResponse->ns1__deleteKeywordResponse_)
		*ns1__deleteKeywordResponse_ = *soap_tmp___ns1__deleteKeywordResponse->ns1__deleteKeywordResponse_;
	return soap_closesock(soap);
}

int ICATPortBindingProxy::removePublication(ns1__removePublication *ns1__removePublication_, ns1__removePublicationResponse *ns1__removePublicationResponse_)
{	struct soap *soap = this;
	struct __ns1__removePublication soap_tmp___ns1__removePublication;
	struct __ns1__removePublicationResponse *soap_tmp___ns1__removePublicationResponse;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__removePublication.ns1__removePublication_ = ns1__removePublication_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__removePublication(soap, &soap_tmp___ns1__removePublication);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__removePublication(soap, &soap_tmp___ns1__removePublication, "-ns1:removePublication", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__removePublication(soap, &soap_tmp___ns1__removePublication, "-ns1:removePublication", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__removePublicationResponse_)
		return soap_closesock(soap);
	ns1__removePublicationResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp___ns1__removePublicationResponse = soap_get___ns1__removePublicationResponse(soap, NULL, "-ns1:removePublicationResponse", "ns1:removePublicationResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (ns1__removePublicationResponse_ && soap_tmp___ns1__removePublicationResponse->ns1__removePublicationResponse_)
		*ns1__removePublicationResponse_ = *soap_tmp___ns1__removePublicationResponse->ns1__removePublicationResponse_;
	return soap_closesock(soap);
}

int ICATPortBindingProxy::deletePublication(ns1__deletePublication *ns1__deletePublication_, ns1__deletePublicationResponse *ns1__deletePublicationResponse_)
{	struct soap *soap = this;
	struct __ns1__deletePublication soap_tmp___ns1__deletePublication;
	struct __ns1__deletePublicationResponse *soap_tmp___ns1__deletePublicationResponse;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__deletePublication.ns1__deletePublication_ = ns1__deletePublication_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__deletePublication(soap, &soap_tmp___ns1__deletePublication);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__deletePublication(soap, &soap_tmp___ns1__deletePublication, "-ns1:deletePublication", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__deletePublication(soap, &soap_tmp___ns1__deletePublication, "-ns1:deletePublication", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__deletePublicationResponse_)
		return soap_closesock(soap);
	ns1__deletePublicationResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp___ns1__deletePublicationResponse = soap_get___ns1__deletePublicationResponse(soap, NULL, "-ns1:deletePublicationResponse", "ns1:deletePublicationResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (ns1__deletePublicationResponse_ && soap_tmp___ns1__deletePublicationResponse->ns1__deletePublicationResponse_)
		*ns1__deletePublicationResponse_ = *soap_tmp___ns1__deletePublicationResponse->ns1__deletePublicationResponse_;
	return soap_closesock(soap);
}

int ICATPortBindingProxy::modifyPublication(ns1__modifyPublication *ns1__modifyPublication_, ns1__modifyPublicationResponse *ns1__modifyPublicationResponse_)
{	struct soap *soap = this;
	struct __ns1__modifyPublication soap_tmp___ns1__modifyPublication;
	struct __ns1__modifyPublicationResponse *soap_tmp___ns1__modifyPublicationResponse;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__modifyPublication.ns1__modifyPublication_ = ns1__modifyPublication_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__modifyPublication(soap, &soap_tmp___ns1__modifyPublication);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__modifyPublication(soap, &soap_tmp___ns1__modifyPublication, "-ns1:modifyPublication", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__modifyPublication(soap, &soap_tmp___ns1__modifyPublication, "-ns1:modifyPublication", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__modifyPublicationResponse_)
		return soap_closesock(soap);
	ns1__modifyPublicationResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp___ns1__modifyPublicationResponse = soap_get___ns1__modifyPublicationResponse(soap, NULL, "-ns1:modifyPublicationResponse", "ns1:modifyPublicationResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (ns1__modifyPublicationResponse_ && soap_tmp___ns1__modifyPublicationResponse->ns1__modifyPublicationResponse_)
		*ns1__modifyPublicationResponse_ = *soap_tmp___ns1__modifyPublicationResponse->ns1__modifyPublicationResponse_;
	return soap_closesock(soap);
}

int ICATPortBindingProxy::removeInvestigator(ns1__removeInvestigator *ns1__removeInvestigator_, ns1__removeInvestigatorResponse *ns1__removeInvestigatorResponse_)
{	struct soap *soap = this;
	struct __ns1__removeInvestigator soap_tmp___ns1__removeInvestigator;
	struct __ns1__removeInvestigatorResponse *soap_tmp___ns1__removeInvestigatorResponse;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__removeInvestigator.ns1__removeInvestigator_ = ns1__removeInvestigator_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__removeInvestigator(soap, &soap_tmp___ns1__removeInvestigator);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__removeInvestigator(soap, &soap_tmp___ns1__removeInvestigator, "-ns1:removeInvestigator", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__removeInvestigator(soap, &soap_tmp___ns1__removeInvestigator, "-ns1:removeInvestigator", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__removeInvestigatorResponse_)
		return soap_closesock(soap);
	ns1__removeInvestigatorResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp___ns1__removeInvestigatorResponse = soap_get___ns1__removeInvestigatorResponse(soap, NULL, "-ns1:removeInvestigatorResponse", "ns1:removeInvestigatorResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (ns1__removeInvestigatorResponse_ && soap_tmp___ns1__removeInvestigatorResponse->ns1__removeInvestigatorResponse_)
		*ns1__removeInvestigatorResponse_ = *soap_tmp___ns1__removeInvestigatorResponse->ns1__removeInvestigatorResponse_;
	return soap_closesock(soap);
}

int ICATPortBindingProxy::modifyInvestigator(ns1__modifyInvestigator *ns1__modifyInvestigator_, ns1__modifyInvestigatorResponse *ns1__modifyInvestigatorResponse_)
{	struct soap *soap = this;
	struct __ns1__modifyInvestigator soap_tmp___ns1__modifyInvestigator;
	struct __ns1__modifyInvestigatorResponse *soap_tmp___ns1__modifyInvestigatorResponse;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__modifyInvestigator.ns1__modifyInvestigator_ = ns1__modifyInvestigator_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__modifyInvestigator(soap, &soap_tmp___ns1__modifyInvestigator);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__modifyInvestigator(soap, &soap_tmp___ns1__modifyInvestigator, "-ns1:modifyInvestigator", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__modifyInvestigator(soap, &soap_tmp___ns1__modifyInvestigator, "-ns1:modifyInvestigator", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__modifyInvestigatorResponse_)
		return soap_closesock(soap);
	ns1__modifyInvestigatorResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp___ns1__modifyInvestigatorResponse = soap_get___ns1__modifyInvestigatorResponse(soap, NULL, "-ns1:modifyInvestigatorResponse", "ns1:modifyInvestigatorResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (ns1__modifyInvestigatorResponse_ && soap_tmp___ns1__modifyInvestigatorResponse->ns1__modifyInvestigatorResponse_)
		*ns1__modifyInvestigatorResponse_ = *soap_tmp___ns1__modifyInvestigatorResponse->ns1__modifyInvestigatorResponse_;
	return soap_closesock(soap);
}

int ICATPortBindingProxy::deleteInvestigator(ns1__deleteInvestigator *ns1__deleteInvestigator_, ns1__deleteInvestigatorResponse *ns1__deleteInvestigatorResponse_)
{	struct soap *soap = this;
	struct __ns1__deleteInvestigator soap_tmp___ns1__deleteInvestigator;
	struct __ns1__deleteInvestigatorResponse *soap_tmp___ns1__deleteInvestigatorResponse;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__deleteInvestigator.ns1__deleteInvestigator_ = ns1__deleteInvestigator_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__deleteInvestigator(soap, &soap_tmp___ns1__deleteInvestigator);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__deleteInvestigator(soap, &soap_tmp___ns1__deleteInvestigator, "-ns1:deleteInvestigator", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__deleteInvestigator(soap, &soap_tmp___ns1__deleteInvestigator, "-ns1:deleteInvestigator", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__deleteInvestigatorResponse_)
		return soap_closesock(soap);
	ns1__deleteInvestigatorResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp___ns1__deleteInvestigatorResponse = soap_get___ns1__deleteInvestigatorResponse(soap, NULL, "-ns1:deleteInvestigatorResponse", "ns1:deleteInvestigatorResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (ns1__deleteInvestigatorResponse_ && soap_tmp___ns1__deleteInvestigatorResponse->ns1__deleteInvestigatorResponse_)
		*ns1__deleteInvestigatorResponse_ = *soap_tmp___ns1__deleteInvestigatorResponse->ns1__deleteInvestigatorResponse_;
	return soap_closesock(soap);
}

int ICATPortBindingProxy::removeSample(ns1__removeSample *ns1__removeSample_, ns1__removeSampleResponse *ns1__removeSampleResponse_)
{	struct soap *soap = this;
	struct __ns1__removeSample soap_tmp___ns1__removeSample;
	struct __ns1__removeSampleResponse *soap_tmp___ns1__removeSampleResponse;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__removeSample.ns1__removeSample_ = ns1__removeSample_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__removeSample(soap, &soap_tmp___ns1__removeSample);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__removeSample(soap, &soap_tmp___ns1__removeSample, "-ns1:removeSample", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__removeSample(soap, &soap_tmp___ns1__removeSample, "-ns1:removeSample", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__removeSampleResponse_)
		return soap_closesock(soap);
	ns1__removeSampleResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp___ns1__removeSampleResponse = soap_get___ns1__removeSampleResponse(soap, NULL, "-ns1:removeSampleResponse", "ns1:removeSampleResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (ns1__removeSampleResponse_ && soap_tmp___ns1__removeSampleResponse->ns1__removeSampleResponse_)
		*ns1__removeSampleResponse_ = *soap_tmp___ns1__removeSampleResponse->ns1__removeSampleResponse_;
	return soap_closesock(soap);
}

int ICATPortBindingProxy::deleteSample(ns1__deleteSample *ns1__deleteSample_, ns1__deleteSampleResponse *ns1__deleteSampleResponse_)
{	struct soap *soap = this;
	struct __ns1__deleteSample soap_tmp___ns1__deleteSample;
	struct __ns1__deleteSampleResponse *soap_tmp___ns1__deleteSampleResponse;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__deleteSample.ns1__deleteSample_ = ns1__deleteSample_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__deleteSample(soap, &soap_tmp___ns1__deleteSample);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__deleteSample(soap, &soap_tmp___ns1__deleteSample, "-ns1:deleteSample", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__deleteSample(soap, &soap_tmp___ns1__deleteSample, "-ns1:deleteSample", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__deleteSampleResponse_)
		return soap_closesock(soap);
	ns1__deleteSampleResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp___ns1__deleteSampleResponse = soap_get___ns1__deleteSampleResponse(soap, NULL, "-ns1:deleteSampleResponse", "ns1:deleteSampleResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (ns1__deleteSampleResponse_ && soap_tmp___ns1__deleteSampleResponse->ns1__deleteSampleResponse_)
		*ns1__deleteSampleResponse_ = *soap_tmp___ns1__deleteSampleResponse->ns1__deleteSampleResponse_;
	return soap_closesock(soap);
}

int ICATPortBindingProxy::modifySample(ns1__modifySample *ns1__modifySample_, ns1__modifySampleResponse *ns1__modifySampleResponse_)
{	struct soap *soap = this;
	struct __ns1__modifySample soap_tmp___ns1__modifySample;
	struct __ns1__modifySampleResponse *soap_tmp___ns1__modifySampleResponse;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__modifySample.ns1__modifySample_ = ns1__modifySample_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__modifySample(soap, &soap_tmp___ns1__modifySample);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__modifySample(soap, &soap_tmp___ns1__modifySample, "-ns1:modifySample", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__modifySample(soap, &soap_tmp___ns1__modifySample, "-ns1:modifySample", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__modifySampleResponse_)
		return soap_closesock(soap);
	ns1__modifySampleResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp___ns1__modifySampleResponse = soap_get___ns1__modifySampleResponse(soap, NULL, "-ns1:modifySampleResponse", "ns1:modifySampleResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (ns1__modifySampleResponse_ && soap_tmp___ns1__modifySampleResponse->ns1__modifySampleResponse_)
		*ns1__modifySampleResponse_ = *soap_tmp___ns1__modifySampleResponse->ns1__modifySampleResponse_;
	return soap_closesock(soap);
}

int ICATPortBindingProxy::removeSampleParameter(ns1__removeSampleParameter *ns1__removeSampleParameter_, ns1__removeSampleParameterResponse *ns1__removeSampleParameterResponse_)
{	struct soap *soap = this;
	struct __ns1__removeSampleParameter soap_tmp___ns1__removeSampleParameter;
	struct __ns1__removeSampleParameterResponse *soap_tmp___ns1__removeSampleParameterResponse;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__removeSampleParameter.ns1__removeSampleParameter_ = ns1__removeSampleParameter_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__removeSampleParameter(soap, &soap_tmp___ns1__removeSampleParameter);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__removeSampleParameter(soap, &soap_tmp___ns1__removeSampleParameter, "-ns1:removeSampleParameter", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__removeSampleParameter(soap, &soap_tmp___ns1__removeSampleParameter, "-ns1:removeSampleParameter", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__removeSampleParameterResponse_)
		return soap_closesock(soap);
	ns1__removeSampleParameterResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp___ns1__removeSampleParameterResponse = soap_get___ns1__removeSampleParameterResponse(soap, NULL, "-ns1:removeSampleParameterResponse", "ns1:removeSampleParameterResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (ns1__removeSampleParameterResponse_ && soap_tmp___ns1__removeSampleParameterResponse->ns1__removeSampleParameterResponse_)
		*ns1__removeSampleParameterResponse_ = *soap_tmp___ns1__removeSampleParameterResponse->ns1__removeSampleParameterResponse_;
	return soap_closesock(soap);
}

int ICATPortBindingProxy::deleteSampleParameter(ns1__deleteSampleParameter *ns1__deleteSampleParameter_, ns1__deleteSampleParameterResponse *ns1__deleteSampleParameterResponse_)
{	struct soap *soap = this;
	struct __ns1__deleteSampleParameter soap_tmp___ns1__deleteSampleParameter;
	struct __ns1__deleteSampleParameterResponse *soap_tmp___ns1__deleteSampleParameterResponse;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__deleteSampleParameter.ns1__deleteSampleParameter_ = ns1__deleteSampleParameter_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__deleteSampleParameter(soap, &soap_tmp___ns1__deleteSampleParameter);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__deleteSampleParameter(soap, &soap_tmp___ns1__deleteSampleParameter, "-ns1:deleteSampleParameter", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__deleteSampleParameter(soap, &soap_tmp___ns1__deleteSampleParameter, "-ns1:deleteSampleParameter", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__deleteSampleParameterResponse_)
		return soap_closesock(soap);
	ns1__deleteSampleParameterResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp___ns1__deleteSampleParameterResponse = soap_get___ns1__deleteSampleParameterResponse(soap, NULL, "-ns1:deleteSampleParameterResponse", "ns1:deleteSampleParameterResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (ns1__deleteSampleParameterResponse_ && soap_tmp___ns1__deleteSampleParameterResponse->ns1__deleteSampleParameterResponse_)
		*ns1__deleteSampleParameterResponse_ = *soap_tmp___ns1__deleteSampleParameterResponse->ns1__deleteSampleParameterResponse_;
	return soap_closesock(soap);
}

int ICATPortBindingProxy::modifySampleParameter(ns1__modifySampleParameter *ns1__modifySampleParameter_, ns1__modifySampleParameterResponse *ns1__modifySampleParameterResponse_)
{	struct soap *soap = this;
	struct __ns1__modifySampleParameter soap_tmp___ns1__modifySampleParameter;
	struct __ns1__modifySampleParameterResponse *soap_tmp___ns1__modifySampleParameterResponse;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__modifySampleParameter.ns1__modifySampleParameter_ = ns1__modifySampleParameter_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__modifySampleParameter(soap, &soap_tmp___ns1__modifySampleParameter);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__modifySampleParameter(soap, &soap_tmp___ns1__modifySampleParameter, "-ns1:modifySampleParameter", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__modifySampleParameter(soap, &soap_tmp___ns1__modifySampleParameter, "-ns1:modifySampleParameter", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__modifySampleParameterResponse_)
		return soap_closesock(soap);
	ns1__modifySampleParameterResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp___ns1__modifySampleParameterResponse = soap_get___ns1__modifySampleParameterResponse(soap, NULL, "-ns1:modifySampleParameterResponse", "ns1:modifySampleParameterResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (ns1__modifySampleParameterResponse_ && soap_tmp___ns1__modifySampleParameterResponse->ns1__modifySampleParameterResponse_)
		*ns1__modifySampleParameterResponse_ = *soap_tmp___ns1__modifySampleParameterResponse->ns1__modifySampleParameterResponse_;
	return soap_closesock(soap);
}

int ICATPortBindingProxy::getKeywordsForUser(ns1__getKeywordsForUser *ns1__getKeywordsForUser_, ns1__getKeywordsForUserResponse *ns1__getKeywordsForUserResponse_)
{	struct soap *soap = this;
	struct __ns1__getKeywordsForUser soap_tmp___ns1__getKeywordsForUser;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__getKeywordsForUser.ns1__getKeywordsForUser_ = ns1__getKeywordsForUser_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__getKeywordsForUser(soap, &soap_tmp___ns1__getKeywordsForUser);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getKeywordsForUser(soap, &soap_tmp___ns1__getKeywordsForUser, "-ns1:getKeywordsForUser", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getKeywordsForUser(soap, &soap_tmp___ns1__getKeywordsForUser, "-ns1:getKeywordsForUser", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__getKeywordsForUserResponse_)
		return soap_closesock(soap);
	ns1__getKeywordsForUserResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__getKeywordsForUserResponse_->soap_get(soap, "ns1:getKeywordsForUserResponse", "ns1:getKeywordsForUserResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ICATPortBindingProxy::getKeywordsForUserStartWithMax(ns1__getKeywordsForUserStartWithMax *ns1__getKeywordsForUserStartWithMax_, ns1__getKeywordsForUserStartWithMaxResponse *ns1__getKeywordsForUserStartWithMaxResponse_)
{	struct soap *soap = this;
	struct __ns1__getKeywordsForUserStartWithMax soap_tmp___ns1__getKeywordsForUserStartWithMax;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__getKeywordsForUserStartWithMax.ns1__getKeywordsForUserStartWithMax_ = ns1__getKeywordsForUserStartWithMax_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__getKeywordsForUserStartWithMax(soap, &soap_tmp___ns1__getKeywordsForUserStartWithMax);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getKeywordsForUserStartWithMax(soap, &soap_tmp___ns1__getKeywordsForUserStartWithMax, "-ns1:getKeywordsForUserStartWithMax", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getKeywordsForUserStartWithMax(soap, &soap_tmp___ns1__getKeywordsForUserStartWithMax, "-ns1:getKeywordsForUserStartWithMax", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__getKeywordsForUserStartWithMaxResponse_)
		return soap_closesock(soap);
	ns1__getKeywordsForUserStartWithMaxResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__getKeywordsForUserStartWithMaxResponse_->soap_get(soap, "ns1:getKeywordsForUserStartWithMaxResponse", "ns1:getKeywordsForUserStartWithMaxResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ICATPortBindingProxy::getKeywordsForUserMax(ns1__getKeywordsForUserMax *ns1__getKeywordsForUserMax_, ns1__getKeywordsForUserMaxResponse *ns1__getKeywordsForUserMaxResponse_)
{	struct soap *soap = this;
	struct __ns1__getKeywordsForUserMax soap_tmp___ns1__getKeywordsForUserMax;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__getKeywordsForUserMax.ns1__getKeywordsForUserMax_ = ns1__getKeywordsForUserMax_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__getKeywordsForUserMax(soap, &soap_tmp___ns1__getKeywordsForUserMax);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getKeywordsForUserMax(soap, &soap_tmp___ns1__getKeywordsForUserMax, "-ns1:getKeywordsForUserMax", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getKeywordsForUserMax(soap, &soap_tmp___ns1__getKeywordsForUserMax, "-ns1:getKeywordsForUserMax", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__getKeywordsForUserMaxResponse_)
		return soap_closesock(soap);
	ns1__getKeywordsForUserMaxResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__getKeywordsForUserMaxResponse_->soap_get(soap, "ns1:getKeywordsForUserMaxResponse", "ns1:getKeywordsForUserMaxResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ICATPortBindingProxy::getKeywordsForUserType(ns1__getKeywordsForUserType *ns1__getKeywordsForUserType_, ns1__getKeywordsForUserTypeResponse *ns1__getKeywordsForUserTypeResponse_)
{	struct soap *soap = this;
	struct __ns1__getKeywordsForUserType soap_tmp___ns1__getKeywordsForUserType;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__getKeywordsForUserType.ns1__getKeywordsForUserType_ = ns1__getKeywordsForUserType_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__getKeywordsForUserType(soap, &soap_tmp___ns1__getKeywordsForUserType);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getKeywordsForUserType(soap, &soap_tmp___ns1__getKeywordsForUserType, "-ns1:getKeywordsForUserType", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getKeywordsForUserType(soap, &soap_tmp___ns1__getKeywordsForUserType, "-ns1:getKeywordsForUserType", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__getKeywordsForUserTypeResponse_)
		return soap_closesock(soap);
	ns1__getKeywordsForUserTypeResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__getKeywordsForUserTypeResponse_->soap_get(soap, "ns1:getKeywordsForUserTypeResponse", "ns1:getKeywordsForUserTypeResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ICATPortBindingProxy::getAllKeywords(ns1__getAllKeywords *ns1__getAllKeywords_, ns1__getAllKeywordsResponse *ns1__getAllKeywordsResponse_)
{	struct soap *soap = this;
	struct __ns1__getAllKeywords soap_tmp___ns1__getAllKeywords;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__getAllKeywords.ns1__getAllKeywords_ = ns1__getAllKeywords_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__getAllKeywords(soap, &soap_tmp___ns1__getAllKeywords);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getAllKeywords(soap, &soap_tmp___ns1__getAllKeywords, "-ns1:getAllKeywords", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getAllKeywords(soap, &soap_tmp___ns1__getAllKeywords, "-ns1:getAllKeywords", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__getAllKeywordsResponse_)
		return soap_closesock(soap);
	ns1__getAllKeywordsResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__getAllKeywordsResponse_->soap_get(soap, "ns1:getAllKeywordsResponse", "ns1:getAllKeywordsResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ICATPortBindingProxy::searchByRunNumber(ns1__searchByRunNumber *ns1__searchByRunNumber_, ns1__searchByRunNumberResponse *ns1__searchByRunNumberResponse_)
{	struct soap *soap = this;
	struct __ns1__searchByRunNumber soap_tmp___ns1__searchByRunNumber;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__searchByRunNumber.ns1__searchByRunNumber_ = ns1__searchByRunNumber_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__searchByRunNumber(soap, &soap_tmp___ns1__searchByRunNumber);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__searchByRunNumber(soap, &soap_tmp___ns1__searchByRunNumber, "-ns1:searchByRunNumber", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__searchByRunNumber(soap, &soap_tmp___ns1__searchByRunNumber, "-ns1:searchByRunNumber", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__searchByRunNumberResponse_)
		return soap_closesock(soap);
	ns1__searchByRunNumberResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__searchByRunNumberResponse_->soap_get(soap, "ns1:searchByRunNumberResponse", "ns1:searchByRunNumberResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ICATPortBindingProxy::searchByRunNumberPagination(ns1__searchByRunNumberPagination *ns1__searchByRunNumberPagination_, ns1__searchByRunNumberPaginationResponse *ns1__searchByRunNumberPaginationResponse_)
{	struct soap *soap = this;
	struct __ns1__searchByRunNumberPagination soap_tmp___ns1__searchByRunNumberPagination;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__searchByRunNumberPagination.ns1__searchByRunNumberPagination_ = ns1__searchByRunNumberPagination_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__searchByRunNumberPagination(soap, &soap_tmp___ns1__searchByRunNumberPagination);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__searchByRunNumberPagination(soap, &soap_tmp___ns1__searchByRunNumberPagination, "-ns1:searchByRunNumberPagination", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__searchByRunNumberPagination(soap, &soap_tmp___ns1__searchByRunNumberPagination, "-ns1:searchByRunNumberPagination", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__searchByRunNumberPaginationResponse_)
		return soap_closesock(soap);
	ns1__searchByRunNumberPaginationResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__searchByRunNumberPaginationResponse_->soap_get(soap, "ns1:searchByRunNumberPaginationResponse", "ns1:searchByRunNumberPaginationResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ICATPortBindingProxy::listDatafileFormats(ns1__listDatafileFormats *ns1__listDatafileFormats_, ns1__listDatafileFormatsResponse *ns1__listDatafileFormatsResponse_)
{	struct soap *soap = this;
	struct __ns1__listDatafileFormats soap_tmp___ns1__listDatafileFormats;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__listDatafileFormats.ns1__listDatafileFormats_ = ns1__listDatafileFormats_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__listDatafileFormats(soap, &soap_tmp___ns1__listDatafileFormats);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__listDatafileFormats(soap, &soap_tmp___ns1__listDatafileFormats, "-ns1:listDatafileFormats", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__listDatafileFormats(soap, &soap_tmp___ns1__listDatafileFormats, "-ns1:listDatafileFormats", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__listDatafileFormatsResponse_)
		return soap_closesock(soap);
	ns1__listDatafileFormatsResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__listDatafileFormatsResponse_->soap_get(soap, "ns1:listDatafileFormatsResponse", "ns1:listDatafileFormatsResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ICATPortBindingProxy::searchSamplesBySampleName(ns1__searchSamplesBySampleName *ns1__searchSamplesBySampleName_, ns1__searchSamplesBySampleNameResponse *ns1__searchSamplesBySampleNameResponse_)
{	struct soap *soap = this;
	struct __ns1__searchSamplesBySampleName soap_tmp___ns1__searchSamplesBySampleName;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__searchSamplesBySampleName.ns1__searchSamplesBySampleName_ = ns1__searchSamplesBySampleName_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__searchSamplesBySampleName(soap, &soap_tmp___ns1__searchSamplesBySampleName);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__searchSamplesBySampleName(soap, &soap_tmp___ns1__searchSamplesBySampleName, "-ns1:searchSamplesBySampleName", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__searchSamplesBySampleName(soap, &soap_tmp___ns1__searchSamplesBySampleName, "-ns1:searchSamplesBySampleName", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__searchSamplesBySampleNameResponse_)
		return soap_closesock(soap);
	ns1__searchSamplesBySampleNameResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__searchSamplesBySampleNameResponse_->soap_get(soap, "ns1:searchSamplesBySampleNameResponse", "ns1:searchSamplesBySampleNameResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ICATPortBindingProxy::listDatasetTypes(ns1__listDatasetTypes *ns1__listDatasetTypes_, ns1__listDatasetTypesResponse *ns1__listDatasetTypesResponse_)
{	struct soap *soap = this;
	struct __ns1__listDatasetTypes soap_tmp___ns1__listDatasetTypes;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__listDatasetTypes.ns1__listDatasetTypes_ = ns1__listDatasetTypes_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__listDatasetTypes(soap, &soap_tmp___ns1__listDatasetTypes);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__listDatasetTypes(soap, &soap_tmp___ns1__listDatasetTypes, "-ns1:listDatasetTypes", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__listDatasetTypes(soap, &soap_tmp___ns1__listDatasetTypes, "-ns1:listDatasetTypes", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__listDatasetTypesResponse_)
		return soap_closesock(soap);
	ns1__listDatasetTypesResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__listDatasetTypesResponse_->soap_get(soap, "ns1:listDatasetTypesResponse", "ns1:listDatasetTypesResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ICATPortBindingProxy::listDatasetStatus(ns1__listDatasetStatus *ns1__listDatasetStatus_, ns1__listDatasetStatusResponse *ns1__listDatasetStatusResponse_)
{	struct soap *soap = this;
	struct __ns1__listDatasetStatus soap_tmp___ns1__listDatasetStatus;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__listDatasetStatus.ns1__listDatasetStatus_ = ns1__listDatasetStatus_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__listDatasetStatus(soap, &soap_tmp___ns1__listDatasetStatus);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__listDatasetStatus(soap, &soap_tmp___ns1__listDatasetStatus, "-ns1:listDatasetStatus", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__listDatasetStatus(soap, &soap_tmp___ns1__listDatasetStatus, "-ns1:listDatasetStatus", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__listDatasetStatusResponse_)
		return soap_closesock(soap);
	ns1__listDatasetStatusResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__listDatasetStatusResponse_->soap_get(soap, "ns1:listDatasetStatusResponse", "ns1:listDatasetStatusResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ICATPortBindingProxy::getDatasets(ns1__getDatasets *ns1__getDatasets_, ns1__getDatasetsResponse *ns1__getDatasetsResponse_)
{	struct soap *soap = this;
	struct __ns1__getDatasets soap_tmp___ns1__getDatasets;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__getDatasets.ns1__getDatasets_ = ns1__getDatasets_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__getDatasets(soap, &soap_tmp___ns1__getDatasets);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getDatasets(soap, &soap_tmp___ns1__getDatasets, "-ns1:getDatasets", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getDatasets(soap, &soap_tmp___ns1__getDatasets, "-ns1:getDatasets", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__getDatasetsResponse_)
		return soap_closesock(soap);
	ns1__getDatasetsResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__getDatasetsResponse_->soap_get(soap, "ns1:getDatasetsResponse", "ns1:getDatasetsResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ICATPortBindingProxy::createDataSet(ns1__createDataSet *ns1__createDataSet_, ns1__createDataSetResponse *ns1__createDataSetResponse_)
{	struct soap *soap = this;
	struct __ns1__createDataSet soap_tmp___ns1__createDataSet;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__createDataSet.ns1__createDataSet_ = ns1__createDataSet_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__createDataSet(soap, &soap_tmp___ns1__createDataSet);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__createDataSet(soap, &soap_tmp___ns1__createDataSet, "-ns1:createDataSet", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__createDataSet(soap, &soap_tmp___ns1__createDataSet, "-ns1:createDataSet", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__createDataSetResponse_)
		return soap_closesock(soap);
	ns1__createDataSetResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__createDataSetResponse_->soap_get(soap, "ns1:createDataSetResponse", "ns1:createDataSetResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ICATPortBindingProxy::createDataSets(ns1__createDataSets *ns1__createDataSets_, ns1__createDataSetsResponse *ns1__createDataSetsResponse_)
{	struct soap *soap = this;
	struct __ns1__createDataSets soap_tmp___ns1__createDataSets;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__createDataSets.ns1__createDataSets_ = ns1__createDataSets_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__createDataSets(soap, &soap_tmp___ns1__createDataSets);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__createDataSets(soap, &soap_tmp___ns1__createDataSets, "-ns1:createDataSets", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__createDataSets(soap, &soap_tmp___ns1__createDataSets, "-ns1:createDataSets", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__createDataSetsResponse_)
		return soap_closesock(soap);
	ns1__createDataSetsResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__createDataSetsResponse_->soap_get(soap, "ns1:createDataSetsResponse", "ns1:createDataSetsResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ICATPortBindingProxy::removeDataSet(ns1__removeDataSet *ns1__removeDataSet_, ns1__removeDataSetResponse *ns1__removeDataSetResponse_)
{	struct soap *soap = this;
	struct __ns1__removeDataSet soap_tmp___ns1__removeDataSet;
	struct __ns1__removeDataSetResponse *soap_tmp___ns1__removeDataSetResponse;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__removeDataSet.ns1__removeDataSet_ = ns1__removeDataSet_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__removeDataSet(soap, &soap_tmp___ns1__removeDataSet);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__removeDataSet(soap, &soap_tmp___ns1__removeDataSet, "-ns1:removeDataSet", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__removeDataSet(soap, &soap_tmp___ns1__removeDataSet, "-ns1:removeDataSet", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__removeDataSetResponse_)
		return soap_closesock(soap);
	ns1__removeDataSetResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp___ns1__removeDataSetResponse = soap_get___ns1__removeDataSetResponse(soap, NULL, "-ns1:removeDataSetResponse", "ns1:removeDataSetResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (ns1__removeDataSetResponse_ && soap_tmp___ns1__removeDataSetResponse->ns1__removeDataSetResponse_)
		*ns1__removeDataSetResponse_ = *soap_tmp___ns1__removeDataSetResponse->ns1__removeDataSetResponse_;
	return soap_closesock(soap);
}

int ICATPortBindingProxy::deleteDataSet(ns1__deleteDataSet *ns1__deleteDataSet_, ns1__deleteDataSetResponse *ns1__deleteDataSetResponse_)
{	struct soap *soap = this;
	struct __ns1__deleteDataSet soap_tmp___ns1__deleteDataSet;
	struct __ns1__deleteDataSetResponse *soap_tmp___ns1__deleteDataSetResponse;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__deleteDataSet.ns1__deleteDataSet_ = ns1__deleteDataSet_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__deleteDataSet(soap, &soap_tmp___ns1__deleteDataSet);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__deleteDataSet(soap, &soap_tmp___ns1__deleteDataSet, "-ns1:deleteDataSet", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__deleteDataSet(soap, &soap_tmp___ns1__deleteDataSet, "-ns1:deleteDataSet", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__deleteDataSetResponse_)
		return soap_closesock(soap);
	ns1__deleteDataSetResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp___ns1__deleteDataSetResponse = soap_get___ns1__deleteDataSetResponse(soap, NULL, "-ns1:deleteDataSetResponse", "ns1:deleteDataSetResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (ns1__deleteDataSetResponse_ && soap_tmp___ns1__deleteDataSetResponse->ns1__deleteDataSetResponse_)
		*ns1__deleteDataSetResponse_ = *soap_tmp___ns1__deleteDataSetResponse->ns1__deleteDataSetResponse_;
	return soap_closesock(soap);
}

int ICATPortBindingProxy::modifyDataSet(ns1__modifyDataSet *ns1__modifyDataSet_, ns1__modifyDataSetResponse *ns1__modifyDataSetResponse_)
{	struct soap *soap = this;
	struct __ns1__modifyDataSet soap_tmp___ns1__modifyDataSet;
	struct __ns1__modifyDataSetResponse *soap_tmp___ns1__modifyDataSetResponse;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__modifyDataSet.ns1__modifyDataSet_ = ns1__modifyDataSet_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__modifyDataSet(soap, &soap_tmp___ns1__modifyDataSet);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__modifyDataSet(soap, &soap_tmp___ns1__modifyDataSet, "-ns1:modifyDataSet", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__modifyDataSet(soap, &soap_tmp___ns1__modifyDataSet, "-ns1:modifyDataSet", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__modifyDataSetResponse_)
		return soap_closesock(soap);
	ns1__modifyDataSetResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp___ns1__modifyDataSetResponse = soap_get___ns1__modifyDataSetResponse(soap, NULL, "-ns1:modifyDataSetResponse", "ns1:modifyDataSetResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (ns1__modifyDataSetResponse_ && soap_tmp___ns1__modifyDataSetResponse->ns1__modifyDataSetResponse_)
		*ns1__modifyDataSetResponse_ = *soap_tmp___ns1__modifyDataSetResponse->ns1__modifyDataSetResponse_;
	return soap_closesock(soap);
}

int ICATPortBindingProxy::addDataSetParameter(ns1__addDataSetParameter *ns1__addDataSetParameter_, ns1__addDataSetParameterResponse *ns1__addDataSetParameterResponse_)
{	struct soap *soap = this;
	struct __ns1__addDataSetParameter soap_tmp___ns1__addDataSetParameter;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__addDataSetParameter.ns1__addDataSetParameter_ = ns1__addDataSetParameter_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__addDataSetParameter(soap, &soap_tmp___ns1__addDataSetParameter);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__addDataSetParameter(soap, &soap_tmp___ns1__addDataSetParameter, "-ns1:addDataSetParameter", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__addDataSetParameter(soap, &soap_tmp___ns1__addDataSetParameter, "-ns1:addDataSetParameter", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__addDataSetParameterResponse_)
		return soap_closesock(soap);
	ns1__addDataSetParameterResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__addDataSetParameterResponse_->soap_get(soap, "ns1:addDataSetParameterResponse", "ns1:addDataSetParameterResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ICATPortBindingProxy::addDataSetParameters(ns1__addDataSetParameters *ns1__addDataSetParameters_, ns1__addDataSetParametersResponse *ns1__addDataSetParametersResponse_)
{	struct soap *soap = this;
	struct __ns1__addDataSetParameters soap_tmp___ns1__addDataSetParameters;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__addDataSetParameters.ns1__addDataSetParameters_ = ns1__addDataSetParameters_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__addDataSetParameters(soap, &soap_tmp___ns1__addDataSetParameters);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__addDataSetParameters(soap, &soap_tmp___ns1__addDataSetParameters, "-ns1:addDataSetParameters", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__addDataSetParameters(soap, &soap_tmp___ns1__addDataSetParameters, "-ns1:addDataSetParameters", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__addDataSetParametersResponse_)
		return soap_closesock(soap);
	ns1__addDataSetParametersResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__addDataSetParametersResponse_->soap_get(soap, "ns1:addDataSetParametersResponse", "ns1:addDataSetParametersResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ICATPortBindingProxy::modifyDataSetParameter(ns1__modifyDataSetParameter *ns1__modifyDataSetParameter_, ns1__modifyDataSetParameterResponse *ns1__modifyDataSetParameterResponse_)
{	struct soap *soap = this;
	struct __ns1__modifyDataSetParameter soap_tmp___ns1__modifyDataSetParameter;
	struct __ns1__modifyDataSetParameterResponse *soap_tmp___ns1__modifyDataSetParameterResponse;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__modifyDataSetParameter.ns1__modifyDataSetParameter_ = ns1__modifyDataSetParameter_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__modifyDataSetParameter(soap, &soap_tmp___ns1__modifyDataSetParameter);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__modifyDataSetParameter(soap, &soap_tmp___ns1__modifyDataSetParameter, "-ns1:modifyDataSetParameter", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__modifyDataSetParameter(soap, &soap_tmp___ns1__modifyDataSetParameter, "-ns1:modifyDataSetParameter", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__modifyDataSetParameterResponse_)
		return soap_closesock(soap);
	ns1__modifyDataSetParameterResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp___ns1__modifyDataSetParameterResponse = soap_get___ns1__modifyDataSetParameterResponse(soap, NULL, "-ns1:modifyDataSetParameterResponse", "ns1:modifyDataSetParameterResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (ns1__modifyDataSetParameterResponse_ && soap_tmp___ns1__modifyDataSetParameterResponse->ns1__modifyDataSetParameterResponse_)
		*ns1__modifyDataSetParameterResponse_ = *soap_tmp___ns1__modifyDataSetParameterResponse->ns1__modifyDataSetParameterResponse_;
	return soap_closesock(soap);
}

int ICATPortBindingProxy::removeDataSetParameter(ns1__removeDataSetParameter *ns1__removeDataSetParameter_, ns1__removeDataSetParameterResponse *ns1__removeDataSetParameterResponse_)
{	struct soap *soap = this;
	struct __ns1__removeDataSetParameter soap_tmp___ns1__removeDataSetParameter;
	struct __ns1__removeDataSetParameterResponse *soap_tmp___ns1__removeDataSetParameterResponse;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__removeDataSetParameter.ns1__removeDataSetParameter_ = ns1__removeDataSetParameter_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__removeDataSetParameter(soap, &soap_tmp___ns1__removeDataSetParameter);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__removeDataSetParameter(soap, &soap_tmp___ns1__removeDataSetParameter, "-ns1:removeDataSetParameter", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__removeDataSetParameter(soap, &soap_tmp___ns1__removeDataSetParameter, "-ns1:removeDataSetParameter", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__removeDataSetParameterResponse_)
		return soap_closesock(soap);
	ns1__removeDataSetParameterResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp___ns1__removeDataSetParameterResponse = soap_get___ns1__removeDataSetParameterResponse(soap, NULL, "-ns1:removeDataSetParameterResponse", "ns1:removeDataSetParameterResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (ns1__removeDataSetParameterResponse_ && soap_tmp___ns1__removeDataSetParameterResponse->ns1__removeDataSetParameterResponse_)
		*ns1__removeDataSetParameterResponse_ = *soap_tmp___ns1__removeDataSetParameterResponse->ns1__removeDataSetParameterResponse_;
	return soap_closesock(soap);
}

int ICATPortBindingProxy::deleteDataSetParameter(ns1__deleteDataSetParameter *ns1__deleteDataSetParameter_, ns1__deleteDataSetParameterResponse *ns1__deleteDataSetParameterResponse_)
{	struct soap *soap = this;
	struct __ns1__deleteDataSetParameter soap_tmp___ns1__deleteDataSetParameter;
	struct __ns1__deleteDataSetParameterResponse *soap_tmp___ns1__deleteDataSetParameterResponse;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__deleteDataSetParameter.ns1__deleteDataSetParameter_ = ns1__deleteDataSetParameter_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__deleteDataSetParameter(soap, &soap_tmp___ns1__deleteDataSetParameter);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__deleteDataSetParameter(soap, &soap_tmp___ns1__deleteDataSetParameter, "-ns1:deleteDataSetParameter", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__deleteDataSetParameter(soap, &soap_tmp___ns1__deleteDataSetParameter, "-ns1:deleteDataSetParameter", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__deleteDataSetParameterResponse_)
		return soap_closesock(soap);
	ns1__deleteDataSetParameterResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp___ns1__deleteDataSetParameterResponse = soap_get___ns1__deleteDataSetParameterResponse(soap, NULL, "-ns1:deleteDataSetParameterResponse", "ns1:deleteDataSetParameterResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (ns1__deleteDataSetParameterResponse_ && soap_tmp___ns1__deleteDataSetParameterResponse->ns1__deleteDataSetParameterResponse_)
		*ns1__deleteDataSetParameterResponse_ = *soap_tmp___ns1__deleteDataSetParameterResponse->ns1__deleteDataSetParameterResponse_;
	return soap_closesock(soap);
}

int ICATPortBindingProxy::setDataSetSample(ns1__setDataSetSample *ns1__setDataSetSample_, ns1__setDataSetSampleResponse *ns1__setDataSetSampleResponse_)
{	struct soap *soap = this;
	struct __ns1__setDataSetSample soap_tmp___ns1__setDataSetSample;
	struct __ns1__setDataSetSampleResponse *soap_tmp___ns1__setDataSetSampleResponse;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__setDataSetSample.ns1__setDataSetSample_ = ns1__setDataSetSample_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__setDataSetSample(soap, &soap_tmp___ns1__setDataSetSample);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__setDataSetSample(soap, &soap_tmp___ns1__setDataSetSample, "-ns1:setDataSetSample", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__setDataSetSample(soap, &soap_tmp___ns1__setDataSetSample, "-ns1:setDataSetSample", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__setDataSetSampleResponse_)
		return soap_closesock(soap);
	ns1__setDataSetSampleResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp___ns1__setDataSetSampleResponse = soap_get___ns1__setDataSetSampleResponse(soap, NULL, "-ns1:setDataSetSampleResponse", "ns1:setDataSetSampleResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (ns1__setDataSetSampleResponse_ && soap_tmp___ns1__setDataSetSampleResponse->ns1__setDataSetSampleResponse_)
		*ns1__setDataSetSampleResponse_ = *soap_tmp___ns1__setDataSetSampleResponse->ns1__setDataSetSampleResponse_;
	return soap_closesock(soap);
}

int ICATPortBindingProxy::searchByAdvanced(ns1__searchByAdvanced *ns1__searchByAdvanced_, ns1__searchByAdvancedResponse *ns1__searchByAdvancedResponse_)
{	struct soap *soap = this;
	struct __ns1__searchByAdvanced soap_tmp___ns1__searchByAdvanced;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__searchByAdvanced.ns1__searchByAdvanced_ = ns1__searchByAdvanced_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__searchByAdvanced(soap, &soap_tmp___ns1__searchByAdvanced);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__searchByAdvanced(soap, &soap_tmp___ns1__searchByAdvanced, "-ns1:searchByAdvanced", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__searchByAdvanced(soap, &soap_tmp___ns1__searchByAdvanced, "-ns1:searchByAdvanced", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__searchByAdvancedResponse_)
		return soap_closesock(soap);
	ns1__searchByAdvancedResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__searchByAdvancedResponse_->soap_get(soap, "ns1:searchByAdvancedResponse", "ns1:searchByAdvancedResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ICATPortBindingProxy::searchByAdvancedPagination(ns1__searchByAdvancedPagination *ns1__searchByAdvancedPagination_, ns1__searchByAdvancedPaginationResponse *ns1__searchByAdvancedPaginationResponse_)
{	struct soap *soap = this;
	struct __ns1__searchByAdvancedPagination soap_tmp___ns1__searchByAdvancedPagination;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__searchByAdvancedPagination.ns1__searchByAdvancedPagination_ = ns1__searchByAdvancedPagination_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__searchByAdvancedPagination(soap, &soap_tmp___ns1__searchByAdvancedPagination);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__searchByAdvancedPagination(soap, &soap_tmp___ns1__searchByAdvancedPagination, "-ns1:searchByAdvancedPagination", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__searchByAdvancedPagination(soap, &soap_tmp___ns1__searchByAdvancedPagination, "-ns1:searchByAdvancedPagination", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__searchByAdvancedPaginationResponse_)
		return soap_closesock(soap);
	ns1__searchByAdvancedPaginationResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__searchByAdvancedPaginationResponse_->soap_get(soap, "ns1:searchByAdvancedPaginationResponse", "ns1:searchByAdvancedPaginationResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ICATPortBindingProxy::searchByKeywords(ns1__searchByKeywords *ns1__searchByKeywords_, ns1__searchByKeywordsResponse *ns1__searchByKeywordsResponse_)
{	struct soap *soap = this;
	struct __ns1__searchByKeywords soap_tmp___ns1__searchByKeywords;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__searchByKeywords.ns1__searchByKeywords_ = ns1__searchByKeywords_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__searchByKeywords(soap, &soap_tmp___ns1__searchByKeywords);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__searchByKeywords(soap, &soap_tmp___ns1__searchByKeywords, "-ns1:searchByKeywords", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__searchByKeywords(soap, &soap_tmp___ns1__searchByKeywords, "-ns1:searchByKeywords", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__searchByKeywordsResponse_)
		return soap_closesock(soap);
	ns1__searchByKeywordsResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__searchByKeywordsResponse_->soap_get(soap, "ns1:searchByKeywordsResponse", "ns1:searchByKeywordsResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ICATPortBindingProxy::searchByKeywordsAll(ns1__searchByKeywordsAll *ns1__searchByKeywordsAll_, ns1__searchByKeywordsAllResponse *ns1__searchByKeywordsAllResponse_)
{	struct soap *soap = this;
	struct __ns1__searchByKeywordsAll soap_tmp___ns1__searchByKeywordsAll;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__searchByKeywordsAll.ns1__searchByKeywordsAll_ = ns1__searchByKeywordsAll_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__searchByKeywordsAll(soap, &soap_tmp___ns1__searchByKeywordsAll);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__searchByKeywordsAll(soap, &soap_tmp___ns1__searchByKeywordsAll, "-ns1:searchByKeywordsAll", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__searchByKeywordsAll(soap, &soap_tmp___ns1__searchByKeywordsAll, "-ns1:searchByKeywordsAll", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__searchByKeywordsAllResponse_)
		return soap_closesock(soap);
	ns1__searchByKeywordsAllResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__searchByKeywordsAllResponse_->soap_get(soap, "ns1:searchByKeywordsAllResponse", "ns1:searchByKeywordsAllResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ICATPortBindingProxy::getMyInvestigations(ns1__getMyInvestigations *ns1__getMyInvestigations_, ns1__getMyInvestigationsResponse *ns1__getMyInvestigationsResponse_)
{	struct soap *soap = this;
	struct __ns1__getMyInvestigations soap_tmp___ns1__getMyInvestigations;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__getMyInvestigations.ns1__getMyInvestigations_ = ns1__getMyInvestigations_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__getMyInvestigations(soap, &soap_tmp___ns1__getMyInvestigations);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getMyInvestigations(soap, &soap_tmp___ns1__getMyInvestigations, "-ns1:getMyInvestigations", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getMyInvestigations(soap, &soap_tmp___ns1__getMyInvestigations, "-ns1:getMyInvestigations", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__getMyInvestigationsResponse_)
		return soap_closesock(soap);
	ns1__getMyInvestigationsResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__getMyInvestigationsResponse_->soap_get(soap, "ns1:getMyInvestigationsResponse", "ns1:getMyInvestigationsResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ICATPortBindingProxy::getMyInvestigationsIncludes(ns1__getMyInvestigationsIncludes *ns1__getMyInvestigationsIncludes_, ns1__getMyInvestigationsIncludesResponse *ns1__getMyInvestigationsIncludesResponse_)
{	struct soap *soap = this;
	struct __ns1__getMyInvestigationsIncludes soap_tmp___ns1__getMyInvestigationsIncludes;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__getMyInvestigationsIncludes.ns1__getMyInvestigationsIncludes_ = ns1__getMyInvestigationsIncludes_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__getMyInvestigationsIncludes(soap, &soap_tmp___ns1__getMyInvestigationsIncludes);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getMyInvestigationsIncludes(soap, &soap_tmp___ns1__getMyInvestigationsIncludes, "-ns1:getMyInvestigationsIncludes", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getMyInvestigationsIncludes(soap, &soap_tmp___ns1__getMyInvestigationsIncludes, "-ns1:getMyInvestigationsIncludes", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__getMyInvestigationsIncludesResponse_)
		return soap_closesock(soap);
	ns1__getMyInvestigationsIncludesResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__getMyInvestigationsIncludesResponse_->soap_get(soap, "ns1:getMyInvestigationsIncludesResponse", "ns1:getMyInvestigationsIncludesResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ICATPortBindingProxy::getMyInvestigationsIncludesPagination(ns1__getMyInvestigationsIncludesPagination *ns1__getMyInvestigationsIncludesPagination_, ns1__getMyInvestigationsIncludesPaginationResponse *ns1__getMyInvestigationsIncludesPaginationResponse_)
{	struct soap *soap = this;
	struct __ns1__getMyInvestigationsIncludesPagination soap_tmp___ns1__getMyInvestigationsIncludesPagination;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__getMyInvestigationsIncludesPagination.ns1__getMyInvestigationsIncludesPagination_ = ns1__getMyInvestigationsIncludesPagination_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__getMyInvestigationsIncludesPagination(soap, &soap_tmp___ns1__getMyInvestigationsIncludesPagination);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getMyInvestigationsIncludesPagination(soap, &soap_tmp___ns1__getMyInvestigationsIncludesPagination, "-ns1:getMyInvestigationsIncludesPagination", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getMyInvestigationsIncludesPagination(soap, &soap_tmp___ns1__getMyInvestigationsIncludesPagination, "-ns1:getMyInvestigationsIncludesPagination", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__getMyInvestigationsIncludesPaginationResponse_)
		return soap_closesock(soap);
	ns1__getMyInvestigationsIncludesPaginationResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__getMyInvestigationsIncludesPaginationResponse_->soap_get(soap, "ns1:getMyInvestigationsIncludesPaginationResponse", "ns1:getMyInvestigationsIncludesPaginationResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ICATPortBindingProxy::searchByUserID(ns1__searchByUserID *ns1__searchByUserID_, ns1__searchByUserIDResponse *ns1__searchByUserIDResponse_)
{	struct soap *soap = this;
	struct __ns1__searchByUserID soap_tmp___ns1__searchByUserID;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__searchByUserID.ns1__searchByUserID_ = ns1__searchByUserID_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__searchByUserID(soap, &soap_tmp___ns1__searchByUserID);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__searchByUserID(soap, &soap_tmp___ns1__searchByUserID, "-ns1:searchByUserID", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__searchByUserID(soap, &soap_tmp___ns1__searchByUserID, "-ns1:searchByUserID", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__searchByUserIDResponse_)
		return soap_closesock(soap);
	ns1__searchByUserIDResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__searchByUserIDResponse_->soap_get(soap, "ns1:searchByUserIDResponse", "ns1:searchByUserIDResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ICATPortBindingProxy::searchByUserIDPagination(ns1__searchByUserIDPagination *ns1__searchByUserIDPagination_, ns1__searchByUserIDPaginationResponse *ns1__searchByUserIDPaginationResponse_)
{	struct soap *soap = this;
	struct __ns1__searchByUserIDPagination soap_tmp___ns1__searchByUserIDPagination;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__searchByUserIDPagination.ns1__searchByUserIDPagination_ = ns1__searchByUserIDPagination_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__searchByUserIDPagination(soap, &soap_tmp___ns1__searchByUserIDPagination);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__searchByUserIDPagination(soap, &soap_tmp___ns1__searchByUserIDPagination, "-ns1:searchByUserIDPagination", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__searchByUserIDPagination(soap, &soap_tmp___ns1__searchByUserIDPagination, "-ns1:searchByUserIDPagination", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__searchByUserIDPaginationResponse_)
		return soap_closesock(soap);
	ns1__searchByUserIDPaginationResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__searchByUserIDPaginationResponse_->soap_get(soap, "ns1:searchByUserIDPaginationResponse", "ns1:searchByUserIDPaginationResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ICATPortBindingProxy::searchByUserSurname(ns1__searchByUserSurname *ns1__searchByUserSurname_, ns1__searchByUserSurnameResponse *ns1__searchByUserSurnameResponse_)
{	struct soap *soap = this;
	struct __ns1__searchByUserSurname soap_tmp___ns1__searchByUserSurname;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__searchByUserSurname.ns1__searchByUserSurname_ = ns1__searchByUserSurname_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__searchByUserSurname(soap, &soap_tmp___ns1__searchByUserSurname);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__searchByUserSurname(soap, &soap_tmp___ns1__searchByUserSurname, "-ns1:searchByUserSurname", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__searchByUserSurname(soap, &soap_tmp___ns1__searchByUserSurname, "-ns1:searchByUserSurname", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__searchByUserSurnameResponse_)
		return soap_closesock(soap);
	ns1__searchByUserSurnameResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__searchByUserSurnameResponse_->soap_get(soap, "ns1:searchByUserSurnameResponse", "ns1:searchByUserSurnameResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ICATPortBindingProxy::searchByUserSurnamePagination(ns1__searchByUserSurnamePagination *ns1__searchByUserSurnamePagination_, ns1__searchByUserSurnamePaginationResponse *ns1__searchByUserSurnamePaginationResponse_)
{	struct soap *soap = this;
	struct __ns1__searchByUserSurnamePagination soap_tmp___ns1__searchByUserSurnamePagination;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__searchByUserSurnamePagination.ns1__searchByUserSurnamePagination_ = ns1__searchByUserSurnamePagination_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__searchByUserSurnamePagination(soap, &soap_tmp___ns1__searchByUserSurnamePagination);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__searchByUserSurnamePagination(soap, &soap_tmp___ns1__searchByUserSurnamePagination, "-ns1:searchByUserSurnamePagination", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__searchByUserSurnamePagination(soap, &soap_tmp___ns1__searchByUserSurnamePagination, "-ns1:searchByUserSurnamePagination", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__searchByUserSurnamePaginationResponse_)
		return soap_closesock(soap);
	ns1__searchByUserSurnamePaginationResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__searchByUserSurnamePaginationResponse_->soap_get(soap, "ns1:searchByUserSurnamePaginationResponse", "ns1:searchByUserSurnamePaginationResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ICATPortBindingProxy::listInstruments(ns1__listInstruments *ns1__listInstruments_, ns1__listInstrumentsResponse *ns1__listInstrumentsResponse_)
{	struct soap *soap = this;
	struct __ns1__listInstruments soap_tmp___ns1__listInstruments;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__listInstruments.ns1__listInstruments_ = ns1__listInstruments_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__listInstruments(soap, &soap_tmp___ns1__listInstruments);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__listInstruments(soap, &soap_tmp___ns1__listInstruments, "-ns1:listInstruments", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__listInstruments(soap, &soap_tmp___ns1__listInstruments, "-ns1:listInstruments", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__listInstrumentsResponse_)
		return soap_closesock(soap);
	ns1__listInstrumentsResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__listInstrumentsResponse_->soap_get(soap, "ns1:listInstrumentsResponse", "ns1:listInstrumentsResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ICATPortBindingProxy::listRoles(ns1__listRoles *ns1__listRoles_, ns1__listRolesResponse *ns1__listRolesResponse_)
{	struct soap *soap = this;
	struct __ns1__listRoles soap_tmp___ns1__listRoles;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__listRoles.ns1__listRoles_ = ns1__listRoles_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__listRoles(soap, &soap_tmp___ns1__listRoles);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__listRoles(soap, &soap_tmp___ns1__listRoles, "-ns1:listRoles", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__listRoles(soap, &soap_tmp___ns1__listRoles, "-ns1:listRoles", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__listRolesResponse_)
		return soap_closesock(soap);
	ns1__listRolesResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__listRolesResponse_->soap_get(soap, "ns1:listRolesResponse", "ns1:listRolesResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ICATPortBindingProxy::listInvestigationTypes(ns1__listInvestigationTypes *ns1__listInvestigationTypes_, ns1__listInvestigationTypesResponse *ns1__listInvestigationTypesResponse_)
{	struct soap *soap = this;
	struct __ns1__listInvestigationTypes soap_tmp___ns1__listInvestigationTypes;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__listInvestigationTypes.ns1__listInvestigationTypes_ = ns1__listInvestigationTypes_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__listInvestigationTypes(soap, &soap_tmp___ns1__listInvestigationTypes);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__listInvestigationTypes(soap, &soap_tmp___ns1__listInvestigationTypes, "-ns1:listInvestigationTypes", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__listInvestigationTypes(soap, &soap_tmp___ns1__listInvestigationTypes, "-ns1:listInvestigationTypes", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__listInvestigationTypesResponse_)
		return soap_closesock(soap);
	ns1__listInvestigationTypesResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__listInvestigationTypesResponse_->soap_get(soap, "ns1:listInvestigationTypesResponse", "ns1:listInvestigationTypesResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ICATPortBindingProxy::listParameters(ns1__listParameters *ns1__listParameters_, ns1__listParametersResponse *ns1__listParametersResponse_)
{	struct soap *soap = this;
	struct __ns1__listParameters soap_tmp___ns1__listParameters;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__listParameters.ns1__listParameters_ = ns1__listParameters_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__listParameters(soap, &soap_tmp___ns1__listParameters);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__listParameters(soap, &soap_tmp___ns1__listParameters, "-ns1:listParameters", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__listParameters(soap, &soap_tmp___ns1__listParameters, "-ns1:listParameters", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__listParametersResponse_)
		return soap_closesock(soap);
	ns1__listParametersResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__listParametersResponse_->soap_get(soap, "ns1:listParametersResponse", "ns1:listParametersResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ICATPortBindingProxy::downloadDatafile(ns1__downloadDatafile *ns1__downloadDatafile_, ns1__downloadDatafileResponse *ns1__downloadDatafileResponse_)
{	struct soap *soap = this;
	struct __ns1__downloadDatafile soap_tmp___ns1__downloadDatafile;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__downloadDatafile.ns1__downloadDatafile_ = ns1__downloadDatafile_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__downloadDatafile(soap, &soap_tmp___ns1__downloadDatafile);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__downloadDatafile(soap, &soap_tmp___ns1__downloadDatafile, "-ns1:downloadDatafile", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__downloadDatafile(soap, &soap_tmp___ns1__downloadDatafile, "-ns1:downloadDatafile", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__downloadDatafileResponse_)
		return soap_closesock(soap);
	ns1__downloadDatafileResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__downloadDatafileResponse_->soap_get(soap, "ns1:downloadDatafileResponse", "ns1:downloadDatafileResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ICATPortBindingProxy::downloadDatafiles(ns1__downloadDatafiles *ns1__downloadDatafiles_, ns1__downloadDatafilesResponse *ns1__downloadDatafilesResponse_)
{	struct soap *soap = this;
	struct __ns1__downloadDatafiles soap_tmp___ns1__downloadDatafiles;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__downloadDatafiles.ns1__downloadDatafiles_ = ns1__downloadDatafiles_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__downloadDatafiles(soap, &soap_tmp___ns1__downloadDatafiles);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__downloadDatafiles(soap, &soap_tmp___ns1__downloadDatafiles, "-ns1:downloadDatafiles", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__downloadDatafiles(soap, &soap_tmp___ns1__downloadDatafiles, "-ns1:downloadDatafiles", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__downloadDatafilesResponse_)
		return soap_closesock(soap);
	ns1__downloadDatafilesResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__downloadDatafilesResponse_->soap_get(soap, "ns1:downloadDatafilesResponse", "ns1:downloadDatafilesResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ICATPortBindingProxy::downloadDataset(ns1__downloadDataset *ns1__downloadDataset_, ns1__downloadDatasetResponse *ns1__downloadDatasetResponse_)
{	struct soap *soap = this;
	struct __ns1__downloadDataset soap_tmp___ns1__downloadDataset;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__downloadDataset.ns1__downloadDataset_ = ns1__downloadDataset_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__downloadDataset(soap, &soap_tmp___ns1__downloadDataset);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__downloadDataset(soap, &soap_tmp___ns1__downloadDataset, "-ns1:downloadDataset", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__downloadDataset(soap, &soap_tmp___ns1__downloadDataset, "-ns1:downloadDataset", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__downloadDatasetResponse_)
		return soap_closesock(soap);
	ns1__downloadDatasetResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__downloadDatasetResponse_->soap_get(soap, "ns1:downloadDatasetResponse", "ns1:downloadDatasetResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ICATPortBindingProxy::checkDatafileDownloadAccess(ns1__checkDatafileDownloadAccess *ns1__checkDatafileDownloadAccess_, ns1__checkDatafileDownloadAccessResponse *ns1__checkDatafileDownloadAccessResponse_)
{	struct soap *soap = this;
	struct __ns1__checkDatafileDownloadAccess soap_tmp___ns1__checkDatafileDownloadAccess;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__checkDatafileDownloadAccess.ns1__checkDatafileDownloadAccess_ = ns1__checkDatafileDownloadAccess_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__checkDatafileDownloadAccess(soap, &soap_tmp___ns1__checkDatafileDownloadAccess);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__checkDatafileDownloadAccess(soap, &soap_tmp___ns1__checkDatafileDownloadAccess, "-ns1:checkDatafileDownloadAccess", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__checkDatafileDownloadAccess(soap, &soap_tmp___ns1__checkDatafileDownloadAccess, "-ns1:checkDatafileDownloadAccess", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__checkDatafileDownloadAccessResponse_)
		return soap_closesock(soap);
	ns1__checkDatafileDownloadAccessResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__checkDatafileDownloadAccessResponse_->soap_get(soap, "ns1:checkDatafileDownloadAccessResponse", "ns1:checkDatafileDownloadAccessResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ICATPortBindingProxy::checkDatasetDownloadAccess(ns1__checkDatasetDownloadAccess *ns1__checkDatasetDownloadAccess_, ns1__checkDatasetDownloadAccessResponse *ns1__checkDatasetDownloadAccessResponse_)
{	struct soap *soap = this;
	struct __ns1__checkDatasetDownloadAccess soap_tmp___ns1__checkDatasetDownloadAccess;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__checkDatasetDownloadAccess.ns1__checkDatasetDownloadAccess_ = ns1__checkDatasetDownloadAccess_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__checkDatasetDownloadAccess(soap, &soap_tmp___ns1__checkDatasetDownloadAccess);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__checkDatasetDownloadAccess(soap, &soap_tmp___ns1__checkDatasetDownloadAccess, "-ns1:checkDatasetDownloadAccess", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__checkDatasetDownloadAccess(soap, &soap_tmp___ns1__checkDatasetDownloadAccess, "-ns1:checkDatasetDownloadAccess", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__checkDatasetDownloadAccessResponse_)
		return soap_closesock(soap);
	ns1__checkDatasetDownloadAccessResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__checkDatasetDownloadAccessResponse_->soap_get(soap, "ns1:checkDatasetDownloadAccessResponse", "ns1:checkDatasetDownloadAccessResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ICATPortBindingProxy::searchDatasetsBySample(ns1__searchDatasetsBySample *ns1__searchDatasetsBySample_, ns1__searchDatasetsBySampleResponse *ns1__searchDatasetsBySampleResponse_)
{	struct soap *soap = this;
	struct __ns1__searchDatasetsBySample soap_tmp___ns1__searchDatasetsBySample;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__searchDatasetsBySample.ns1__searchDatasetsBySample_ = ns1__searchDatasetsBySample_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__searchDatasetsBySample(soap, &soap_tmp___ns1__searchDatasetsBySample);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__searchDatasetsBySample(soap, &soap_tmp___ns1__searchDatasetsBySample, "-ns1:searchDatasetsBySample", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__searchDatasetsBySample(soap, &soap_tmp___ns1__searchDatasetsBySample, "-ns1:searchDatasetsBySample", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__searchDatasetsBySampleResponse_)
		return soap_closesock(soap);
	ns1__searchDatasetsBySampleResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__searchDatasetsBySampleResponse_->soap_get(soap, "ns1:searchDatasetsBySampleResponse", "ns1:searchDatasetsBySampleResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ICATPortBindingProxy::getFacilityUserByFacilityUserId(ns1__getFacilityUserByFacilityUserId *ns1__getFacilityUserByFacilityUserId_, ns1__getFacilityUserByFacilityUserIdResponse *ns1__getFacilityUserByFacilityUserIdResponse_)
{	struct soap *soap = this;
	struct __ns1__getFacilityUserByFacilityUserId soap_tmp___ns1__getFacilityUserByFacilityUserId;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__getFacilityUserByFacilityUserId.ns1__getFacilityUserByFacilityUserId_ = ns1__getFacilityUserByFacilityUserId_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__getFacilityUserByFacilityUserId(soap, &soap_tmp___ns1__getFacilityUserByFacilityUserId);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getFacilityUserByFacilityUserId(soap, &soap_tmp___ns1__getFacilityUserByFacilityUserId, "-ns1:getFacilityUserByFacilityUserId", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getFacilityUserByFacilityUserId(soap, &soap_tmp___ns1__getFacilityUserByFacilityUserId, "-ns1:getFacilityUserByFacilityUserId", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__getFacilityUserByFacilityUserIdResponse_)
		return soap_closesock(soap);
	ns1__getFacilityUserByFacilityUserIdResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__getFacilityUserByFacilityUserIdResponse_->soap_get(soap, "ns1:getFacilityUserByFacilityUserIdResponse", "ns1:getFacilityUserByFacilityUserIdResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ICATPortBindingProxy::getFacilityUserByFederalId(ns1__getFacilityUserByFederalId *ns1__getFacilityUserByFederalId_, ns1__getFacilityUserByFederalIdResponse *ns1__getFacilityUserByFederalIdResponse_)
{	struct soap *soap = this;
	struct __ns1__getFacilityUserByFederalId soap_tmp___ns1__getFacilityUserByFederalId;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__getFacilityUserByFederalId.ns1__getFacilityUserByFederalId_ = ns1__getFacilityUserByFederalId_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__getFacilityUserByFederalId(soap, &soap_tmp___ns1__getFacilityUserByFederalId);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getFacilityUserByFederalId(soap, &soap_tmp___ns1__getFacilityUserByFederalId, "-ns1:getFacilityUserByFederalId", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getFacilityUserByFederalId(soap, &soap_tmp___ns1__getFacilityUserByFederalId, "-ns1:getFacilityUserByFederalId", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__getFacilityUserByFederalIdResponse_)
		return soap_closesock(soap);
	ns1__getFacilityUserByFederalIdResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__getFacilityUserByFederalIdResponse_->soap_get(soap, "ns1:getFacilityUserByFederalIdResponse", "ns1:getFacilityUserByFederalIdResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ICATPortBindingProxy::listFacilityCycles(ns1__listFacilityCycles *ns1__listFacilityCycles_, ns1__listFacilityCyclesResponse *ns1__listFacilityCyclesResponse_)
{	struct soap *soap = this;
	struct __ns1__listFacilityCycles soap_tmp___ns1__listFacilityCycles;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__listFacilityCycles.ns1__listFacilityCycles_ = ns1__listFacilityCycles_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__listFacilityCycles(soap, &soap_tmp___ns1__listFacilityCycles);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__listFacilityCycles(soap, &soap_tmp___ns1__listFacilityCycles, "-ns1:listFacilityCycles", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__listFacilityCycles(soap, &soap_tmp___ns1__listFacilityCycles, "-ns1:listFacilityCycles", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__listFacilityCyclesResponse_)
		return soap_closesock(soap);
	ns1__listFacilityCyclesResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__listFacilityCyclesResponse_->soap_get(soap, "ns1:listFacilityCyclesResponse", "ns1:listFacilityCyclesResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ICATPortBindingProxy::getICATAPIVersion(ns1__getICATAPIVersion *ns1__getICATAPIVersion_, ns1__getICATAPIVersionResponse *ns1__getICATAPIVersionResponse_)
{	struct soap *soap = this;
	struct __ns1__getICATAPIVersion soap_tmp___ns1__getICATAPIVersion;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "https://facilities01.esc.rl.ac.uk:443/ICATService/ICAT";
	soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__getICATAPIVersion.ns1__getICATAPIVersion_ = ns1__getICATAPIVersion_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__getICATAPIVersion(soap, &soap_tmp___ns1__getICATAPIVersion);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getICATAPIVersion(soap, &soap_tmp___ns1__getICATAPIVersion, "-ns1:getICATAPIVersion", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getICATAPIVersion(soap, &soap_tmp___ns1__getICATAPIVersion, "-ns1:getICATAPIVersion", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__getICATAPIVersionResponse_)
		return soap_closesock(soap);
	ns1__getICATAPIVersionResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__getICATAPIVersionResponse_->soap_get(soap, "ns1:getICATAPIVersionResponse", "ns1:getICATAPIVersionResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
/* End of client proxy code */
