// ***************************************************************************
//
// Copyright (c) 2000 - 2010, Lawrence Livermore National Security, LLC
// Produced at the Lawrence Livermore National Laboratory
// LLNL-CODE-442911
// All rights reserved.
//
// This file is  part of VisIt. For  details, see https://visit.llnl.gov/.  The
// full copyright notice is contained in the file COPYRIGHT located at the root
// of the VisIt distribution or at http://www.llnl.gov/visit/copyright.html.
//
// Redistribution  and  use  in  source  and  binary  forms,  with  or  without
// modification, are permitted provided that the following conditions are met:
//
//  - Redistributions of  source code must  retain the above  copyright notice,
//    this list of conditions and the disclaimer below.
//  - Redistributions in binary form must reproduce the above copyright notice,
//    this  list of  conditions  and  the  disclaimer (as noted below)  in  the
//    documentation and/or other materials provided with the distribution.
//  - Neither the name of  the LLNS/LLNL nor the names of  its contributors may
//    be used to endorse or promote products derived from this software without
//    specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT  HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR  IMPLIED WARRANTIES, INCLUDING,  BUT NOT  LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND  FITNESS FOR A PARTICULAR  PURPOSE
// ARE  DISCLAIMED. IN  NO EVENT  SHALL LAWRENCE  LIVERMORE NATIONAL  SECURITY,
// LLC, THE  U.S.  DEPARTMENT OF  ENERGY  OR  CONTRIBUTORS BE  LIABLE  FOR  ANY
// DIRECT,  INDIRECT,   INCIDENTAL,   SPECIAL,   EXEMPLARY,  OR   CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT  LIMITED TO, PROCUREMENT OF  SUBSTITUTE GOODS OR
// SERVICES; LOSS OF  USE, DATA, OR PROFITS; OR  BUSINESS INTERRUPTION) HOWEVER
// CAUSED  AND  ON  ANY  THEORY  OF  LIABILITY,  WHETHER  IN  CONTRACT,  STRICT
// LIABILITY, OR TORT  (INCLUDING NEGLIGENCE OR OTHERWISE)  ARISING IN ANY  WAY
// OUT OF THE  USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
// DAMAGE.
//
// ***************************************************************************

package llnl.visit.operators;

import llnl.visit.AttributeSubject;
import llnl.visit.CommunicationBuffer;
import llnl.visit.Plugin;
import java.util.Vector;

// ****************************************************************************
// Class: RebinningCutterAttributes
//
// Purpose:
//    Attributes for the Rebinning Cutter
//
// Notes:      Autogenerated by xml2java.
//
// Programmer: xml2java
// Creation:   omitted
//
// Modifications:
//   
// ****************************************************************************

public class RebinningCutterAttributes extends AttributeSubject implements Plugin
{
    private static int RebinningCutterAttributes_numAdditionalAtts = 16;

    public RebinningCutterAttributes()
    {
        super(RebinningCutterAttributes_numAdditionalAtts);

        originX = 0;
        originY = 0;
        originZ = 0;
        normalX = 0;
        normalY = 0;
        normalZ = 0;
        width = 0;
        height = 0;
        depth = 8.82449e-317;
        structured = false;
        xDimensionXML = new String("");
        yDimensionXML = 0;
        zDimensionXML = 0;
        tDimensionXML = 0;
        isSetUp = false;
        dimensionXML = new Vector();
    }

    public RebinningCutterAttributes(int nMoreFields)
    {
        super(RebinningCutterAttributes_numAdditionalAtts + nMoreFields);

        originX = 0;
        originY = 0;
        originZ = 0;
        normalX = 0;
        normalY = 0;
        normalZ = 0;
        width = 0;
        height = 0;
        depth = 8.82449e-317;
        structured = false;
        xDimensionXML = new String("");
        yDimensionXML = 0;
        zDimensionXML = 0;
        tDimensionXML = 0;
        isSetUp = false;
        dimensionXML = new Vector();
    }

    public RebinningCutterAttributes(RebinningCutterAttributes obj)
    {
        super(RebinningCutterAttributes_numAdditionalAtts);

        int i;

        originX = obj.originX;
        originY = obj.originY;
        originZ = obj.originZ;
        normalX = obj.normalX;
        normalY = obj.normalY;
        normalZ = obj.normalZ;
        width = obj.width;
        height = obj.height;
        depth = obj.depth;
        structured = obj.structured;
        xDimensionXML = new String(obj.xDimensionXML);
        yDimensionXML = obj.yDimensionXML;
        zDimensionXML = obj.zDimensionXML;
        tDimensionXML = obj.tDimensionXML;
        isSetUp = obj.isSetUp;
        dimensionXML = new Vector(obj.dimensionXML.size());
        for(i = 0; i < obj.dimensionXML.size(); ++i)
            dimensionXML.addElement(new String((String)obj.dimensionXML.elementAt(i)));


        SelectAll();
    }

    public int Offset()
    {
        return super.Offset() + super.GetNumAdditionalAttributes();
    }

    public int GetNumAdditionalAttributes()
    {
        return RebinningCutterAttributes_numAdditionalAtts;
    }

    public boolean equals(RebinningCutterAttributes obj)
    {
        int i;

        // Compare the elements in the dimensionXML vector.
        boolean dimensionXML_equal = (obj.dimensionXML.size() == dimensionXML.size());
        for(i = 0; (i < dimensionXML.size()) && dimensionXML_equal; ++i)
        {
            // Make references to String from Object.
            String dimensionXML1 = (String)dimensionXML.elementAt(i);
            String dimensionXML2 = (String)obj.dimensionXML.elementAt(i);
            dimensionXML_equal = dimensionXML1.equals(dimensionXML2);
        }
        // Create the return value
        return ((originX == obj.originX) &&
                (originY == obj.originY) &&
                (originZ == obj.originZ) &&
                (normalX == obj.normalX) &&
                (normalY == obj.normalY) &&
                (normalZ == obj.normalZ) &&
                (width == obj.width) &&
                (height == obj.height) &&
                (depth == obj.depth) &&
                (structured == obj.structured) &&
                (xDimensionXML.equals(obj.xDimensionXML)) &&
                (yDimensionXML == obj.yDimensionXML) &&
                (zDimensionXML == obj.zDimensionXML) &&
                (tDimensionXML == obj.tDimensionXML) &&
                (isSetUp == obj.isSetUp) &&
                dimensionXML_equal);
    }

    public String GetName() { return "RebinningCutter"; }
    public String GetVersion() { return "1.0"; }

    // Property setting methods
    public void SetOriginX(double originX_)
    {
        originX = originX_;
        Select(0);
    }

    public void SetOriginY(double originY_)
    {
        originY = originY_;
        Select(1);
    }

    public void SetOriginZ(double originZ_)
    {
        originZ = originZ_;
        Select(2);
    }

    public void SetNormalX(double normalX_)
    {
        normalX = normalX_;
        Select(3);
    }

    public void SetNormalY(double normalY_)
    {
        normalY = normalY_;
        Select(4);
    }

    public void SetNormalZ(double normalZ_)
    {
        normalZ = normalZ_;
        Select(5);
    }

    public void SetWidth(double width_)
    {
        width = width_;
        Select(6);
    }

    public void SetHeight(double height_)
    {
        height = height_;
        Select(7);
    }

    public void SetDepth(double depth_)
    {
        depth = depth_;
        Select(8);
    }

    public void SetStructured(boolean structured_)
    {
        structured = structured_;
        Select(9);
    }

    public void SetXDimensionXML(String xDimensionXML_)
    {
        xDimensionXML = xDimensionXML_;
        Select(10);
    }

    public void SetYDimensionXML(int yDimensionXML_)
    {
        yDimensionXML = yDimensionXML_;
        Select(11);
    }

    public void SetZDimensionXML(int zDimensionXML_)
    {
        zDimensionXML = zDimensionXML_;
        Select(12);
    }

    public void SetTDimensionXML(int tDimensionXML_)
    {
        tDimensionXML = tDimensionXML_;
        Select(13);
    }

    public void SetIsSetUp(boolean isSetUp_)
    {
        isSetUp = isSetUp_;
        Select(14);
    }

    public void SetDimensionXML(Vector dimensionXML_)
    {
        dimensionXML = dimensionXML_;
        Select(15);
    }

    // Property getting methods
    public double  GetOriginX() { return originX; }
    public double  GetOriginY() { return originY; }
    public double  GetOriginZ() { return originZ; }
    public double  GetNormalX() { return normalX; }
    public double  GetNormalY() { return normalY; }
    public double  GetNormalZ() { return normalZ; }
    public double  GetWidth() { return width; }
    public double  GetHeight() { return height; }
    public double  GetDepth() { return depth; }
    public boolean GetStructured() { return structured; }
    public String  GetXDimensionXML() { return xDimensionXML; }
    public int     GetYDimensionXML() { return yDimensionXML; }
    public int     GetZDimensionXML() { return zDimensionXML; }
    public int     GetTDimensionXML() { return tDimensionXML; }
    public boolean GetIsSetUp() { return isSetUp; }
    public Vector  GetDimensionXML() { return dimensionXML; }

    // Write and read methods.
    public void WriteAtts(CommunicationBuffer buf)
    {
        if(WriteSelect(0, buf))
            buf.WriteDouble(originX);
        if(WriteSelect(1, buf))
            buf.WriteDouble(originY);
        if(WriteSelect(2, buf))
            buf.WriteDouble(originZ);
        if(WriteSelect(3, buf))
            buf.WriteDouble(normalX);
        if(WriteSelect(4, buf))
            buf.WriteDouble(normalY);
        if(WriteSelect(5, buf))
            buf.WriteDouble(normalZ);
        if(WriteSelect(6, buf))
            buf.WriteDouble(width);
        if(WriteSelect(7, buf))
            buf.WriteDouble(height);
        if(WriteSelect(8, buf))
            buf.WriteDouble(depth);
        if(WriteSelect(9, buf))
            buf.WriteBool(structured);
        if(WriteSelect(10, buf))
            buf.WriteString(xDimensionXML);
        if(WriteSelect(11, buf))
            buf.WriteInt(yDimensionXML);
        if(WriteSelect(12, buf))
            buf.WriteInt(zDimensionXML);
        if(WriteSelect(13, buf))
            buf.WriteInt(tDimensionXML);
        if(WriteSelect(14, buf))
            buf.WriteBool(isSetUp);
        if(WriteSelect(15, buf))
            buf.WriteStringVector(dimensionXML);
    }

    public void ReadAtts(int index, CommunicationBuffer buf)
    {
        switch(index)
        {
        case 0:
            SetOriginX(buf.ReadDouble());
            break;
        case 1:
            SetOriginY(buf.ReadDouble());
            break;
        case 2:
            SetOriginZ(buf.ReadDouble());
            break;
        case 3:
            SetNormalX(buf.ReadDouble());
            break;
        case 4:
            SetNormalY(buf.ReadDouble());
            break;
        case 5:
            SetNormalZ(buf.ReadDouble());
            break;
        case 6:
            SetWidth(buf.ReadDouble());
            break;
        case 7:
            SetHeight(buf.ReadDouble());
            break;
        case 8:
            SetDepth(buf.ReadDouble());
            break;
        case 9:
            SetStructured(buf.ReadBool());
            break;
        case 10:
            SetXDimensionXML(buf.ReadString());
            break;
        case 11:
            SetYDimensionXML(buf.ReadInt());
            break;
        case 12:
            SetZDimensionXML(buf.ReadInt());
            break;
        case 13:
            SetTDimensionXML(buf.ReadInt());
            break;
        case 14:
            SetIsSetUp(buf.ReadBool());
            break;
        case 15:
            SetDimensionXML(buf.ReadStringVector());
            break;
        }
    }

    public String toString(String indent)
    {
        String str = new String();
        str = str + doubleToString("originX", originX, indent) + "\n";
        str = str + doubleToString("originY", originY, indent) + "\n";
        str = str + doubleToString("originZ", originZ, indent) + "\n";
        str = str + doubleToString("normalX", normalX, indent) + "\n";
        str = str + doubleToString("normalY", normalY, indent) + "\n";
        str = str + doubleToString("normalZ", normalZ, indent) + "\n";
        str = str + doubleToString("width", width, indent) + "\n";
        str = str + doubleToString("height", height, indent) + "\n";
        str = str + doubleToString("depth", depth, indent) + "\n";
        str = str + boolToString("structured", structured, indent) + "\n";
        str = str + stringToString("xDimensionXML", xDimensionXML, indent) + "\n";
        str = str + intToString("yDimensionXML", yDimensionXML, indent) + "\n";
        str = str + intToString("zDimensionXML", zDimensionXML, indent) + "\n";
        str = str + intToString("tDimensionXML", tDimensionXML, indent) + "\n";
        str = str + boolToString("isSetUp", isSetUp, indent) + "\n";
        str = str + stringVectorToString("dimensionXML", dimensionXML, indent) + "\n";
        return str;
    }


    // Attributes
    private double  originX;
    private double  originY;
    private double  originZ;
    private double  normalX;
    private double  normalY;
    private double  normalZ;
    private double  width;
    private double  height;
    private double  depth;
    private boolean structured;
    private String  xDimensionXML;
    private int     yDimensionXML;
    private int     zDimensionXML;
    private int     tDimensionXML;
    private boolean isSetUp;
    private Vector  dimensionXML; // vector of String objects
}

