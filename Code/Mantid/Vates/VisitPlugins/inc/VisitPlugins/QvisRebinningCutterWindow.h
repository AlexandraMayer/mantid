/*****************************************************************************
*
* Copyright (c) 2000 - 2010, Lawrence Livermore National Security, LLC
* Produced at the Lawrence Livermore National Laboratory
* LLNL-CODE-442911
* All rights reserved.
*
* This file is  part of VisIt. For  details, see https://visit.llnl.gov/.  The
* full copyright notice is contained in the file COPYRIGHT located at the root
* of the VisIt distribution or at http://www.llnl.gov/visit/copyright.html.
*
* Redistribution  and  use  in  source  and  binary  forms,  with  or  without
* modification, are permitted provided that the following conditions are met:
*
*  - Redistributions of  source code must  retain the above  copyright notice,
*    this list of conditions and the disclaimer below.
*  - Redistributions in binary form must reproduce the above copyright notice,
*    this  list of  conditions  and  the  disclaimer (as noted below)  in  the
*    documentation and/or other materials provided with the distribution.
*  - Neither the name of  the LLNS/LLNL nor the names of  its contributors may
*    be used to endorse or promote products derived from this software without
*    specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT  HOLDERS AND CONTRIBUTORS "AS IS"
* AND ANY EXPRESS OR  IMPLIED WARRANTIES, INCLUDING,  BUT NOT  LIMITED TO, THE
* IMPLIED WARRANTIES OF MERCHANTABILITY AND  FITNESS FOR A PARTICULAR  PURPOSE
* ARE  DISCLAIMED. IN  NO EVENT  SHALL LAWRENCE  LIVERMORE NATIONAL  SECURITY,
* LLC, THE  U.S.  DEPARTMENT OF  ENERGY  OR  CONTRIBUTORS BE  LIABLE  FOR  ANY
* DIRECT,  INDIRECT,   INCIDENTAL,   SPECIAL,   EXEMPLARY,  OR   CONSEQUENTIAL
* DAMAGES (INCLUDING, BUT NOT  LIMITED TO, PROCUREMENT OF  SUBSTITUTE GOODS OR
* SERVICES; LOSS OF  USE, DATA, OR PROFITS; OR  BUSINESS INTERRUPTION) HOWEVER
* CAUSED  AND  ON  ANY  THEORY  OF  LIABILITY,  WHETHER  IN  CONTRACT,  STRICT
* LIABILITY, OR TORT  (INCLUDING NEGLIGENCE OR OTHERWISE)  ARISING IN ANY  WAY
* OUT OF THE  USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
* DAMAGE.
*
*****************************************************************************/

#ifndef QVISREBINNINGCUTTERWINDOW_H
#define QVISREBINNINGCUTTERWINDOW_H

#include <QvisOperatorWindow.h>
#include <AttributeSubject.h>
#include <qgridlayout.h>
#include <qwidget.h>

class RebinningCutterAttributes;
class PlotInfoAttributes;
class QLabel;
class QCheckBox;
class QLineEdit;
class QSpinBox;
class QVBox;
class QButtonGroup;
class QvisColorTableButton;
class QvisOpacitySlider;
class QvisColorButton;
class QvisLineStyleWidget;
class QvisLineWidthWidget;
class QvisVariableButton;
class QComboBox;
class GeometryWidget;

// ****************************************************************************
// Class: QvisRebinningCutterWindow
//
// Purpose:
//    Defines QvisRebinningCutterWindow class.
//
// Notes:      Autogenerated by xml2window.
//
// Programmer: xml2window
// Creation:   omitted
//
// Modifications:
//   
// ****************************************************************************

class QvisRebinningCutterWindow : public QvisOperatorWindow
{
    Q_OBJECT
  public:
    QvisRebinningCutterWindow(const int type,
                         RebinningCutterAttributes *subj,
                         const QString &caption = QString::null,
                         const QString &shortName = QString::null,
                         QvisNotepadArea *notepad = 0);
    virtual ~QvisRebinningCutterWindow();
    virtual void CreateWindowContents();
  protected:
    void UpdateWindow(bool doAll);
    virtual void GetCurrentValues(int which_widget);
  private slots:
    void originXProcessText();
    void originYProcessText();
    void originZProcessText();
    void normalXProcessText();
    void normalYProcessText();
    void normalZProcessText();
    void widthProcessText();
    void heightProcessText();
    void depthProcessText();
    void structuredChanged(bool val);
    void xDimensionXMLProcessText();
    void yDimensionXMLProcessText();
    void zDimensionXMLProcessText();
    void tDimensionXMLProcessText();
    void geometryChangedlistener();
    //writeHeaderCallback unknown for stringVector (variable dimensionXML)
    void upYProcessText();
    void upZProcessText();
  private:
    /// If possible create the geometry widget from pipeline information.
    void createGeometryWidget();
    /// check wheter the current geometry information is consistent with that in the upper pipeline.
    bool isInputConsistent(const std::string& inputGeometryXML);
    /// helper method to determine wheter plot information is present. Returns Null if not present.
    PlotInfoAttributes* findRebinningInfo() const;

    QLineEdit *originX;
    QLineEdit *originY;
    QLineEdit *originZ;
    QLineEdit *normalX;
    QLineEdit *normalY;
    QLineEdit *normalZ;
    QLineEdit *width;
    QLineEdit *height;
    QLineEdit *depth;
    QCheckBox *structured;

    //writeHeaderData unknown for stringVector (variable dimensionXML)
    QLineEdit *upY;
    QLineEdit *upZ;
    QLabel *originXLabel;
    QLabel *originYLabel;
    QLabel *originZLabel;
    QLabel *normalXLabel;
    QLabel *normalYLabel;
    QLabel *normalZLabel;
    QLabel *widthLabel;
    QLabel *heightLabel;
    QLabel *depthLabel;
    QLabel *xDimensionXMLLabel;
    QLabel *yDimensionXMLLabel;
    QLabel *zDimensionXMLLabel;
    QLabel *tDimensionXMLLabel;
    QLabel *dimensionXMLLabel;
    QLabel *upYLabel;
    QLabel *upZLabel;

    std::string m_cacheGeometryXML;
    RebinningCutterAttributes *atts;
    GeometryWidget* m_geomWidget;
    QGridLayout* mainLayout;
};



#endif
