/*****************************************************************************
 *
 * Copyright (c) 2000 - 2010, Lawrence Livermore National Security, LLC
 * Produced at the Lawrence Livermore National Laboratory
 * LLNL-CODE-442911
 * All rights reserved.
 *
 * This file is  part of VisIt. For  details, see https://visit.llnl.gov/.  The
 * full copyright notice is contained in the file COPYRIGHT located at the root
 * of the VisIt distribution or at http://www.llnl.gov/visit/copyright.html.
 *
 * Redistribution  and  use  in  source  and  binary  forms,  with  or  without
 * modification, are permitted provided that the following conditions are met:
 *
 *  - Redistributions of  source code must  retain the above  copyright notice,
 *    this list of conditions and the disclaimer below.
 *  - Redistributions in binary form must reproduce the above copyright notice,
 *    this  list of  conditions  and  the  disclaimer (as noted below)  in  the
 *    documentation and/or other materials provided with the distribution.
 *  - Neither the name of  the LLNS/LLNL nor the names of  its contributors may
 *    be used to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT  HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR  IMPLIED WARRANTIES, INCLUDING,  BUT NOT  LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND  FITNESS FOR A PARTICULAR  PURPOSE
 * ARE  DISCLAIMED. IN  NO EVENT  SHALL LAWRENCE  LIVERMORE NATIONAL  SECURITY,
 * LLC, THE  U.S.  DEPARTMENT OF  ENERGY  OR  CONTRIBUTORS BE  LIABLE  FOR  ANY
 * DIRECT,  INDIRECT,   INCIDENTAL,   SPECIAL,   EXEMPLARY,  OR   CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT  LIMITED TO, PROCUREMENT OF  SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF  USE, DATA, OR PROFITS; OR  BUSINESS INTERRUPTION) HOWEVER
 * CAUSED  AND  ON  ANY  THEORY  OF  LIABILITY,  WHETHER  IN  CONTRACT,  STRICT
 * LIABILITY, OR TORT  (INCLUDING NEGLIGENCE OR OTHERWISE)  ARISING IN ANY  WAY
 * OUT OF THE  USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
 * DAMAGE.
 *
 *****************************************************************************/

// ************************************************************************* //
//  File: avtRebinningCutterFilter.h
// ************************************************************************* //

#ifndef AVT_RebinningCutter_FILTER_H
#define AVT_RebinningCutter_FILTER_H

#include <vtkUnstructuredGrid.h>
#include <vtkPlane.h>
#include <avtPluginDatasetToDatasetFilter.h>
#include <avtPluginDataTreeIterator.h>
#include <RebinningCutterAttributes.h>
#include <vtkVisItClipper.h>

#include <MantidVisitPresenters/RebinningCutterPresenter.h>
#include <string.h>

// ****************************************************************************
//  Class: avtRebinningCutterFilter
//
//  Purpose:
//      A plugin operator for RebinningCutter.
//
//  Programmer: spu92482 -- generated by xml2avt
//  Creation:   Fri Sep 24 18:04:29 PST 2010
//
// ****************************************************************************

class vtkDataSet;
class avtRebinningCutterFilter: public avtPluginDatasetToDatasetFilter
{

public:
  avtRebinningCutterFilter();
  virtual ~avtRebinningCutterFilter();
  void SetUp();
  static avtFilter *Create();
    const virtual char *GetType(void)
    {
        return "avtRebinningCutterFilter";
    }

    const virtual char *GetDescription(void)
    {
        return "Rebinning Cutter";
    }

    virtual void SetAtts(const AttributeGroup*);
    virtual bool Equivalent(const AttributeGroup*);
    virtual void UpdateDataObjectInfo(void);

protected:
    RebinningCutterAttributes atts;
    virtual void Execute();
    virtual avtContract_p ModifyContract(avtContract_p);
private:

    /// Flag indicating that this is the first execution of the operator
    bool m_completeFirstExecute;

    /// Cached value for the geometry xml string. Used to determine changes to geometry in previous filters of the pipeline.
    std::string m_cacheGeometryXML;

    /// Timestep value from contract.
    int m_timestep;

    /// Determines wheter the geometry has been changed in input filters from that used in the last execution.
    bool isInputConsistent(const std::string& inputGeometryXML);

    /// Name to apply to the x axis
    std::string xAxisName;

    /// Name to apply to the y axis
    std::string yAxisName;

    /// Name to apply to the z axis
    std::string zAxisName;

    /// Set up execution from input dataset values.
    Mantid::VATES::Dimension_sptr getDimensionX(bool bgetFromControls, vtkDataSet* in_ds) const;

    Mantid::VATES::Dimension_sptr getDimensionY(bool bgetFromControls, vtkDataSet* in_ds) const;

    Mantid::VATES::Dimension_sptr getDimensionZ(bool bgetFromControls, vtkDataSet* in_ds) const;

    Mantid::VATES::Dimension_sptr getDimensiont(bool bgetFromControls, vtkDataSet* in_ds) const;

    /// Executor peforms the logic associated with running rebinning operations.
    Mantid::VATES::RebinningCutterPresenter m_presenter;
};

#endif
