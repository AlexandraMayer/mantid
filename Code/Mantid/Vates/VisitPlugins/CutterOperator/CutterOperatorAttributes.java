// ***************************************************************************
//
// Copyright (c) 2000 - 2011, Lawrence Livermore National Security, LLC
// Produced at the Lawrence Livermore National Laboratory
// LLNL-CODE-442911
// All rights reserved.
//
// This file is  part of VisIt. For  details, see https://visit.llnl.gov/.  The
// full copyright notice is contained in the file COPYRIGHT located at the root
// of the VisIt distribution or at http://www.llnl.gov/visit/copyright.html.
//
// Redistribution  and  use  in  source  and  binary  forms,  with  or  without
// modification, are permitted provided that the following conditions are met:
//
//  - Redistributions of  source code must  retain the above  copyright notice,
//    this list of conditions and the disclaimer below.
//  - Redistributions in binary form must reproduce the above copyright notice,
//    this  list of  conditions  and  the  disclaimer (as noted below)  in  the
//    documentation and/or other materials provided with the distribution.
//  - Neither the name of  the LLNS/LLNL nor the names of  its contributors may
//    be used to endorse or promote products derived from this software without
//    specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT  HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR  IMPLIED WARRANTIES, INCLUDING,  BUT NOT  LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND  FITNESS FOR A PARTICULAR  PURPOSE
// ARE  DISCLAIMED. IN  NO EVENT  SHALL LAWRENCE  LIVERMORE NATIONAL  SECURITY,
// LLC, THE  U.S.  DEPARTMENT OF  ENERGY  OR  CONTRIBUTORS BE  LIABLE  FOR  ANY
// DIRECT,  INDIRECT,   INCIDENTAL,   SPECIAL,   EXEMPLARY,  OR   CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT  LIMITED TO, PROCUREMENT OF  SUBSTITUTE GOODS OR
// SERVICES; LOSS OF  USE, DATA, OR PROFITS; OR  BUSINESS INTERRUPTION) HOWEVER
// CAUSED  AND  ON  ANY  THEORY  OF  LIABILITY,  WHETHER  IN  CONTRACT,  STRICT
// LIABILITY, OR TORT  (INCLUDING NEGLIGENCE OR OTHERWISE)  ARISING IN ANY  WAY
// OUT OF THE  USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
// DAMAGE.
//
// ***************************************************************************

package llnl.visit.operators;

import llnl.visit.AttributeSubject;
import llnl.visit.CommunicationBuffer;
import llnl.visit.Plugin;

// ****************************************************************************
// Class: CutterOperatorAttributes
//
// Purpose:
//    
//
// Notes:      Autogenerated by xml2java.
//
// Programmer: xml2java
// Creation:   omitted
//
// Modifications:
//   
// ****************************************************************************

public class CutterOperatorAttributes extends AttributeSubject implements Plugin
{
    private static int CutterOperatorAttributes_numAdditionalAtts = 6;

    public CutterOperatorAttributes()
    {
        super(CutterOperatorAttributes_numAdditionalAtts);

        originX = 0;
        originY = 0;
        originZ = 0;
        width = 0;
        height = 0;
        depth = 0;
    }

    public CutterOperatorAttributes(int nMoreFields)
    {
        super(CutterOperatorAttributes_numAdditionalAtts + nMoreFields);

        originX = 0;
        originY = 0;
        originZ = 0;
        width = 0;
        height = 0;
        depth = 0;
    }

    public CutterOperatorAttributes(CutterOperatorAttributes obj)
    {
        super(CutterOperatorAttributes_numAdditionalAtts);

        originX = obj.originX;
        originY = obj.originY;
        originZ = obj.originZ;
        width = obj.width;
        height = obj.height;
        depth = obj.depth;

        SelectAll();
    }

    public int Offset()
    {
        return super.Offset() + super.GetNumAdditionalAttributes();
    }

    public int GetNumAdditionalAttributes()
    {
        return CutterOperatorAttributes_numAdditionalAtts;
    }

    public boolean equals(CutterOperatorAttributes obj)
    {
        // Create the return value
        return ((originX == obj.originX) &&
                (originY == obj.originY) &&
                (originZ == obj.originZ) &&
                (width == obj.width) &&
                (height == obj.height) &&
                (depth == obj.depth));
    }

    public String GetName() { return "CutterOperator"; }
    public String GetVersion() { return "1"; }

    // Property setting methods
    public void SetOriginX(double originX_)
    {
        originX = originX_;
        Select(0);
    }

    public void SetOriginY(double originY_)
    {
        originY = originY_;
        Select(1);
    }

    public void SetOriginZ(double originZ_)
    {
        originZ = originZ_;
        Select(2);
    }

    public void SetWidth(double width_)
    {
        width = width_;
        Select(3);
    }

    public void SetHeight(double height_)
    {
        height = height_;
        Select(4);
    }

    public void SetDepth(double depth_)
    {
        depth = depth_;
        Select(5);
    }

    // Property getting methods
    public double GetOriginX() { return originX; }
    public double GetOriginY() { return originY; }
    public double GetOriginZ() { return originZ; }
    public double GetWidth() { return width; }
    public double GetHeight() { return height; }
    public double GetDepth() { return depth; }

    // Write and read methods.
    public void WriteAtts(CommunicationBuffer buf)
    {
        if(WriteSelect(0, buf))
            buf.WriteDouble(originX);
        if(WriteSelect(1, buf))
            buf.WriteDouble(originY);
        if(WriteSelect(2, buf))
            buf.WriteDouble(originZ);
        if(WriteSelect(3, buf))
            buf.WriteDouble(width);
        if(WriteSelect(4, buf))
            buf.WriteDouble(height);
        if(WriteSelect(5, buf))
            buf.WriteDouble(depth);
    }

    public void ReadAtts(int index, CommunicationBuffer buf)
    {
        switch(index)
        {
        case 0:
            SetOriginX(buf.ReadDouble());
            break;
        case 1:
            SetOriginY(buf.ReadDouble());
            break;
        case 2:
            SetOriginZ(buf.ReadDouble());
            break;
        case 3:
            SetWidth(buf.ReadDouble());
            break;
        case 4:
            SetHeight(buf.ReadDouble());
            break;
        case 5:
            SetDepth(buf.ReadDouble());
            break;
        }
    }

    public String toString(String indent)
    {
        String str = new String();
        str = str + doubleToString("originX", originX, indent) + "\n";
        str = str + doubleToString("originY", originY, indent) + "\n";
        str = str + doubleToString("originZ", originZ, indent) + "\n";
        str = str + doubleToString("width", width, indent) + "\n";
        str = str + doubleToString("height", height, indent) + "\n";
        str = str + doubleToString("depth", depth, indent) + "\n";
        return str;
    }


    // Attributes
    private double originX;
    private double originY;
    private double originZ;
    private double width;
    private double height;
    private double depth;
}

