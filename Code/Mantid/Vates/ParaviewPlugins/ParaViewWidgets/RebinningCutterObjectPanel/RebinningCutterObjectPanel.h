#include "pqAutoGeneratedObjectPanel.h"
#include "pqObjectPanelInterface.h"
#include "pqPropertyManager.h"
#include "pqNamedWidgets.h"
#include "vtkSMStringVectorProperty.h"
#include <QLayout>
#include "GeometryWidget.h"
#include "MantidVatesAPI/RebinningCutterPresenter.h"
#include "MantidKernel/System.h"

/**

 Adds and removes from Paraview's autogenerated object panel for the Rebinning Cutting filter.

 @author Owen Arnold, Tessella plc
 @date 17/03/2011

 Copyright &copy; 2010 ISIS Rutherford Appleton Laboratory & NScD Oak Ridge National Laboratory

 This file is part of Mantid.

 Mantid is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 3 of the License, or
 (at your option) any later version.

 Mantid is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>.

 File change history is stored at: <https://svn.mantidproject.org/mantid/trunk/Code/Mantid>
 Code Documentation is available at: <http://doxygen.mantidproject.org>
 */

class DLLExport RebinningCutterObjectPanel: public pqAutoGeneratedObjectPanel
{
Q_OBJECT
private:
  /// Flag indicates that controls have been properly set-up and bound to filter.
  bool m_setup;
  /// Pointer to custom geometry widget.
  GeometryWidget* m_geometryWidget;
public:

  /// Constructor
  RebinningCutterObjectPanel(pqProxy* pxy, QWidget* p) :
    pqAutoGeneratedObjectPanel(pxy, p), m_setup(false)
  {
    //Auto generated widgets are replaced by Custom Widgets. Autogenerated ones need to be removed.
    removeAutoGeneratedWidgets();

    //Empty geometry widget added to layout.
    m_geometryWidget = new GeometryWidget;
    this->layout()->addWidget(m_geometryWidget);
  }

  /// Framework overriden method.
  void updateInformationAndDomains()
  {
    if (!m_setup)
    {
      this->proxy()->UpdatePropertyInformation();

      vtkSMStringVectorProperty* inputGeometryProperty = vtkSMStringVectorProperty::SafeDownCast(
          this->proxy()->GetProperty("InputGeometryXML"));

      std::string geometryXMLString = inputGeometryProperty->GetElement(0);
      m_geometryWidget->constructWidget(Mantid::VATES::getDimensions(geometryXMLString, false));

      //Get the property which is used to specify the applied x dimension.
      vtkSMProperty * appliedXDimesionXML = this->proxy()->GetProperty("AppliedXDimensionXML");

      //Get the property which is used to specify the applied y dimension.
      vtkSMProperty * appliedYDimesionXML = this->proxy()->GetProperty("AppliedYDimensionXML");

      //Get the property which is used to specify the applied z dimension.
      vtkSMProperty * appliedZDimesionXML = this->proxy()->GetProperty("AppliedZDimensionXML");

      //Hook up geometry change event to listener on filter.
      this->propertyManager()->registerLink(m_geometryWidget, "XDimensionXML",
          SIGNAL(valueChanged()), this->proxy(), appliedXDimesionXML);

      //Hook up geometry change event to listener on filter.
      this->propertyManager()->registerLink(m_geometryWidget, "YDimensionXML",
          SIGNAL(valueChanged()), this->proxy(), appliedYDimesionXML);

      //Hook up geometry change event to listener on filter.
      this->propertyManager()->registerLink(m_geometryWidget, "ZDimensionXML",
          SIGNAL(valueChanged()), this->proxy(), appliedZDimesionXML);

      m_setup = true;
    }
  }

  /// Remove selected auto-generated widgets
  void removeAutoGeneratedWidgets()
  {
    popWidget(); // Autogenerated Z-dimension QLineEdit
    popWidget(); // Autogenerated Z-dimension QLabel
    popWidget(); // Autogenerated Y-dimension QLineEdit
    popWidget(); // Autogenerated Y-dimension QLabel
    popWidget(); // Autogenerated X-dimension QLineEdit
    popWidget(); // Autogenerated X-dimension QLabel
  }

  /// Pop the widget off the layout
  void popWidget()
  {
    //Pop the last widget off the layout and hide it.
    QLayoutItem* pLayoutItem = layout()->itemAt(layout()->count() - 1);
    QWidget* pWidget = pLayoutItem->widget();
    if (NULL == pWidget)
    {
      throw std::domain_error(
          "Error ::popWidget(). Attempting to pop a non-widget object off the layout!");
    }
    else
    {
      pWidget->setHidden(true);
      this->layout()->removeItem(pLayoutItem);
    }
  }

};
