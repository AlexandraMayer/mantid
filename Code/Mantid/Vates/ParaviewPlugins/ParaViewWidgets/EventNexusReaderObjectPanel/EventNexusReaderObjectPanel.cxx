#include "EventNexusReaderObjectPanel.h"
#include "pqObjectPanelInterface.h"
#include "pqPropertyManager.h"
#include "pqNamedWidgets.h"
#include "vtkSMStringVectorProperty.h"
#include <QLayout>
#include <QMessageBox>
#include <QCheckBox>
#include "GeometryWidget.h"
#include "MantidVatesAPI/RebinningCutterPresenter.h"

EventNexusReaderObjectPanel::EventNexusReaderObjectPanel(pqProxy* pxy, QWidget* p) :
pqAutoGeneratedObjectPanel(pxy, p), m_geometryXMLString("")
{
  //Auto generated widgets are replaced by Custom Widgets. Autogenerated ones need to be removed.
  removeAutoGeneratedWidgets();

  //Empty geometry widget added to layout.
  m_geometryWidget = new GeometryWidget;
  this->layout()->addWidget(m_geometryWidget);
}

/// Event handler for framework event.
void EventNexusReaderObjectPanel::updateInformationAndDomains()
{
  this->proxy()->UpdatePropertyInformation();

  vtkSMStringVectorProperty* inputGeometryProperty = vtkSMStringVectorProperty::SafeDownCast(
    this->proxy()->GetProperty("InputGeometryXML"));

  std::string geometryXMLString = inputGeometryProperty->GetElement(0);

  if(m_geometryXMLString != geometryXMLString) //Only attempt to reconstruct the geometry widget if the xml has changed.
  {
    try
    {
      m_geometryWidget->constructWidget(Mantid::VATES::getDimensions(geometryXMLString, false));
      connect(m_geometryWidget, SIGNAL(ignoreBinChanges()), this, SLOT(ignoreBinChangesListner()));

      //Get the property which is used to specify the applied x dimension.
      vtkSMProperty * appliedXDimesionXML = this->proxy()->GetProperty("AppliedXDimensionXML");

      //Get the property which is used to specify the applied y dimension.
      vtkSMProperty * appliedYDimesionXML = this->proxy()->GetProperty("AppliedYDimensionXML");

      //Get the property which is used to specify the applied z dimension.
      vtkSMProperty * appliedZDimesionXML = this->proxy()->GetProperty("AppliedZDimensionXML");

      //Get the property which is used to specify the applied t dimension.
      vtkSMProperty * appliedtDimesionXML = this->proxy()->GetProperty("AppliedtDimensionXML");

      //Hook up geometry change event to listener on filter.
      this->propertyManager()->registerLink(m_geometryWidget, "XDimensionXML",
        SIGNAL(valueChanged()), this->proxy(), appliedXDimesionXML);

      //Hook up geometry change event to listener on filter.
      this->propertyManager()->registerLink(m_geometryWidget, "YDimensionXML",
        SIGNAL(valueChanged()), this->proxy(), appliedYDimesionXML);

      //Hook up geometry change event to listener on filter.
      this->propertyManager()->registerLink(m_geometryWidget, "ZDimensionXML",
        SIGNAL(valueChanged()), this->proxy(), appliedZDimesionXML);

      //Hook up geometry change event to listener on filter.
      this->propertyManager()->registerLink(m_geometryWidget, "tDimensionXML",
        SIGNAL(valueChanged()), this->proxy(), appliedtDimesionXML);

      m_geometryXMLString = geometryXMLString;
    }
    catch(std::exception& ex)
    {
      QMessageBox::information(NULL, "Setup Not possible.",
        "Could not interpret metadata. Are you using a rebinning source? Check field data.");
    }
  }
}

/// Direct removal of autogenerated widgets.
void EventNexusReaderObjectPanel::removeAutoGeneratedWidgets()
{
  popWidget(); // Autogenerated Z-dimension QLineEdit
  popWidget(); // Autogenerated Z-dimension QLabel
  popWidget(); // Autogenerated Y-dimension QLineEdit
  popWidget(); // Autogenerated Y-dimension QLabel
  popWidget(); // Autogenerated X-dimension QLineEdit
  popWidget(); // Autogenerated X-dimension QLabel
  popWidget(); // Autogenerated t-dimension QLineEdit
  popWidget(); // Autogenerated t-dimension QLabel
}

/// Pop widgets off the layout and hide them.
void EventNexusReaderObjectPanel::popWidget()
{
  //Pop the last widget off the layout and hide it.
  QLayoutItem* pLayoutItem = layout()->itemAt(layout()->count() - 1);
  QWidget* pWidget = pLayoutItem->widget();
  if (NULL == pWidget)
  {
    throw std::domain_error(
      "Error ::popWidget(). Attempting to pop a non-widget object off the layout!");
  }
  else
  {
    pWidget->setHidden(true);
    this->layout()->removeItem(pLayoutItem);
  }
}

/// Listener for ignore bin changes.
void EventNexusReaderObjectPanel::ignoreBinChangesListner()
{
  QLayoutItem *child;
  unsigned int size = layout()->count();
  for(unsigned int i = 0; i < size; i++)
  {
    child = layout()->itemAt(i);
    QWidget* pWidget = child->widget();
    if (NULL != pWidget) // capability query of layout item.
    {
      QCheckBox* checkBox;
      if((checkBox = dynamic_cast<QCheckBox*>(pWidget)) != NULL) //capability query of widget.
      {
        // Apply Clip check box set to unchecked.
        checkBox->setChecked(false);
        break;
      }
    }
  }

}
