#ifndef MANTIDQTCUSTOMINTERFACES_MUONANALYSIS_H_
#define MANTIDQTCUSTOMINTERFACES_MUONANALYSIS_H_

//----------------------
// Includes
//----------------------
#include "ui_MuonAnalysis.h"
#include "MantidQtAPI/UserSubWindow.h"

#include "MantidQtMantidWidgets/pythonCalc.h"
#include "MantidQtMantidWidgets/MWDiag.h"

#include "MantidAPI/AnalysisDataService.h"
#include "MantidAPI/MatrixWorkspace.h"
#include <map>

namespace MantidQt
{
namespace CustomInterfaces
{
class MuonAnalysis : public MantidQt::API::UserSubWindow
{
  Q_OBJECT

public:
  /// Name of the interface
  static std::string name() { return "MuonAnalysis"; }

public:
  /// Default Constructor
  MuonAnalysis(QWidget *parent = 0);

private slots:
  /// Exit the interface
  //void exitClicked();

  /// Guess Alpha clicked
  void guessAlphaClicked();

  /// Input file changed
  void inputFileChanged();

  // Load current button
  void runLoadCurrent();

  /// group table changed
  void groupTableChanged(int row, int column);

  // group table clicked
  void groupTableClicked(int row, int column);

  // group table vertical label clicked
  void groupTableClicked(int row);

  /// group table changed
  void pairTableChanged(int row, int column);

  // pair table clicked
  void pairTableClicked(int row, int column);

  // pair table vertical lable clicked
  void pairTableClicked(int row);

  /// group table plot button
  void runGroupTablePlotButton();

  /// group table plot button
  void runPairTablePlotButton();

  /// Save grouping button
  void runSaveGroupButton();

  /// Load grouping button
  void runLoadGroupButton();

  /// Clear grouping button
  void runClearGroupingButton(); 

  /// User select instrument
  void userSelectInstrument(const QString& prefix);

  ///
  void runFrontPlotButton();

  ///
  void runFrontGroupGroupPairComboBox(int index);

  ///
  void muonAnalysisHelpClicked();

  ///
  void muonAnalysisHelpGroupingClicked();

private:
  /// Initialize the layout
  virtual void initLayout();

  /// Set start up interface look
  void startUpLook();

  /// Return the group which is in focus and -1 if none
  //int groupInFocus();

  /// Return the pair which is in focus and -1 if none
  int pairInFocus();

  /// is grouping set
  bool isGroupingSet();

  /// Apply grouping specified in xml file to workspace
  bool applyGroupingToWS( const std::string& inputWS,  const std::string& outputWS, 
    const std::string& filename);

  /// create WS contained the data for a plot
  void createPlotWS(const std::string& wsname);

  /// Apply whatever grouping is specified in GUI tables to workspace
  bool applyGroupingToWS( const std::string& inputWS,  const std::string& outputWS);

  /// Update front 
  void updateFront();

  /// Update front anc pair combo box
  void updateFrontAndCombo();

  /// Calculate number of detectors from string of type 1-3, 5, 10-15
  int numOfDetectors(const std::string& str) const;

  /// Return a vector of IDs for row number from string of type 1-3, 5, 10-15
  std::vector<int> spectrumIDs(const std::string& str) const;

  /// is string a number?
  bool isNumber(const std::string& s) const;

  /// Clear tables and front combo box
  void clearTablesAndCombo();

  /// When no data loaded set various buttons etc to inactive
  void noDataAvailable();

  /// When data loaded set various buttons etc to active
  void nowDataAvailable();

  /// Check if grouping in table is consistent with data file
  std::string isGroupingAndDataConsistent();

  /// Return a none empty string if the data and group detector info are inconsistent
  QString dataAndTablesConsistent();

  /// Return number of pairs
  int numPairs();

  /// Return number of groups defined (not including pairs)
  int numGroups();

  /// Plot group
  void plotGroup(const std::string& plotType);

  /// Plot pair
  void plotPair(const std::string& plotType);

  //The form generated by Qt Designer
  Ui::MuonAnalysis m_uiForm;

  /// group plot functions
  QStringList m_groupPlotFunc;

  /// pair plot functions
  QStringList m_pairPlotFunc;

  /// The last directory that was viewed
  QString m_last_dir;

  /// name of workspace
  std::string m_workspace_name;

  /// which group table row has the user last clicked on
  int m_groupTableRowInFocus;

  /// which pair table row has the user last clicked on
  int m_pairTableRowInFocus;

  /// used to test that a new filename has been entered 
  QString m_previousFilename;

  /// List of current group names 
  std::vector<std::string> m_groupNames;

  /// name for file to temperary store grouping
  std::string m_groupingTempFilename;

  ///
  void updatePairTable();

  /// Currently selected instrument
  QString m_curInterfaceSetup;

  /// tell which group is in which row
  std::vector<int> m_pairToRow;

  /// tell which group is in which row
  std::vector<int> m_groupToRow;

  ///
  void checkIf_ID_dublicatesInTable(const int row);

  /// Return the group-number for the group in a row. 
  /// Return -1 if invalid group in row
  int getGroupNumberFromRow(int row);

  /// Return the pair-number for the pair in a row. 
  /// Return -1 if invalid pair in row
  int getPairNumberFromRow(int row);

  /// first good bin returend in ms
  /// returned as the absolute value of first-good-bin minus time zero
  QString firstGoodBin();

  /// time zero returned in ms
  QString timeZero();

  /// set grouping in table from information from nexus raw file
  void setGroupingFromNexus(const QString& nexusFile); 

  //A reference to a logger
  static Mantid::Kernel::Logger & g_log;
};

}
}

#endif //MANTIDQTCUSTOMINTERFACES_MUONANALYSIS_H_
