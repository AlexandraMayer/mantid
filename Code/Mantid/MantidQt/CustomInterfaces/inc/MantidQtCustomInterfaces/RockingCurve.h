#ifndef MANTIDQTCUSTOMINTERFACES_ROCKINGCURVE_H_
#define MANTIDQTCUSTOMINTERFACES_ROCKINGCURVE_H_

//----------------------
// Includes
//----------------------
#include "ui_RockingCurve.h"
#include "MantidQtAPI/UserSubWindow.h"
#include "MantidAPI/MatrixWorkspace.h"

namespace MantidQt
{
namespace CustomInterfaces
{

class RockingCurve : public API::UserSubWindow
{
  Q_OBJECT

public:
  /// The name of the interface as registered into the factory
  static std::string name() { return "Rocking Curve"; }

  RockingCurve(QWidget *parent = 0);
  ~RockingCurve();

signals:
  void logsAvailable( const Mantid::API::MatrixWorkspace_const_sptr & );

private slots:
  void startLiveListener();
  void loadFile();
  void launchInstrumentWindow();
  void fillPlotVarCombobox( const Mantid::API::MatrixWorkspace_const_sptr & ws );
  void fillNormalizationCombobox( const Mantid::API::MatrixWorkspace_const_sptr & ws );
  void runRockingCurveAlg();

  void updateForNormalizationChange();
  void generateCurve( const QString & var );

private:
  virtual void initLayout();
  void cleanupWorkspaces();
  void plotCurve();

  void handleAddEvent(Mantid::API::WorkspaceAddNotification_ptr pNf);
  void handleReplEvent(Mantid::API::WorkspaceAfterReplaceNotification_ptr pNf);
  void checkForMaskWorkspace(const std::string & wsName);

  Ui::RockingCurve m_uiForm;  ///< The form generated by Qt Designer
  std::string m_inputWSName, m_tableWSName, m_plotWSName;
  bool m_dataReloadNeeded;

  Poco::NObserver<RockingCurve, Mantid::API::WorkspaceAddNotification> m_addObserver;
  Poco::NObserver<RockingCurve, Mantid::API::WorkspaceAfterReplaceNotification> m_replObserver;
};

} // namespace CustomInterfaces
} // namespace MantidQt

#endif //MANTIDQTCUSTOMINTERFACES_ROCKINGCURVE_H_
