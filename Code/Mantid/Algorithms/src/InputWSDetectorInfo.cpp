#include "MantidAlgorithms/InputWSDetectorInfo.h"

namespace Mantid
{
namespace Algorithms
{
using namespace API;
/** To find out if there is a detector in a spectrum that is masked
*  @param SpecIndex The number of spectrum, starting at zero is passed to axis::spectraNo(.)
*  @return True if there is a masked detector, otherwise false
*/
bool InputWSDetectorInfo::aDetecIsMaskedinSpec(int SpecIndex) const
{
  const std::vector<int> dets = getDetectors(SpecIndex);
  // we are going to go through all of them, if you know this is not neccessary then change it
  std::vector<int>::const_iterator it;
  for ( it = dets.begin(); it != dets.end(); ++it)
  {
    if (m_Instru->getDetector(*it).get()->isMasked()) return true;
  }
  // we didn't find any that were masked
  return false;
}
/** Masks all the detectors that contribute to the specified spectrum
*  @param SpecIndex The number of spectrum, starting at zero is passed to axis::spectraNo(.)
*  @return True if there is a masked detector, otherwise false
*/
void InputWSDetectorInfo::maskAllDetectorsInSpec(int SpecIndex)
{
  std::vector<int> dets = getDetectors(SpecIndex);
  // there may be many detectors that are responcible for the spectrum, loop through them
  std::vector<int>::const_iterator it;
  for ( it = dets.begin(); it != dets.end(); ++it)
  {
    Geometry::Detector* det =
      dynamic_cast<Geometry::Detector*>( m_Instru->getDetector(*it).get() );
    if ( det )
    {
      m_Pmap->addBool(det, "masked", true);
    }
  }
}
/// convert spectrum index to spectrum number
int InputWSDetectorInfo::getSpecNum(int SpecIndex) const
{
  return m_Input->getAxis(1)->spectraNo(SpecIndex);
}
/** Copies pointers to the Instrument and ParameterMap to data members
* @param input A pointer to a workspace that contains instrument information
* @throw invalid_argument if there is no instrument information in the workspace
*/
InputWSDetectorInfo::InputWSDetectorInfo(MatrixWorkspace_const_sptr input) :
  m_Input(input)
{
  // first something that points to the detectors
  m_Instru = input->getBaseInstrument();

  if ( !m_Instru )
  {
    throw std::invalid_argument(
      "There is no instrument data in the input workspace.  Can not run this algorithm on that workspace");
  }
  // the space that contains which are masked
  m_Pmap = &m_Input->instrumentParameters();
}
/**A spectrum can be generated by one or many detectors, this function returns their IDs
* @param SpecIndex The number of the spectrum as listed in memory, starting at zero, is passed to axis::spectraNo(int)
* @return An array of detector identification numbers
* @throw Kernel::Exception::IndexError if you give it an index number that's out of range
*/
std::vector<int> InputWSDetectorInfo::getDetectors(int SpecIndex) const
{
  return m_Input->spectraMap().getDetectors(getSpecNum(SpecIndex)); 
}

}// end namespace Algorithms
}// end namespace Mantid
