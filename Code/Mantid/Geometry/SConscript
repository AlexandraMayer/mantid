#For MantidGeometry

import os
import MantidBuild

#GET LIST OF CPPS
codeFolder = os.path.abspath('./src')
listCpps = MantidBuild.getCPPFiles(codeFolder)
codeFolder = os.path.abspath('./Deprecated/src')
listCpps.append(MantidBuild.getCPPFiles(codeFolder))

# at the moment not all of geometry works
# listCpps = []
# listCpps.append(os.path.abspath('src/CompAssembly.cpp'))
# listCpps.append(os.path.abspath('src/Component.cpp'))
# istCpps.append(os.path.abspath('src/Detector.cpp'))
# listCpps.append(os.path.abspath('src/ObjComponent.cpp'))
# listCpps.append(os.path.abspath('src/Quat.cpp'))
# listCpps.append(os.path.abspath('src/V3D.cpp'))

#Import environment
Import('env')

#BUILD CODE
if os.name == 'nt':
	shared = env.SharedLibrary('lib/MantidGeometry', listCpps, LIBS=env['MYLIBLIST'], LIBPATH=env['MYLIBDIRLIST'])
	static = env.StaticLibrary('lib/MantidGeometryStatic', listCpps, LIBS=env['MYLIBLIST'], LIBPATH=env['MYLIBDIRLIST'])
else:
	shared = env.SharedLibrary('lib/MantidGeometry', listCpps, LIBS=[ ], LIBPATH=[ ])
	static = env.StaticLibrary('lib/MantidGeometryStatic', listCpps, LIBS=[ ], LIBPATH=[ ])
	
retval = { 'shared': shared, 'static': static, 'libs': [ 'MantidGeometry' ] }
Return('retval')
