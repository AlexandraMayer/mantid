#For MantidGeometry

import os
import MantidBuild

#GET LIST OF CPPS
codeFolder = os.path.abspath('./src')
listCpps = MantidBuild.getCPPFiles(codeFolder)
codeFolder = os.path.abspath('./Deprecated/src')
listCpps = listCpps + MantidBuild.getCPPFiles(codeFolder)

# at the moment not all of geometry works
# listCpps = []
# listCpps.append(os.path.abspath('src/CompAssembly.cpp'))
# listCpps.append(os.path.abspath('src/Component.cpp'))
# istCpps.append(os.path.abspath('src/Detector.cpp'))
# listCpps.append(os.path.abspath('src/ObjComponent.cpp'))
# listCpps.append(os.path.abspath('src/Quat.cpp'))
# listCpps.append(os.path.abspath('src/V3D.cpp'))

#Import environment
Import('env')
myenv = env.Clone()
myenv.Append(CPPDEFINES=[('IN_MANTID_GEOMETRY',1)])
listSharedObjects = MantidBuild.getSharedObjects(listCpps, myenv)

#BUILD CODE
shared = myenv.SharedLibrary('lib/MantidGeometry', listCpps, LIBS=env['MYLIBLIST'], LIBPATH=env['MYLIBDIRLIST'], PDB='lib/MantidGeometry.pdb')
static = myenv.StaticLibrary('libstatic/MantidGeometry', listCpps, LIBS=env['MYLIBLIST'], LIBPATH=env['MYLIBDIRLIST'], PDB='libstatic/MantidGeometry.pdb')
retval = { 'shared': shared, 'static': static, 'sharedobjs' : listSharedObjects, 'libs': [ 'MantidGeometry' ] }
Return('retval')
