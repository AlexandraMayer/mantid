#For test main

import os
import platform
import sys
import shutil

def procHeaderPath(ln,keyname,out):
  ## Strips the header components if in existance and returns:
  ## Yes this is ugly repetition in a loop.
  if ln.startswith(keyname):
    out=ln[len(keyname)+1:].strip('\n')
    if out[-1]!='/':
      out+='/'
  return out

def procHeader(ln,keyname,out):
  ## Strips the header components if in existance and returns:
  ## Yes this is ugly repetition in a loop.
  if ln.startswith(keyname):
    out=ln[len(keyname)+1:].strip('\n')
  return out

from socket import gethostname
  
cflags = []
cppPaths=[]
libDirList = []

#get include paths for our code

dirpath=os.listdir("../")
while(len(dirpath)):
	try:
		item=dirpath.pop(0)
		for file in os.listdir("../"+item):
			fullPath="../"+item+"/"+file
			if (file=="inc"):
				cppPaths.append(os.path.abspath(fullPath))
				print fullPath
	except:
		pass

libList = ['Mantid']

if os.name == 'nt':
  # assume this is Windows
  libList.append(['Get', 'g2c', 'python' + sys.version[0:3] ])	
  libDirList.append('../../../Third_Party/lib/win32/')
  cflags = ['-W3','/EHsc', '/MTd', '/ZI', '/TP', '/DWIN32', '/D_DEBUG', '/D_WINDOWS', '/DPOCO_DLL', '/DWINVER=0x0500']

else:

  boost_path = ''
  poco_path = ''
  boost_append=''
  fortran_type=''
  third_party=''

  #Get paths
  f=open('../Build/Scons_Linux.conf', 'r')

  for ln in f:
    boost_path=procHeaderPath(ln,'BOOST_ROOT',boost_path)
    poco_path=procHeaderPath(ln,'POCO_ROOT',poco_path)
    boost_append=procHeader(ln,'BOOST_APPEND',boost_append)
    fortran_type=procHeader(ln,'FORTRAN',fortran_type)
    third_party=procHeader(ln,'THIRD',third_party)
    
  print "POCO_ROOT: ",poco_path
  print "BOOST_ROOT: ",boost_path
  print "BOOST_APPEND: ",boost_append
  print "THIRD_PARTY: ",third_party
  
  f.close()

  if (len(third_party)):
    libDirList.append(os.path.abspath(third_party))
  libDirList.append(os.path.abspath('.'))
  libDirList.append(boost_path)
  libDirList.append(poco_path + 'lib/Linux/i686/')

  cppPaths.append('/usr/include/python' + sys.version[0:sys.version.find(' ')])
  cppPaths.append(poco_path +'Foundation/include/Poco/')
  cppPaths.append(boost_path)
  cppPaths.append(os.path.abspath('../Geometry/Deprecated/inc'))

  libList = ['python' + sys.version[0:3]]

  libList.append('MantidDataObjects')
  libList.append('MantidAPI')
  libList.append('MantidKernel')
  libList.append('MantidDataHandling')
  libList.append('MantidGeometry')

  libList.append('PocoUtil')
  libList.append('PocoFoundation')
  libList.append('PocoXML')
  libList.append('boost_python'+boost_append)
  libList.append('boost_filesystem'+boost_append)
  libList.append('boost_regex'+boost_append)

  if (fortran_type=='gfortran'):
    libList.append('gfortran')
    libList.append('gfortranbegin')
  else:
    libDirList.append('/usr/lib/gcc/i386-redhat-linux/3.4.6/')
    libDirList.append('/usr/lib/gcc/i686-pc-linux-gnu/3.4.6/')
    libList.append('Get')
    libList.append('g2c')
    
    
#copy over libs to current dir
#Copy all the libs to the necessary locations
shutil.copy('../Algorithms/lib/libMantidAlgorithms.so', 'Plugins/')

shutil.copy('../API/lib/libMantidAPI.so', '.')
shutil.copy('../DataHandling/lib/libMantidDataHandling.so', '.')
shutil.copy('../DataObjects/lib/libMantidDataObjects.so', '.')
shutil.copy('../Kernel/lib/libMantidKernel.so', '.')
shutil.copy('../Geometry/lib/libMantidGeometry.so', '.')
#shutil.copy('Services/lib/libMantidServices.so', '.')

env=Environment(CPPPATH=cppPaths)

print libList
print cppPaths

env.Program('main.cpp', LIBS=libList, LIBPATH=libDirList)