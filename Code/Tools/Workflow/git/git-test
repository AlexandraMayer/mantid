#!/bin/sh
# 
# Supports the git test command.
#
# Copyright 2013 ISIS Rutherford Appleton Laboratory & NScD Oak Ridge National Laboratory
#
# This file is part of Mantid.
#
# Mantid is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# Mantid is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# File change history is stored at: <https://github.com/mantidproject/mantid>

# Set top-level command name
CMD_NAME="test"
# Branch to merge to for testing
PRODUCTION_BRANCH="master"

# Get directory of this file
# The sed expression here replaces all backslashes by forward slashes.
# This helps our Windows users, while not bothering our Unix users.
export CMDFILE_DIR=$(dirname "$(echo "$0" | sed -e 's@\\@/@g')")

usage() {
    echo "Usage: git ${CMD_NAME} start <branchname>"
    echo "       git ${CMD_NAME} pass|fail"
    echo
    echo "In the first form start testing the given <branchname> by checking out ${PRODUCTION_BRANCH} and merging it."
    echo "The branchname that is actually merged is origin/branchname to saving checking out a local copy of the branch"
    echo "Equivalent to:"
    echo "  git fetch -p"
    echo "  git checkout ${PRODUCTION_BRANCH}"
    echo "  git reset --hard origin/${PRODUCTION_BRANCH} (Ensures it looks exactly like origin/${PRODUCTION_BRANCH})"
    echo
    echo "In the second form assume testing has been started and indicates whether the tests passed or failed and if"
    echo "  passed: The commits are pushed to origin"
    echo "  failed: The ${PRODUCTION_BRANCH} branch is hard reset to origin/${PRODUCTION_BRANCH}"
    echo "After running 'git test pass/fail' you will be put back on the branch you started on when typing 'git test start...'"
    echo 
    echo "In both forms a fetch & merge of origin/${PRODUCTION_BRANCH} is performed before merging the test branch."
}

checkargs() {
    # Can't use getopt cross-platform
    # 2 args assumes the word start and then a string
    
    TEST_BRANCH=""
    START_MODE=0
    RESULT_MODE=0
    TEST_PASSED=0
    
    if [ $# -eq 2 ]; then
        if [ "$1" != "start" ]; then
            usage
            exit 1
        fi
        START_MODE=1
        TEST_BRANCH=$2
    elif [ $# -eq 1 ]; then
        RESULT_MODE=1
        if [ "$1" = "pass" ]; then
            TEST_PASSED=1
        elif [ "$1" = "fail" ]; then
            TEST_PASSED=0
        else
            usage
            exit 1
        fi
    else
        usage
        exit 1
    fi
}

main() {
    exit 1
    
    # Helper functions
    . "${CMDFILE_DIR}/gitworkflow-helpers"
    
    checkargs "$@"

    # We need a clean slate
    local_modifications
    if [ $? -eq 1 ]; then
        echo "You have local modifications. Please either:"
        echo " 1) Commit the changes and rerun this command or"
        echo " 2) Run 'git stash', perform the testing, then run 'git stash pop' when testing has finished"
        exit 1
    fi

    # Ensure we have everything from the remote
    run_git fetch -p
    
    # Is the name correct
    remote_branch_exists ${TEST_BRANCH}
    if [ $? -eq 0 ];
        echo "Cannot find branch \"${TEST_BRANCH}\" on the remote. Is the name correct?"
        exit 1
    fi    
    
    
    #todo: Finish usage
    #todo: Finish result mode and store starting branchfor final switch back
    
    if [ $START_MODE -eq 1 ]; then
        currentbranch=$(current_branch)
        if [ "${currentbranch}" != "${PRODUCTION_BRANCH}" ]; then
            run_git checkout ${PRODUCTION_BRANCH}
        fi
        
        # Sanity check
        currentbranch=$(current_branch)
        if [ "${currentbranch}" != "${PRODUCTION_BRANCH}" ]; then
            echo "Error switching to ${PRODUCTION_BRANCH}, cannot continue. Seek help!"
            exit 1
        fi
        
        # Update master
        run_git reset --hard origin/${PRODUCTION_BRANCH}
        
        # Merge test branch
        run_git merge origin/${TEST_BRANCH}
        
        echo "Now build the code & test the changes."
        echo "When complete if:"
        echo "  success: run 'git test pass'"
        echo "  failure: run 'git test fail'"
        echo
    fi
    
    
}

main "$@"
