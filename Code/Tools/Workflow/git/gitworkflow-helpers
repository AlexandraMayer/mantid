#!/bin/sh
#
# A set of common helper routines
# 
# Copyright 2013 ISIS Rutherford Appleton Laboratory & NScD Oak Ridge National Laboratory
#
# This file is part of Mantid.
#
# Mantid is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# Mantid is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# File change history is stored at: <https://github.com/mantidproject/mantid>

# Get directory of this file
# The sed expression here replaces all backslashes by forward slashes.
# This helps our Windows users, while not bothering our Unix users.
export CMDFILE_DIR=$(dirname "$(echo "$0" | sed -e 's@\\@/@g')")

# Checks if the branch exists locally
local_branch_exists() {
    git branch --no-color | grep -E "^${1}$"
    retval=$(($? == 1 ? 0 : 1))
    return ${retval}
}

# Checks if there is a branch origin/branchname
remote_branch_exists() { 
    git branch --no-color | grep -E "^origin/${1}$" > /dev/null
    retval=$(($? == 1 ? 0 : 1))
    return ${retval}
}

check_branch_exists() {
    local_branch_exists ${1}
    if [ $? -eq 1 ]; then
        echo "A branch with name '${branchname}' already exists locally. Check ticket reference."
        exit 1
    fi

    remote_branch_exists ${1}
    if [ $? -eq 1 ]; then
        echo "A branch with name '${branchname}' already exists on the remote. Check ticket reference."
        exit 1
    fi
}

# Returns the name of the current branch
current_branch() {
    git branch --no-color | grep '^\* ' | grep -v 'no branch' | sed 's/^* //g'
}

# Returns 1 if there are modifications to the current index/working copy
local_modifications() {
    git status --porcelain | grep -v "?" > /dev/null
    retval=$(($? == 1 ? 0 : 1))
    return ${retval}
}

# Run git, logging the command to stdout
run_git() {
    echo "git $@"
    git "$@"
}

run_fetch() {
    run_git fetch -p
    if [ $? -gt 0 ]; then
        echo "Error running fetching. Most likely a network issue. Continuing with current state of ${BASE_BRANCH}."
    fi
}

# Checks if we are actually within a git repo
check_git_repo() {
    git status | grep "fatal: Not a git repository (or any of the parent directories): .git" > /dev/null
    if [ $? -eq 0 ]; then
        exit 1
    fi
}
