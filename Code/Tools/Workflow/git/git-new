#!/bin/sh
#
# Copyright 2013 ISIS Rutherford Appleton Laboratory & NScD Oak Ridge National Laboratory
#
# This file is part of Mantid.
#
# Mantid is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# Mantid is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# File change history is stored at: <https://github.com/mantidproject/mantid>

# Set top-level command name
CMD_NAME="new"
# Prefix for branch names
DEFAULT_PREFIX="feature/"
# Base branch for new branches
BASE_BRANCH="origin/master"

# Get directory of this file
# The sed expression here replaces all backslashes by forward slashes.
# This helps our Windows users, while not bothering our Unix users.
export CMDFILE_DIR=$(dirname "$(echo "$0" | sed -e 's@\\@/@g')")

usage() {
    echo "Usage: git ${CMD_NAME} [SWITCHES] <ticketno> <short_descr>"
    echo "Start working on a new ticket by creating a branch from the information"
    echo "supplied. The branch is created using origin/master as a start point and"
    echo "a 'git fetch' is performed beforehand. The branch prefix can be specified"
    echo "using the -p flag."
    echo
    echo "If the branch name exists in the list given by 'git branch -r' an error"
    echo "is raised."
    echo
    echo "Equivalent to:"
    echo "  git fetch -p"
    echo "  git checkout --no-track -b [PREFIX]<ticketno>_short_descr"
    echo
    echo "Positional arguments:"
    echo "  ticketno      The TRAC ticket reference number"
    echo "  short_descr   A short description of the branch (without spaces)"
    echo 
    echo "Switches:"
    echo "  -p            When creating a branch use this prefix in the"
    echo "                name (default=feature/)"
}

get_opts() {
    # Can't use getopt cross-platform
    # Allow either 2 or 4 arguments
    if [ ! $# -eq 2 -a ! $# -eq 4 ]; then
	usage
	exit 1
    fi
    
    branchprefix=${DEFAULT_PREFIX}
    prefix_next=0
    pos_arg=0
    for i in "$@"; do
	if [ "$i" = "-p" ]; then
	    prefix_next=1
	    continue
	fi
	if [ ${prefix_next} -eq 1 ]; then
	    prefix_next=0
	    branchprefix=${i}
	else
	    case $pos_arg in
		0) ticketno=$i;;
		1) descr=$i;;
	    esac
	    pos_arg=$((pos_arg+1))
	fi
    done

    # Make sure the prefix ends with a / by removing it
    # if it exists and adding it back
    branchprefix=${branchprefix%%"/"}
    branchprefix=${branchprefix}"/"
}

# Checks if the branch exists locally
local_branch_exists() { 
    git branch --no-color | grep -E "^${1}$"
    retval=$(($? == 1 ? 0 : 1))
    return ${retval}
}

# Checks if there is a branch origin/branchname
remote_branch_exists() { 
    git branch --no-color | grep -E "^origin/${1}$" > /dev/null
    retval=$(($? == 1 ? 0 : 1))
    return ${retval}
}

check_branch_exists() {
  local_branch_exists ${1}
  if [ $? -eq 1 ]; then
      echo "A branch with name '${branchname}' already exists locally. Check ticket reference."
      exit 1
  fi

  remote_branch_exists ${1}
  if [ $? -eq 1 ]; then
      echo "A branch with name '${branchname}' already exists on the remote. Check ticket reference."
      exit 1
  fi
}

# Returns the name of the current branch
current_branch() {
    git branch --no-color | grep '^\* ' | grep -v 'no branch' | sed 's/^* //g'
}

# Returns 1 if there are modifications to the current index/working copy
local_modifications() {
    git status --porcelain | grep -v "?" > /dev/null
    retval=$(($? == 1 ? 0 : 1))
    return ${retval}
}

#
run_git() {
    echo "git $@"
    git "$@"
}

run_fetch() {
    run_git fetch -p
    if [ $? -gt 0 ]; then
	echo "Error running fetching. Most likely a network issue. Continuing with current state of ${BASE_BRANCH}."
    fi
}

# Checks if we are actually within a git repo
check_git_repo() {
  git status | grep "fatal: Not a git repository (or any of the parent directories): .git" > /dev/null
  if [ $? -eq 0 ]; then
        exit 1
  fi
}

main() {
  # Are we in the right place?
  check_git_repo

  # Parse command line options
  get_opts "$@"
 
  # Compute the new branchname
  branchname=${branchprefix}${ticketno}_${descr}

  # Sanity check and bail if it does
  check_branch_exists ${branchname}
  
  # Update origin/master if possible
  run_fetch
  
  local_modifications
  if [ $? -eq 1 ]; then
      current=$(current_branch)
      echo "Warning: You have local modifications. Future commits will put these changes on '${branchname}' not '${current}'"
      echo "         If you wish these changes to be on ${current} perform these steps after this command exits:"
      echo "           git checkout ${current}"
      echo "           git commit -a -m'Commit msg'"
      echo "           git checkout ${branchname}"
      echo
  fi

  # Create branch
  echo "Creating new branch ${branchname} based on ${BASE_BRANCH}"
  run_git checkout --no-track -b ${branchname} ${BASE_BRANCH}
}

main "$@"
