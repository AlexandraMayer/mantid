#!/bin/sh
#
# Copyright 2013 ISIS Rutherford Appleton Laboratory & NScD Oak Ridge National Laboratory
#
# This file is part of Mantid.
#
# Mantid is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# Mantid is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# File change history is stored at: <https://github.com/mantidproject/mantid>

# Set top-level command name
CMD_NAME="checkbuild"
#
BUILD_BRANCH="develop"


# Get directory of this file
# The sed expression here replaces all backslashes by forward slashes.
# This helps our Windows users, while not bothering our Unix users.
export CMDFILE_DIR=$(dirname "$(echo "$0" | sed -e 's@\\@/@g')")

usage() {
    echo "Usage: git ${CMD_NAME} [SWITCHES]"
    echo "Check the current branch against the build servers by merging to ${BUILD_BRANCH}"
    echo "and pushing to the remote. Any uncommitted changes are stashed temprorarily"
    echo "and will NOT be checked by the build servers."
    echo
    echo "The current branch must not be master or ${BUILD_BRANCH}, if it is then the script"
    echo "aborts. "
    echo
    echo "Equivalent to:"
    echo "  git stash"
    echo "  git checkout develop"
    echo "  git pull"
    echo "  git merge <branchname>"
    echo "  git push origin develop"
    echo "  git checkout <branchname>"
    echo "  git stash pop"
    echo
    echo "Switches:"
    echo "  -h  Prints this help"

}

checkargs() {
    # Can't use getopt cross-platform
    if [ ! $# -eq 0 ]; then
	usage
	exit 1
    fi
}

main() {
    # Helper functions
    . "${CMDFILE_DIR}/gitworkflow-helpers"
	
    checkargs "$@"

    # Sanity check
    currentbranch=$(current_branch)
    if [ ${currentbranch} = "${BUILD_BRANCH}" ]; then
	echo "Cannot merge develop into itself. Run this command on a branch that requires checking"
	exit 1
    fi

    if [ ${currentbranch} = "master" ]; then
	echo "Cannot use this command to merge master->${BUILD_BRANCH}"
	exit 1
    fi

    # Run macro
    local_modifications
    if [ $? -eq 1 ]; then
	echo "You have local modifications. Please either:"
	echo " 1) Commit the changes and rerun this command. This will include them in the buildserver check."
	echo " 2) Run 'git stash', rerun this command, then run 'git stash pop'. This will NOT include them in the buildserver check."
	exit 1
    fi

    # Move to develop
    run_git checkout ${BASE_BRANCH}

    # Bring in any updates
    run_git fetch -p
    run_git rebase origin/${BASE_BRANCH}

    # Merge the branch and push to check
    run_git merge ${currentbranch}
    run_git push origin ${BASE_BRANCH}

    # Return to where we started
    run_git checkout ${currentbranch}
}

main "$@"
