#!/bin/sh
#
# Copyright 2013 ISIS Rutherford Appleton Laboratory & NScD Oak Ridge National Laboratory
#
# This file is part of Mantid.
#
# Mantid is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# Mantid is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# File change history is stored at: <https://github.com/mantidproject/mantid>

# Set top-level command name
CMD_NAME="checkbuild"
#
BUILD_BRANCH="develop"

# Get directory of this file
# The sed expression here replaces all backslashes by forward slashes.
# This helps our Windows users, while not bothering our Unix users.
export CMDFILE_DIR=$(dirname "$(echo "$0" | sed -e 's@\\@/@g')")

usage() {
    echo "Usage: git ${CMD_NAME} [SWITCHES]"
    echo "Check the current branch against the build servers by merging to ${BUILD_BRANCH}"
    echo "and pushing to the remote."
    echo
    echo "The current branch must not be master or ${BUILD_BRANCH}, if it is then the script"
    echo "aborts. "
    echo
    echo "Equivalent to:"
    echo "  git checkout develop"
    echo "  git merge --no-ff <branchname>"
    echo "  git fetch -p"
    echo "  git rebase -p origin/develop"
    echo "  git push origin develop"
    echo "  git checkout <branchname>"
    echo
    echo "Switches:"
    echo "  -h  Prints this help"

}

checkargs() {
    # Can't use getopt cross-platform
    if [ ! $# -eq 0 ]; then
        usage
        exit 1
    fi
}

main() {
    # Helper functions
    . "${CMDFILE_DIR}/gitworkflow-helpers"
	
    checkargs "$@"

    # Sanity check
    currentbranch=$(current_branch)
    if [ ${currentbranch} = "${BUILD_BRANCH}" ]; then
        echo "Cannot merge develop into itself. Run this command on a branch that requires checking"
        exit 1
    fi

    if [ ${currentbranch} = "master" ]; then
        echo "Cannot use this command to merge master->${BUILD_BRANCH}"
        exit 1
    fi

    # Require clean slate
    local_modifications
    if [ $? -eq 1 ]; then
        echo "You have local modifications. Please either:"
        echo " 1) Commit the changes and rerun this command. This will include them in the buildserver check."
        echo " 2) Run 'git stash', rerun this command, then run 'git stash pop'. This will NOT include them in the buildserver check."
        exit 1
    fi

    # Checkout fresh copy of branch pointer that will be created from the remote pointer
    git_ignore_errors checkout ${BUILD_BRANCH}

    # Sanity check again to check we are really on develop
    currentbranch=$(current_branch)
    if [ ${currentbranch} = "${BUILD_BRANCH}" ]; then
	echo "Expected current branch to be ${BUILD_BRANCH} but we appear to be on ${currentbranch}. Cannot continue, seek help!"
        exit 1
    fi

    # Merge the feature branch
    git_halt_on_error merge --no-ff ${currentbranch}
    # If it failed, then there were likely conflicts that need to be resolved
    # git will leave a message basically saying this so don't repeat it
    if [ $? -gt 0 ]; then
	echo "When you have resolved the conflicts with 'git add' then 'git commit' rerun this command."
	exit 1
    fi

    # Update remote reference
    # The remote may occasionally get recreated from master. If the update has been forced then delete the local develop branch
    # and get the user to rerun the command
    git_halt_on_error fetch -p
    # This works by checking if the old branch tip, given by origin/${BUILD_BRANCH}@{1}, is reachable from the new one
    force_update=$(git rev-list origin/${BUILD_BRANCH} | grep rev-parse origin/${BUILD_BRANCH}@{1})
    if [ $force_update -eq 1 ]; then
	echo "The remote ${BUILD_BRANCH} has been recreated from master. Local copy of ${BUILD_BRANCH} will be deleted."
	echo "Please rerun this command to recreate the local copy and perform the merge again."
	git_halt_on_error branch -D ${BUILD_BRANCH}
	exit 1
    fi

    # We're okay to push
    git_halt_on_error rebase --preserve-merges origin/${BUILD_BRANCH}
    git_halt_on_error push origin ${BUILD_BRANCH}
    
    # We're okay, return to where we started
    git_halt_on_error checkout ${currentbranch}
}

main "$@"
