diff --git a/Framework/DataHandling/src/ImggAggregateWavelengths.cpp b/Framework/DataHandling/src/ImggAggregateWavelengths.cpp
index 77e6401..3b8d594 100644
--- a/Framework/DataHandling/src/ImggAggregateWavelengths.cpp
+++ b/Framework/DataHandling/src/ImggAggregateWavelengths.cpp
@@ -778,10 +778,7 @@ void ImggAggregateWavelengths::aggImage(API::MatrixWorkspace_sptr accum,
   }
 
   for (size_t row = 0; row < sizeY; row++) {
-    auto &outputY = accum->mutableY(row);
-    const auto &yValsInput = toAdd->y(row);
-    std::transform(outputY.begin(), outputY.end(), yValsInput.cbegin(),
-                   outputY.begin(), std::plus<double>());
+    accum->mutableY(row) += toAdd->y(row);
   }
 }
 
diff --git a/Framework/DataHandling/src/LoadAscii.cpp b/Framework/DataHandling/src/LoadAscii.cpp
index 9e300eb..24e0a47 100644
--- a/Framework/DataHandling/src/LoadAscii.cpp
+++ b/Framework/DataHandling/src/LoadAscii.cpp
@@ -199,15 +199,14 @@ API::Workspace_sptr LoadAscii::readData(std::ifstream &file) const {
     }
 
     for (size_t i = 0; i < numSpectra; ++i) {
-      auto resizedHistogram = spectra[i].histogram();
-      const size_t newPosition = resizedHistogram.x().size();
-      resizedHistogram.resize(newPosition + 1);
-      resizedHistogram.mutableX()[newPosition] = values[0];
-      resizedHistogram.mutableY()[newPosition] = values[i * 2 + 1];
+      auto hist = spectra[i].histogram();
+      hist.resize(hist.size() + 1);
+      hist.mutableX().back() = values[0];
+      hist.mutableY().back() = values[i * 2 + 1];
       if (haveErrors) {
-        resizedHistogram.mutableE()[newPosition] = values[i * 2 + 2];
+        hist.mutableE().back() = values[i * 2 + 2];
       }
-      spectra[i].setHistogram(resizedHistogram);
+      spectra[i].setHistogram(hist);
     }
     if (haveXErrors) {
       // Note: we only have X errors with 4-column files.
diff --git a/Framework/DataHandling/src/LoadAscii2.cpp b/Framework/DataHandling/src/LoadAscii2.cpp
index 34c65a6..e5ccb44 100644
--- a/Framework/DataHandling/src/LoadAscii2.cpp
+++ b/Framework/DataHandling/src/LoadAscii2.cpp
@@ -429,13 +429,11 @@ void LoadAscii2::addToCurrentSpectra(std::list<std::string> &columns) {
   m_spectraStart = false;
   fillInputValues(values, columns);
   // add X and Y
-  const size_t newPosition = m_curSpectra->x().size(); // For 0 based index
-  const size_t newSize = newPosition + 1;
-  auto resizedHisto = m_curSpectra->histogram();
-  resizedHisto.resize(newSize);
+  auto histo = m_curSpectra->histogram();
+  histo.resize(histo.size() + 1);
 
-  resizedHisto.mutableX()[newPosition] = values[0];
-  resizedHisto.mutableY()[newPosition] = values[1];
+  histo.mutableX().back() = values[0];
+  histo.mutableY().back() = values[1];
 
   // check for E and DX
   switch (m_baseCols) {
@@ -443,17 +441,17 @@ void LoadAscii2::addToCurrentSpectra(std::list<std::string> &columns) {
   // workspace, omit DX
   case 3: {
     // E in file, include it, omit DX
-    resizedHisto.mutableE()[newPosition] = values[2];
+    histo.mutableE().back() = values[2];
     break;
   }
   case 4: {
     // E and DX in file, include both
-    resizedHisto.mutableE()[newPosition] = values[2];
+    histo.mutableE().back() = values[2];
     m_curDx.push_back(values[3]);
     break;
   }
   }
-  m_curSpectra->setHistogram(resizedHisto);
+  m_curSpectra->setHistogram(histo);
   m_curBins++;
 }
 
diff --git a/Framework/DataHandling/test/LoadAscii2Test.h b/Framework/DataHandling/test/LoadAscii2Test.h
index 87d9218..547ba2e 100644
--- a/Framework/DataHandling/test/LoadAscii2Test.h
+++ b/Framework/DataHandling/test/LoadAscii2Test.h
@@ -586,17 +586,6 @@ private:
             WorkspaceFactory::Instance().create("Workspace2D", numVecs, xyLen,
                                                 xyLen));
 
-    for (int i = 0; i < numVecs; i++) {
-      auto &X = wsToSave->mutableX(i);
-      auto &Y = wsToSave->mutableY(i);
-      auto &E = wsToSave->mutableE(i);
-      for (int j = 0; j < xyLen; j++) {
-        X[j] = 1.5 * j / 0.9;
-        Y[j] = (i + 1) * (2. + 4. * X[j]);
-        E[j] = 1.;
-      }
-    }
-
     const std::string name = "SaveAsciiWS";
     AnalysisDataService::Instance().add(name, wsToSave);
 
