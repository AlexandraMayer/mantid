#ifndef MANTIDQTCUSTOMINTERFACES_DATACOMPARISONVIEW_H_
#define MANTIDQTCUSTOMINTERFACES_DATACOMPARISONVIEW_H_

#include "MantidQtCustomInterfaces/DataComparison/IDataComparisonView.h"

//----------------------
// Includes
//----------------------
#include "ui_DataComparisonView.h"
#include "MantidQtAPI/UserSubWindow.h"
#include "MantidAPI/MatrixWorkspace_fwd.h"

#include <memory>

#include <qwt_plot.h>
#include <qwt_plot_curve.h>
#include <qwt_plot_magnifier.h>
#include <qwt_plot_panner.h>
#include <qwt_plot_zoomer.h>

namespace MantidQt {
namespace CustomInterfaces {

/**
Concrete implementation of the view as in the MVP pattern. Methods defined here
will be used by the presenter to act on the view.

Copyright &copy; 2016 ISIS Rutherford Appleton Laboratory, NScD
Oak Ridge National Laboratory & European Spallation Source

This file is part of Mantid.

Mantid is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or
(at your option) any later version.

Mantid is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

File change history is stored at: <https://github.com/mantidproject/mantid>
Code Documentation is available at: <http://doxygen.mantidproject.org>
*/

class IDataComparisonPresenter;

class DataComparisonView
    : public MantidQt::API::UserSubWindow,
      public MantidQt::CustomInterfaces::IDataComparisonView {
  Q_OBJECT

public:
  /// The name of the interface as registered into the factory
  static std::string name() { return "Data Comparison"; }
  // This interface's categories.
  static QString categoryInfo() { return "General"; }

public:
  /// Constructor
  DataComparisonView(QWidget *parent = 0);

  /// Methods inherited from IDataComparisonView

  /// Return selected workspace name
  std::string getSelectedWorkspaceName() const override;
  /// Return all the workspace names
  std::vector<std::string> getWorkspaceNames() const override;
  /// Return names of selected workspaces
  std::vector<std::string> getSelectedWorkspaceNames() const override;
  /// Return all the workspace colors
  std::vector<std::string> getWorkspaceColors() const override;
  /// Return available colors
  std::vector<std::string> getAvailableColors() const override;

  /// Adds a workspace to the data table
  void addWorkspace(const std::string &wsName, int colorIndex);
  /// Remove a workspace (by name) from the table
  void removeWorkspace(const std::string &wsName) override;
  /// Tests if a workspace is shown in the UI
  bool containsWorkspace(const std::string &wsName) const override;
  /// Block/unblock signals emitted by the table
  void blockTableSignals(bool block) override;
  /// Detach a curve (workspace) from plot widget
  void detachCurve(const std::string &wsName) override;
  /// Plot a curve
  void plotCurve(const std::string &wsName, const QwtArrayData &curve,
                 const std::string &color) override;
  /// Return selected workspace index
  int getSelectedWorkspaceIndex() const;
  /// Print error message
  void printError(const std::string &message) override;
  /// Print information message
  void printInformation(const std::string &message) override;
  /// Pring debug message
  void printDebug(const std::string &message) override;

private slots:

  /// 'Add Data' clicked
  void addDataClicked();
  /// 'Remove All Data' clicked
  void removeAllDataClicked();
  /// 'Remove Selected Data' clicked
  void removeSelectedDataClicked();
  /// 'Diff Selected' clicked
  void diffSelectedClicked();
  /// Remove the diff from the plot
  void clearDiffClicked();
  /// Global workspace index changed
  void workspaceIndexChanged();
  /// Color changed
  void colorChanged();

  /// Toggle the pan plot tool
  void togglePan(bool enabled);
  /// Toggle the zoom plot tool
  void toggleZoom(bool enabled);
  /// Resets the zoom level to show all curves
  void resetView();

private:
  /// Enumeration for column index
  enum Column { COLOUR, WORKSPACE_NAME};

  /// Initialize the layout
  void initLayout() override;

private:
  // The form generated by Qt Designer
  Ui::DataComparisonView m_uiForm;
  /// The presenter
  std::unique_ptr<IDataComparisonPresenter> m_presenter;
  // Curves shown on plot, indexed by workspace name
  QMap<QString, boost::shared_ptr<QwtPlotCurve>> m_curves;

  // The plot object
  QwtPlot *m_plot;
  // Plot zoom tool
  QwtPlotZoomer *m_zoomTool;
  // Plot pan tool
  QwtPlotPanner *m_panTool;
  // Plot magnify tool
  QwtPlotMagnifier *m_magnifyTool;
};
}
}

#endif // MANTIDQTCUSTOMINTERFACES_DATACOMPARISONVIEW_H_
