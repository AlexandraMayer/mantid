#pylint: disable=no-init
from mantid import config, logger, AlgorithmFactory
from mantid.api import *
from mantid.kernel import *
from mantid.simpleapi import *
import os.path

class FuryFitMultiple(PythonAlgorithm):

    def category(self):
        return "Workflow\\MIDAS"

    def summary(self):
        #pylint: disable=anomalous-backslash-in-string
        return "Fits an \*\_iqt file generated by I(Q,t)."

    def PyInit(self):
        self.declareProperty(MatrixWorkspaceProperty('InputWorkspace', '', direction=Direction.Input),
                             doc='The _iqt.nxs InputWorkspace used by the algorithm')
        self.declareProperty(name='Function', '',
                             doc='The function to use in fitting')
        self.declareProperty(name='FitType', '',
                             doc='The type of fit being carried out')
        self.declareProperty(name='StartX', defaultValue=0,
                             doc="The first value for X")
        self.declareProperty(name='EndX', '',
                             doc="The last value for X")
        self.declareProperty(name='SpecMin', defaultValue=0,
                             doc='Minimum spectra in the worksapce to fit')
        self.declareProperty(name='SpecMax', '',
                             doc='Maximum spectra in the worksapce to fit')
        self.declareProperty(name='Minimizer','Levenberg-Marquardt',
                             doc='The minimizer to use in fitting')
        self.declareProperty(name="MaxIterations", defaultValue=500,
                             doc="The Maximum number of iterations for the fit")
        self.declareProperty(name='ConstrainIntensities', defaultValue=False,
                             doc="If the Intensities should be constrained during the fit")
        self.declareProperty(name='Save', defaultValue=False,
                             doc="Should the Output of the algorithm be saved to working directory")
        self.declareProperty(name='Plot', defaultValue='None', validator=StringListValidator(['None', 'Intensity', 'Tau', 'Beta', 'All']),
                             doc='Switch Plot Off/On')

    def PyExec(self):
        from IndirectDataAnalysis import furyfitMult

        # Get algorithm input
        inputWs = self.getProperty('InputWorkspace').value
        function = self.getProperty('Function').value
        fit_type = self.getProperty('FitType').value
        start_x = self.getProperty('StartX').value
        end_x = self.getProperty('EndX').value
        spec_min = self.getProperty('SpecMin').value
        spec_max = self.getProperty('SpecMax').value
        intensities_constrained = self.getProperty('ConstrainIntensities').value
        minimizer = self.getProperty('Minimizer').value
        max_iterations = self.getProperty('MaxIterations').value
        save = self.getProperty('Save').value
        plot = self.getProperty('Plot').value

        # Run FuryFitMultiple algorithm from indirectDataAnalysis
        furyfitMult(inputWs, function, fit_type, start_x, end_x,
                    spec_min, spec_max, intensities_constrained,
                    minimizer, max_iterations, save, plot)

AlgorithmFactory.subscribe(FuryFitMultiple)
