import matplotlib.pyplot as plt
import sys, os

# Import mantid
curdir = os.getcwd()
libpath = os.path.join(curdir.split('Code')[0], 'Code/debug/bin')
if os.path.exists(libpath) is False:
    libpath = os.path.join(curdir.split('Code')[0], 'Code/release/bin')
sys.path.append(libpath)
import mantid.simpleapi as api

"""
Plotting functions for use in ipython notebooks generated by Mantid.
"""


def plot_with_options(ax, ws, ops, n):
    """
    Enable/disable legend, grid, limits according to
    options (ops) for the given axes (ax).
    Plot with or without errorbars.
    """
    ws_plot = api.ConvertToPointData(ws)
    if ops['errorbars']:
        ax.errorbar(ws_plot.readX(0), ws_plot.readY(0), yerr=ws_plot.readE(0), label=ws.name())
    else:
        ax.plot(ws_plot.readX(0), ws_plot.readY(0), label=ws.name())
    
    ax.grid(ops['grid'])
    ax.set_xscale(ops['xScale']); ax.set_yscale(ops['yScale'])
    if ops['xLimits'] != 'auto': ax.set_xlim(ops['xLimits'])
    if ops['yLimits'] != 'auto': ax.set_ylim(ops['yLimits'])
    
    # If a list of titles was given, use it to title each subplot
    if hasattr(ops['title'], "__iter__"):
        ax.set_title(ops['title'][n])
    if ops['legend'] and hasattr(ops['legendLocation'], "__iter__"):
        ax.legend(loc=ops['legendLocation'][n])
    elif ops['legend']:
        ax.legend(loc=ops['legendLocation'])    

def plots(listOfWorkspaces, *args, **kwargs):
    """
    Draw a default reflectivity plot.
    Workspaces within a group workspace are plotted together on the same axes.

    Examples:
    plots(rr)
    plots(rr, 'TheGraphTitle')
    plots(rr, 'TheGraphTitle', grid=True, legend=True, xScale='linear', yScale='log', xLimits=[0.008, 0.16])
    plots(rr, sharedAxes = False, xLimits = [0, 0.1], yLimits = [1e-5, 2], Title='ASF070_07 I=1A T=3K dq/q=2%', legend=True, legendLocation=3, errorbars=False)
    """

    if not hasattr(listOfWorkspaces, "__iter__"):
        listOfWorkspaces = [listOfWorkspaces]

    # Process the function arguments.  In either case(named or unnamed) build a dictionary of options)
    keylist = ['title', 'grid', 'legend', 'legendLocation', 'xScale', 'yScale', 'xLimits', 'yLimits', 'sharedAxes', 'errorbars']
    defaultValues = ['', True, True, 1, 'log', 'log', 'auto', 'auto', True, 'True']

    # Fill ops with the default values
    ops=dict(zip(keylist,defaultValues))
    for i in range(len(args)):  # copy in values provided in args
        defaultValues[i]=args[i]
    ops=dict(zip(keylist,defaultValues))

    for k in ops.keys():  # copy in any key word given arguments
        ops[k]= kwargs.get(k,ops[k])

    # Create subplots for workspaces in the list
    fig, ax = plt.subplots(1, len(listOfWorkspaces), sharey=ops['sharedAxes'], figsize=(6*len(listOfWorkspaces),4))

    if not hasattr(ax, "__iter__"):
        ax = [ax]

    for n, ws in enumerate(listOfWorkspaces):
        if type(ws) == api._api.WorkspaceGroup:
            # Plot grouped workspaces on the same axes
            for sub_ws in ws:
                plot_with_options(ax[n], sub_ws, ops, n)
        else:
            plot_with_options(ax[n], ws, ops, n)
            
    # If a single title was given, use it to title the whole figure
    if not hasattr(ops['title'], "__iter__"):
        fig.suptitle(ops['title'])
    plt.show()
    
    return plt.gcf()

